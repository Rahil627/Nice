// Generated by Haxe 3.4.7
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var js_node_ChildProcess = require("child_process");
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Sys = function() { };
$hxClasses["Sys"] = Sys;
Sys.__name__ = ["Sys"];
Sys.environment = function() {
	var m = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(process.env);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var v = process.env[key];
		if(__map_reserved[key] != null) {
			m.setReserved(key,v);
		} else {
			m.h[key] = v;
		}
	}
	return m;
};
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Console = function() { };
$hxClasses["Console"] = Console;
Console.__name__ = ["Console"];
Console.printlnFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	Console.printFormatted(s + "\n",outputStream);
	return;
};
Console.println = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	Console.print(s + "\n",outputStream);
	return;
};
Console.printFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	s += "<//>";
	var activeFormatFlagStack = [];
	var groupedProceedingTags = [];
	var browserFormatArguments = [];
	var result = Console.formatTagPattern.map(s,function(e) {
		var open = e.matched(1) == null;
		var tags = e.matched(2).split(",");
		if(!open && tags.length == 1) {
			if(tags[0] == "") {
				var last = activeFormatFlagStack[activeFormatFlagStack.length - 1];
				var i = activeFormatFlagStack.indexOf(last);
				if(i != -1) {
					var proceedingTags = groupedProceedingTags[i];
					activeFormatFlagStack.splice(i - proceedingTags,proceedingTags + 1);
					groupedProceedingTags.splice(i - proceedingTags,proceedingTags + 1);
				}
			} else if(_$Console_FormatFlag_$Impl_$.fromString(tags[0]) == "reset") {
				activeFormatFlagStack = [];
				groupedProceedingTags = [];
			} else {
				var flag = _$Console_FormatFlag_$Impl_$.fromString(tags[0]);
				if(flag != null) {
					var i1 = activeFormatFlagStack.indexOf(flag);
					if(i1 != -1) {
						var proceedingTags1 = groupedProceedingTags[i1];
						activeFormatFlagStack.splice(i1 - proceedingTags1,proceedingTags1 + 1);
						groupedProceedingTags.splice(i1 - proceedingTags1,proceedingTags1 + 1);
					}
				}
			}
		} else {
			var proceedingTags2 = 0;
			var _g = 0;
			while(_g < tags.length) {
				var tag = tags[_g];
				++_g;
				var flag1 = _$Console_FormatFlag_$Impl_$.fromString(tag);
				if(flag1 == null) {
					return e.matched(0);
				}
				if(open) {
					activeFormatFlagStack.push(flag1);
					groupedProceedingTags.push(proceedingTags2);
					++proceedingTags2;
				} else {
					var i2 = activeFormatFlagStack.indexOf(flag1);
					if(i2 != -1) {
						var proceedingTags3 = groupedProceedingTags[i2];
						activeFormatFlagStack.splice(i2 - proceedingTags3,proceedingTags3 + 1);
						groupedProceedingTags.splice(i2 - proceedingTags3,proceedingTags3 + 1);
					}
				}
			}
		}
		var _g1 = Console.formatMode;
		switch(_g1) {
		case 0:
			if(open) {
				if(activeFormatFlagStack.length > 0) {
					var lastFlagCount = groupedProceedingTags[groupedProceedingTags.length - 1] + 1;
					var asciiFormatString = "";
					var _g11 = 0;
					var _g2 = lastFlagCount;
					while(_g11 < _g2) {
						var i3 = _g11++;
						var idx = groupedProceedingTags.length - 1 - i3;
						asciiFormatString += Console.getAsciiFormat(activeFormatFlagStack[idx]);
					}
					return asciiFormatString;
				} else {
					return "";
				}
			} else {
				return Console.getAsciiFormat("reset") + activeFormatFlagStack.map(function(f) {
					return Console.getAsciiFormat(f);
				}).filter(function(s1) {
					return s1 != null;
				}).join("");
			}
			break;
		case 1:
			var result1 = activeFormatFlagStack.map(function(f1) {
				return Console.getBrowserFormat(f1);
			}).filter(function(s2) {
				return s2 != null;
			}).join(";");
			browserFormatArguments.push(result1);
			return "%c";
		case 2:
			return "";
		}
	});
	if(Console.formatMode == 1) {
		var logArgs = [result].concat(browserFormatArguments);
		switch(outputStream) {
		case 1:
			console.warn.apply(console, logArgs);
			break;
		case 2:
			console.error.apply(console, logArgs);
			break;
		case 0:case 3:
			console.log.apply(console, logArgs);
			break;
		}
		return;
	}
	Console.print(result,outputStream);
};
Console.print = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(Console.printIntercept != null) {
		var allowDefaultPrint = Console.printIntercept(s,outputStream);
		if(!allowDefaultPrint) {
			return;
		}
	}
	if(Console.unicodeCompatibilityMode == 1 && !Console.unicodeCompatibilityEnabled) {
		Console.exec("chcp 65001");
		Console.unicodeCompatibilityEnabled = true;
	}
	switch(outputStream) {
	case 1:case 2:
		new _$Sys_FileOutput(2).writeString(s);
		break;
	case 0:case 3:
		new _$Sys_FileOutput(1).writeString(s);
		break;
	}
};
Console.getAsciiFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		var hex = HxOverrides.substr(flag,1,null);
		var r = Std.parseInt("0x" + HxOverrides.substr(hex,0,2));
		var g = Std.parseInt("0x" + HxOverrides.substr(hex,2,2));
		var b = Std.parseInt("0x" + HxOverrides.substr(hex,4,2));
		return "\x1B[38;5;" + Console.rgbToAscii256(r,g,b) + "m";
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		var hex1 = HxOverrides.substr(flag,3,null);
		var r1 = Std.parseInt("0x" + HxOverrides.substr(hex1,0,2));
		var g1 = Std.parseInt("0x" + HxOverrides.substr(hex1,2,2));
		var b1 = Std.parseInt("0x" + HxOverrides.substr(hex1,4,2));
		return "\x1B[48;5;" + Console.rgbToAscii256(r1,g1,b1) + "m";
	}
	switch(flag) {
	case "bg_black":
		return "\x1B[48;5;" + 0 + "m";
	case "bg_blue":
		return "\x1B[48;5;" + 4 + "m";
	case "bg_cyan":
		return "\x1B[48;5;" + 6 + "m";
	case "bg_green":
		return "\x1B[48;5;" + 2 + "m";
	case "bg_light_black":
		return "\x1B[48;5;" + 8 + "m";
	case "bg_light_blue":
		return "\x1B[48;5;" + 12 + "m";
	case "bg_light_cyan":
		return "\x1B[48;5;" + 14 + "m";
	case "bg_light_green":
		return "\x1B[48;5;" + 10 + "m";
	case "bg_light_magenta":
		return "\x1B[48;5;" + 13 + "m";
	case "bg_light_red":
		return "\x1B[48;5;" + 9 + "m";
	case "bg_light_white":
		return "\x1B[48;5;" + 15 + "m";
	case "bg_light_yellow":
		return "\x1B[48;5;" + 11 + "m";
	case "bg_magenta":
		return "\x1B[48;5;" + 5 + "m";
	case "bg_red":
		return "\x1B[48;5;" + 1 + "m";
	case "bg_white":
		return "\x1B[48;5;" + 7 + "m";
	case "bg_yellow":
		return "\x1B[48;5;" + 3 + "m";
	case "black":
		return "\x1B[38;5;" + 0 + "m";
	case "blink":
		return "\x1B[5m";
	case "blue":
		return "\x1B[38;5;" + 4 + "m";
	case "bold":
		return "\x1B[1m";
	case "cyan":
		return "\x1B[38;5;" + 6 + "m";
	case "dim":
		return "\x1B[2m";
	case "green":
		return "\x1B[38;5;" + 2 + "m";
	case "hidden":
		return "\x1B[8m";
	case "invert":
		return "\x1B[7m";
	case "italic":
		return "\x1B[3m";
	case "light_black":
		return "\x1B[38;5;" + 8 + "m";
	case "light_blue":
		return "\x1B[38;5;" + 12 + "m";
	case "light_cyan":
		return "\x1B[38;5;" + 14 + "m";
	case "light_green":
		return "\x1B[38;5;" + 10 + "m";
	case "light_magenta":
		return "\x1B[38;5;" + 13 + "m";
	case "light_red":
		return "\x1B[38;5;" + 9 + "m";
	case "light_white":
		return "\x1B[38;5;" + 15 + "m";
	case "light_yellow":
		return "\x1B[38;5;" + 11 + "m";
	case "magenta":
		return "\x1B[38;5;" + 5 + "m";
	case "red":
		return "\x1B[38;5;" + 1 + "m";
	case "reset":
		return "\x1B[m";
	case "underline":
		return "\x1B[4m";
	case "white":
		return "\x1B[38;5;" + 7 + "m";
	case "yellow":
		return "\x1B[38;5;" + 3 + "m";
	default:
		return "";
	}
};
Console.rgbToAscii256 = function(r,g,b) {
	var nearIdx = function(c,set) {
		var delta = Infinity;
		var index = -1;
		var _g1 = 0;
		var _g = set.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = Math.abs(c - set[i]);
			if(d < delta) {
				delta = d;
				index = i;
			}
		}
		return index;
	};
	var colorSteps = [0,95,135,175,215,255];
	var ir = nearIdx(r,colorSteps);
	var ig = nearIdx(g,colorSteps);
	var ib = nearIdx(b,colorSteps);
	var ier = Math.abs(r - colorSteps[ir]);
	var ieg = Math.abs(g - colorSteps[ig]);
	var ieb = Math.abs(b - colorSteps[ib]);
	var averageColorError = ier + ieg + ieb;
	var jr = Math.round((r - 8) / 10);
	var jg = Math.round((g - 8) / 10);
	var jb = Math.round((b - 8) / 10);
	var jer = Math.abs(r - Math.max(Math.min(jr * 10 + 8,238),8));
	var jeg = Math.abs(g - Math.max(Math.min(jg * 10 + 8,238),8));
	var jeb = Math.abs(b - Math.max(Math.min(jb * 10 + 8,238),8));
	var averageGrayError = jer + jeg + jeb;
	if(averageGrayError < averageColorError && r == g && g == b) {
		var grayIndex = jr + 232;
		return grayIndex;
	} else {
		var colorIndex = 16 + ir * 36 + ig * 6 + ib;
		return colorIndex;
	}
};
Console.getBrowserFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		return "color: " + flag;
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		return "background-color: " + HxOverrides.substr(flag,2,null);
	}
	if(flag.charAt(0) == "{") {
		return HxOverrides.substr(flag,1,flag.length - 2);
	}
	switch(flag) {
	case "bg_black":
		return "background-color: black";
	case "bg_blue":
		return "background-color: blue";
	case "bg_cyan":
		return "background-color: cyan";
	case "bg_green":
		return "background-color: green";
	case "bg_light_black":
		return "background-color: gray";
	case "bg_light_blue":
		return "background-color: lightBlue";
	case "bg_light_cyan":
		return "background-color: lightCyan";
	case "bg_light_green":
		return "background-color: lightGreen";
	case "bg_light_magenta":
		return "background-color: lightPink";
	case "bg_light_red":
		return "background-color: salmon";
	case "bg_light_white":
		return "background-color: white";
	case "bg_light_yellow":
		return "background-color: lightYellow";
	case "bg_magenta":
		return "background-color: magenta";
	case "bg_red":
		return "background-color: red";
	case "bg_white":
		return "background-color: whiteSmoke";
	case "bg_yellow":
		return "background-color: gold";
	case "black":
		return "color: black";
	case "blink":
		return "text-decoration: blink";
	case "blue":
		return "color: blue";
	case "bold":
		return "font-weight: bold";
	case "cyan":
		return "color: cyan";
	case "dim":
		return "color: gray";
	case "green":
		return "color: green";
	case "hidden":
		return "visibility: hidden; color: white";
	case "invert":
		return "-webkit-filter: invert(100%); filter: invert(100%)";
	case "italic":
		return "font-style: italic";
	case "light_black":
		return "color: gray";
	case "light_blue":
		return "color: lightBlue";
	case "light_cyan":
		return "color: lightCyan";
	case "light_green":
		return "color: lightGreen";
	case "light_magenta":
		return "color: lightPink";
	case "light_red":
		return "color: salmon";
	case "light_white":
		return "color: white";
	case "light_yellow":
		return "color: #ffed88";
	case "magenta":
		return "color: magenta";
	case "red":
		return "color: red";
	case "reset":
		return "";
	case "underline":
		return "text-decoration: underline";
	case "white":
		return "color: whiteSmoke";
	case "yellow":
		return "color: #f5ba00";
	default:
		return "";
	}
};
Console.determineConsoleFormatMode = function() {
	var hasWindowObject = typeof window !== "undefined";
	if(hasWindowObject) {
		return 1;
	}
	var tputColors = Console.exec("tput colors");
	if(tputColors.exit == 0 && Std.parseInt(tputColors.stdout) > 2) {
		return 0;
	}
	var _this = Sys.environment();
	var termEnv = __map_reserved["TERM"] != null ? _this.getReserved("TERM") : _this.h["TERM"];
	if(termEnv != null && new EReg("cygwin|xterm|vt100","").match(termEnv)) {
		return 0;
	}
	return 2;
};
Console.joinArgs = function(rest) {
	var msg = { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString("")), pos : { file : "/usr/local/lib/haxe/lib/Console,hx/0,2,12/Console.hx", min : 19027, max : 19029}};
	var _g1 = 0;
	var _g = rest.length;
	while(_g1 < _g) {
		var i = _g1++;
		var e = rest[i];
		msg = { expr : haxe_macro_ExprDef.EBinop(haxe_macro_Binop.OpAdd,msg,e), pos : { file : "/usr/local/lib/haxe/lib/Console,hx/0,2,12/Console.hx", min : 19095, max : 19104}};
		if(i != rest.length - 1) {
			msg = { expr : haxe_macro_ExprDef.EBinop(haxe_macro_Binop.OpAdd,msg,{ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString("" + Console.argSeparator)), pos : { file : "/usr/local/lib/haxe/lib/Console,hx/0,2,12/Console.hx", min : 19159, max : 19174}}), pos : { file : "/usr/local/lib/haxe/lib/Console,hx/0,2,12/Console.hx", min : 19152, max : 19174}};
		}
	}
	return msg;
};
Console.exec = function(cmd,args) {
	var p = js_node_ChildProcess.spawnSync(cmd,args,{ });
	var stdout = p.stdout == null ? "" : p.stdout.toString();
	if(stdout == null) {
		stdout = "";
	}
	return { exit : p.status, stdout : stdout};
};
var _$Console_FormatFlag_$Impl_$ = {};
$hxClasses["_Console.FormatFlag_Impl_"] = _$Console_FormatFlag_$Impl_$;
_$Console_FormatFlag_$Impl_$.__name__ = ["_Console","FormatFlag_Impl_"];
_$Console_FormatFlag_$Impl_$.fromString = function(str) {
	str = str.toLowerCase();
	if(str.charAt(0) == "#" || HxOverrides.substr(str,0,3) == "bg#") {
		var hIdx = str.indexOf("#");
		var hex = HxOverrides.substr(str,hIdx + 1,null);
		if(hex.length == 3) {
			var a = hex.split("");
			hex = [a[0],a[0],a[1],a[1],a[2],a[2]].join("");
		}
		if(new EReg("[^0-9a-f]","i").match(hex) || hex.length < 6) {
			return "";
		}
		var normalized = str.substring(0,hIdx) + "#" + hex;
		return normalized;
	}
	switch(str) {
	case "!":
		return "invert";
	case "/":
		return "reset";
	case "b":
		return "bold";
	case "bg_gray":
		return "bg_light_black";
	case "gray":
		return "light_black";
	case "i":
		return "italic";
	case "u":
		return "underline";
	default:
		return str;
	}
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
var Markdown = function() { };
$hxClasses["Markdown"] = Markdown;
Markdown.__name__ = ["Markdown"];
Markdown.markdownToHtml = function(markdown) {
	var document = new Document();
	try {
		var _this_r = new RegExp("(\r\n|\r)","g".split("u").join(""));
		var lines = markdown.replace(_this_r,"\n").split("\n");
		document.parseRefLinks(lines);
		var blocks = document.parseLines(lines);
		return Markdown.renderHtml(blocks);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return "<pre>" + Std.string(e) + "</pre>";
	}
};
Markdown.renderHtml = function(blocks) {
	return new markdown_HtmlRenderer().render(blocks);
};
var Document = function() {
	this.refLinks = new haxe_ds_StringMap();
	this.inlineSyntaxes = [];
};
$hxClasses["Document"] = Document;
Document.__name__ = ["Document"];
Document.prototype = {
	refLinks: null
	,inlineSyntaxes: null
	,linkResolver: null
	,parseRefLinks: function(lines) {
		var indent = "^[ ]{0,3}";
		var id = "\\[([^\\]]+)\\]";
		var quote = "\"[^\"]+\"";
		var apos = "'[^']+'";
		var paren = "\\([^)]+\\)";
		var titles = new EReg("(" + quote + "|" + apos + "|" + paren + ")","");
		var link = new EReg("" + indent + id + ":\\s+(\\S+)\\s*(" + quote + "|" + apos + "|" + paren + "|)\\s*$","");
		var _g1 = 0;
		var _g = lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!link.match(lines[i])) {
				continue;
			}
			var id1 = link.matched(1);
			var url = link.matched(2);
			var title = link.matched(3);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = HxOverrides.substr(url,1,url.length - 2);
			}
			if(title == "" && lines[i + 1] != null && titles.match(lines[i + 1])) {
				title = titles.matched(1);
				lines[i + 1] = "";
			}
			if(title == "") {
				title = null;
			} else {
				title = title.substring(1,title.length - 1);
			}
			id1 = id1.toLowerCase();
			var this1 = this.refLinks;
			var value = new Link(id1,url,title);
			var _this = this1;
			if(__map_reserved[id1] != null) {
				_this.setReserved(id1,value);
			} else {
				_this.h[id1] = value;
			}
			lines[i] = "";
		}
	}
	,parseLines: function(lines) {
		var parser = new markdown_BlockParser(lines,this);
		var blocks = [];
		while(parser.pos < parser.lines.length) {
			var _g = 0;
			var _g1 = markdown_BlockSyntax.get_syntaxes();
			while(_g < _g1.length) {
				var syntax = _g1[_g];
				++_g;
				if(syntax.canParse(parser)) {
					var block = syntax.parse(parser);
					if(block != null) {
						blocks.push(block);
					}
					break;
				}
			}
		}
		return blocks;
	}
	,parseInline: function(text) {
		return new markdown_InlineParser(text,this).parse();
	}
	,__class__: Document
};
var Link = function(id,url,title) {
	this.id = id;
	this.url = url;
	this.title = title;
};
$hxClasses["Link"] = Link;
Link.__name__ = ["Link"];
Link.prototype = {
	id: null
	,url: null
	,title: null
	,__class__: Link
};
Math.__name__ = ["Math"];
var mustache_Writer = function() {
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["mustache.Writer"] = mustache_Writer;
mustache_Writer.__name__ = ["mustache","Writer"];
mustache_Writer.escapeHTML = function(string) {
	return mustache_Writer.escapeRe.map(string,function(re) {
		var this1 = mustache_Writer.entityMap;
		var key = re.matched(0);
		var _this = this1;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	});
};
mustache_Writer.prototype = {
	cache: null
	,clearCache: function() {
		this.cache = new haxe_ds_StringMap();
	}
	,parse: function(template,tags) {
		var _this = this.cache;
		var tokens = __map_reserved[template] != null ? _this.getReserved(template) : _this.h[template];
		if(tokens == null) {
			var this1 = this.cache;
			var v = mustache_Parser.parse(template,tags);
			var _this1 = this1;
			if(__map_reserved[template] != null) {
				_this1.setReserved(template,v);
			} else {
				_this1.h[template] = v;
			}
			tokens = v;
		}
		return tokens;
	}
	,render: function(template,context,partials) {
		return this.renderTokens(this.parse(template),context,partials,template);
	}
	,renderTokens: function(tokens,context,partials,originalTemplate) {
		var buffer = "";
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			var value;
			var _g1 = token.type;
			switch(_g1[1]) {
			case 0:
				value = token.value;
				break;
			case 1:
				var $escape = _g1[2];
				var value1 = context.lookup(token.value);
				if(value1 == null) {
					value = null;
				} else if($escape) {
					value = mustache_Writer.escapeHTML(Std.string(value1));
				} else {
					value = Std.string(value1);
				}
				break;
			case 2:
				var inverted = _g1[2];
				if(inverted) {
					value = this.renderInverted(token,context,partials,originalTemplate);
				} else {
					value = this.renderSection(token,context,partials,originalTemplate);
				}
				break;
			case 4:
				value = this.renderPartial(token,context,partials);
				break;
			case 3:case 5:case 6:
				continue;
				break;
			case 7:
				value = this.renderPartialOverride(token,context,partials);
				break;
			case 8:
				value = this.renderTokens(this.resolveBlock(token,context).subTokens,context,partials,originalTemplate);
				break;
			}
			if(value != null) {
				buffer += value;
			}
		}
		return buffer;
	}
	,renderSection: function(token,context,partials,originalTemplate) {
		var _gthis = this;
		var value = context.lookup(token.value);
		var _g = Mustache.getSectionValueKind(value);
		switch(_g[1]) {
		case 0:
			return null;
		case 1:
			var arr = _g[2];
			var buffer = "";
			var len = arr.length;
			var _g1 = 0;
			var _g2 = len;
			while(_g1 < _g2) {
				var i = _g1++;
				var token1 = token.subTokens;
				var this1 = new mustache__$Context_ContextImpl(arr[i],context,null);
				buffer += this.renderTokens(token1,this1,partials,originalTemplate);
			}
			return buffer;
		case 2:
			var obj = _g[2];
			var token2 = token.subTokens;
			var this2 = new mustache__$Context_ContextImpl(obj,context,null);
			return this.renderTokens(token2,this2,partials,originalTemplate);
		case 3:
			return this.renderTokens(token.subTokens,context,partials,originalTemplate);
		case 4:
			var f = _g[2];
			return f(originalTemplate.substring(token.endIndex,token.sectionEndIndex),function(template) {
				return _gthis.render(template,context,partials);
			});
		}
	}
	,renderInverted: function(token,context,partials,originalTemplate) {
		var value = context.lookup(token.value);
		var _g = Mustache.getSectionValueKind(value);
		if(_g[1] == 0) {
			return this.renderTokens(token.subTokens,context,partials,originalTemplate);
		} else {
			return null;
		}
	}
	,renderPartial: function(token,context,partials) {
		if(partials == null) {
			return null;
		}
		var value = partials(token.value);
		if(value != null) {
			return this.renderTokens(this.parse(value),context,partials,value);
		}
		return null;
	}
	,renderPartialOverride: function(token,context,partials) {
		if(partials == null) {
			return null;
		}
		var value = partials(token.value);
		if(value == null) {
			return null;
		}
		var tmp = this.parse(value);
		var this1 = new mustache__$Context_ContextImpl({ },context,token);
		return this.renderTokens(tmp,this1,partials,value);
	}
	,renderBlock: function(token,context,partials,originalTemplate) {
		return this.renderTokens(this.resolveBlock(token,context).subTokens,context,partials,originalTemplate);
	}
	,resolveBlock: function(token,context) {
		var resultToken = token;
		while(context != null) {
			if(context.partialOverride != null) {
				var _g = 0;
				var _g1 = context.partialOverride.subTokens;
				while(_g < _g1.length) {
					var overrideToken = _g1[_g];
					++_g;
					if(overrideToken.type == mustache_TokenType.Block && overrideToken.value == token.value) {
						resultToken = overrideToken;
					}
				}
			}
			context = context.parent;
		}
		return resultToken;
	}
	,__class__: mustache_Writer
};
var Mustache = function() { };
$hxClasses["Mustache"] = Mustache;
Mustache.__name__ = ["Mustache"];
Mustache.render = function(template,context,partials) {
	var _this = Mustache.defaultWriter;
	return _this.renderTokens(_this.parse(template),context,partials,template);
};
Mustache.parse = function(template,tags) {
	return Mustache.defaultWriter.parse(template,tags);
};
Mustache.clearCache = function() {
	Mustache.defaultWriter.cache = new haxe_ds_StringMap();
};
Mustache.getSectionValueKind = function(value) {
	if(value == null) {
		return SectionValueKind.KFalsy;
	}
	if(typeof(value) == "boolean") {
		if(value) {
			return SectionValueKind.KBasic;
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	if(typeof(value) == "number") {
		if(value != 0) {
			return SectionValueKind.KBasic;
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	var value1 = value;
	var str = (value1 instanceof String) ? value1 : null;
	if(str != null) {
		if(str.length > 0) {
			return SectionValueKind.KObject(str);
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	var value2 = value;
	var arr = (value2 instanceof Array) ? value2 : null;
	if(arr != null) {
		if(arr.length > 0) {
			return SectionValueKind.KArray(arr);
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	if(Reflect.isFunction(value)) {
		return SectionValueKind.KFunction(value);
	}
	if(Reflect.isObject(value)) {
		return SectionValueKind.KObject(value);
	}
	return SectionValueKind.KBasic;
};
var SectionValueKind = { __ename__ : true, __constructs__ : ["KFalsy","KArray","KObject","KBasic","KFunction"] };
SectionValueKind.KFalsy = ["KFalsy",0];
SectionValueKind.KFalsy.toString = $estr;
SectionValueKind.KFalsy.__enum__ = SectionValueKind;
SectionValueKind.KArray = function(a) { var $x = ["KArray",1,a]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
SectionValueKind.KObject = function(o) { var $x = ["KObject",2,o]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
SectionValueKind.KBasic = ["KBasic",3];
SectionValueKind.KBasic.toString = $estr;
SectionValueKind.KBasic.__enum__ = SectionValueKind;
SectionValueKind.KFunction = function(f) { var $x = ["KFunction",4,f]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
$hxClasses["_Sys.FileOutput"] = _$Sys_FileOutput;
_$Sys_FileOutput.__name__ = ["_Sys","FileOutput"];
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCharCode(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
$hxClasses["_Sys.FileInput"] = _$Sys_FileInput;
_$Sys_FileInput.__name__ = ["_Sys","FileInput"];
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = ["haxe","io","StringInput"];
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_macro_Constant = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"] };
haxe_macro_Constant.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CIdent = function(s) { var $x = ["CIdent",3,s]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CRegexp = function(r,opt) { var $x = ["CRegexp",4,r,opt]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
var haxe_macro_Binop = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"] };
haxe_macro_Binop.OpAdd = ["OpAdd",0];
haxe_macro_Binop.OpAdd.toString = $estr;
haxe_macro_Binop.OpAdd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMult = ["OpMult",1];
haxe_macro_Binop.OpMult.toString = $estr;
haxe_macro_Binop.OpMult.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpDiv = ["OpDiv",2];
haxe_macro_Binop.OpDiv.toString = $estr;
haxe_macro_Binop.OpDiv.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpSub = ["OpSub",3];
haxe_macro_Binop.OpSub.toString = $estr;
haxe_macro_Binop.OpSub.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssign = ["OpAssign",4];
haxe_macro_Binop.OpAssign.toString = $estr;
haxe_macro_Binop.OpAssign.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpEq = ["OpEq",5];
haxe_macro_Binop.OpEq.toString = $estr;
haxe_macro_Binop.OpEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpNotEq = ["OpNotEq",6];
haxe_macro_Binop.OpNotEq.toString = $estr;
haxe_macro_Binop.OpNotEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGt = ["OpGt",7];
haxe_macro_Binop.OpGt.toString = $estr;
haxe_macro_Binop.OpGt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGte = ["OpGte",8];
haxe_macro_Binop.OpGte.toString = $estr;
haxe_macro_Binop.OpGte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLt = ["OpLt",9];
haxe_macro_Binop.OpLt.toString = $estr;
haxe_macro_Binop.OpLt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLte = ["OpLte",10];
haxe_macro_Binop.OpLte.toString = $estr;
haxe_macro_Binop.OpLte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAnd = ["OpAnd",11];
haxe_macro_Binop.OpAnd.toString = $estr;
haxe_macro_Binop.OpAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpOr = ["OpOr",12];
haxe_macro_Binop.OpOr.toString = $estr;
haxe_macro_Binop.OpOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpXor = ["OpXor",13];
haxe_macro_Binop.OpXor.toString = $estr;
haxe_macro_Binop.OpXor.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe_macro_Binop.OpBoolAnd.toString = $estr;
haxe_macro_Binop.OpBoolAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolOr = ["OpBoolOr",15];
haxe_macro_Binop.OpBoolOr.toString = $estr;
haxe_macro_Binop.OpBoolOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShl = ["OpShl",16];
haxe_macro_Binop.OpShl.toString = $estr;
haxe_macro_Binop.OpShl.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShr = ["OpShr",17];
haxe_macro_Binop.OpShr.toString = $estr;
haxe_macro_Binop.OpShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpUShr = ["OpUShr",18];
haxe_macro_Binop.OpUShr.toString = $estr;
haxe_macro_Binop.OpUShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMod = ["OpMod",19];
haxe_macro_Binop.OpMod.toString = $estr;
haxe_macro_Binop.OpMod.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe_macro_Binop; $x.toString = $estr; return $x; };
haxe_macro_Binop.OpInterval = ["OpInterval",21];
haxe_macro_Binop.OpInterval.toString = $estr;
haxe_macro_Binop.OpInterval.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpArrow = ["OpArrow",22];
haxe_macro_Binop.OpArrow.toString = $estr;
haxe_macro_Binop.OpArrow.__enum__ = haxe_macro_Binop;
var haxe_macro_Unop = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe_macro_Unop.OpIncrement = ["OpIncrement",0];
haxe_macro_Unop.OpIncrement.toString = $estr;
haxe_macro_Unop.OpIncrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpDecrement = ["OpDecrement",1];
haxe_macro_Unop.OpDecrement.toString = $estr;
haxe_macro_Unop.OpDecrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNot = ["OpNot",2];
haxe_macro_Unop.OpNot.toString = $estr;
haxe_macro_Unop.OpNot.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNeg = ["OpNeg",3];
haxe_macro_Unop.OpNeg.toString = $estr;
haxe_macro_Unop.OpNeg.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNegBits = ["OpNegBits",4];
haxe_macro_Unop.OpNegBits.toString = $estr;
haxe_macro_Unop.OpNegBits.__enum__ = haxe_macro_Unop;
var haxe_macro_ExprDef = { __ename__ : true, __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIn","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"] };
haxe_macro_ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EArray = function(e1,e2) { var $x = ["EArray",1,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",2,op,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EField = function(e,field) { var $x = ["EField",3,e,field]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",4,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EObjectDecl = function(fields) { var $x = ["EObjectDecl",5,fields]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EArrayDecl = function(values) { var $x = ["EArrayDecl",6,values]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECall = function(e,params) { var $x = ["ECall",7,e,params]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ENew = function(t,params) { var $x = ["ENew",8,t,params]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EUnop = function(op,postFix,e) { var $x = ["EUnop",9,op,postFix,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EVars = function(vars) { var $x = ["EVars",10,vars]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EFunction = function(name,f) { var $x = ["EFunction",11,name,f]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBlock = function(exprs) { var $x = ["EBlock",12,exprs]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EFor = function(it,expr) { var $x = ["EFor",13,it,expr]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EIn = function(e1,e2) { var $x = ["EIn",14,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",15,econd,eif,eelse]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EWhile = function(econd,e,normalWhile) { var $x = ["EWhile",16,econd,e,normalWhile]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ESwitch = function(e,cases,edef) { var $x = ["ESwitch",17,e,cases,edef]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ETry = function(e,catches) { var $x = ["ETry",18,e,catches]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EReturn = function(e) { var $x = ["EReturn",19,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBreak = ["EBreak",20];
haxe_macro_ExprDef.EBreak.toString = $estr;
haxe_macro_ExprDef.EBreak.__enum__ = haxe_macro_ExprDef;
haxe_macro_ExprDef.EContinue = ["EContinue",21];
haxe_macro_ExprDef.EContinue.toString = $estr;
haxe_macro_ExprDef.EContinue.__enum__ = haxe_macro_ExprDef;
haxe_macro_ExprDef.EUntyped = function(e) { var $x = ["EUntyped",22,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EThrow = function(e) { var $x = ["EThrow",23,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECast = function(e,t) { var $x = ["ECast",24,e,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EDisplay = function(e,isCall) { var $x = ["EDisplay",25,e,isCall]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EDisplayNew = function(t) { var $x = ["EDisplayNew",26,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ETernary = function(econd,eif,eelse) { var $x = ["ETernary",27,econd,eif,eelse]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECheckType = function(e,t) { var $x = ["ECheckType",28,e,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EMeta = function(s,e) { var $x = ["EMeta",29,s,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
var haxe_macro_ComplexType = { __ename__ : true, __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe_macro_ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			var _g = child1.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hscript_Const = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString"] };
hscript_Const.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
var hscript_Expr = { __ename__ : true, __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch","EDoWhile","EMeta","ECheckType"] };
hscript_Expr.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EIdent = function(v) { var $x = ["EIdent",1,v]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EVar = function(n,t,e) { var $x = ["EVar",2,n,t,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EParent = function(e) { var $x = ["EParent",3,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBlock = function(e) { var $x = ["EBlock",4,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EField = function(e,f) { var $x = ["EField",5,e,f]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBinop = function(op,e1,e2) { var $x = ["EBinop",6,op,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EUnop = function(op,prefix,e) { var $x = ["EUnop",7,op,prefix,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ECall = function(e,params) { var $x = ["ECall",8,e,params]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EIf = function(cond,e1,e2) { var $x = ["EIf",9,cond,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EWhile = function(cond,e) { var $x = ["EWhile",10,cond,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EFor = function(v,it,e) { var $x = ["EFor",11,v,it,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBreak = ["EBreak",12];
hscript_Expr.EBreak.toString = $estr;
hscript_Expr.EBreak.__enum__ = hscript_Expr;
hscript_Expr.EContinue = ["EContinue",13];
hscript_Expr.EContinue.toString = $estr;
hscript_Expr.EContinue.__enum__ = hscript_Expr;
hscript_Expr.EFunction = function(args,e,name,ret) { var $x = ["EFunction",14,args,e,name,ret]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EReturn = function(e) { var $x = ["EReturn",15,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EArray = function(e,index) { var $x = ["EArray",16,e,index]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EArrayDecl = function(e) { var $x = ["EArrayDecl",17,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ENew = function(cl,params) { var $x = ["ENew",18,cl,params]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EThrow = function(e) { var $x = ["EThrow",19,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ETry = function(e,v,t,ecatch) { var $x = ["ETry",20,e,v,t,ecatch]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EObject = function(fl) { var $x = ["EObject",21,fl]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ETernary = function(cond,e1,e2) { var $x = ["ETernary",22,cond,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ESwitch = function(e,cases,defaultExpr) { var $x = ["ESwitch",23,e,cases,defaultExpr]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EDoWhile = function(cond,e) { var $x = ["EDoWhile",24,cond,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EMeta = function(name,args,e) { var $x = ["EMeta",25,name,args,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ECheckType = function(e,t) { var $x = ["ECheckType",26,e,t]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
var hscript_CType = { __ename__ : true, __constructs__ : ["CTPath","CTFun","CTAnon","CTParent","CTOpt","CTNamed"] };
hscript_CType.CTPath = function(path,params) { var $x = ["CTPath",0,path,params]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTFun = function(args,ret) { var $x = ["CTFun",1,args,ret]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTAnon = function(fields) { var $x = ["CTAnon",2,fields]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTParent = function(t) { var $x = ["CTParent",3,t]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTOpt = function(t) { var $x = ["CTOpt",4,t]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTNamed = function(n,t) { var $x = ["CTNamed",5,n,t]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
var hscript_Error = { __ename__ : true, __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EInvalidPreprocessor","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess","ECustom"] };
hscript_Error.EInvalidChar = function(c) { var $x = ["EInvalidChar",0,c]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnexpected = function(s) { var $x = ["EUnexpected",1,s]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnterminatedString = ["EUnterminatedString",2];
hscript_Error.EUnterminatedString.toString = $estr;
hscript_Error.EUnterminatedString.__enum__ = hscript_Error;
hscript_Error.EUnterminatedComment = ["EUnterminatedComment",3];
hscript_Error.EUnterminatedComment.toString = $estr;
hscript_Error.EUnterminatedComment.__enum__ = hscript_Error;
hscript_Error.EInvalidPreprocessor = function(msg) { var $x = ["EInvalidPreprocessor",4,msg]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnknownVariable = function(v) { var $x = ["EUnknownVariable",5,v]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidIterator = function(v) { var $x = ["EInvalidIterator",6,v]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidOp = function(op) { var $x = ["EInvalidOp",7,op]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidAccess = function(f) { var $x = ["EInvalidAccess",8,f]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.ECustom = function(msg) { var $x = ["ECustom",9,msg]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
var hscript_ModuleDecl = { __ename__ : true, __constructs__ : ["DPackage","DImport","DClass","DTypedef"] };
hscript_ModuleDecl.DPackage = function(path) { var $x = ["DPackage",0,path]; $x.__enum__ = hscript_ModuleDecl; $x.toString = $estr; return $x; };
hscript_ModuleDecl.DImport = function(path,everything) { var $x = ["DImport",1,path,everything]; $x.__enum__ = hscript_ModuleDecl; $x.toString = $estr; return $x; };
hscript_ModuleDecl.DClass = function(c) { var $x = ["DClass",2,c]; $x.__enum__ = hscript_ModuleDecl; $x.toString = $estr; return $x; };
hscript_ModuleDecl.DTypedef = function(c) { var $x = ["DTypedef",3,c]; $x.__enum__ = hscript_ModuleDecl; $x.toString = $estr; return $x; };
var hscript_FieldAccess = { __ename__ : true, __constructs__ : ["APublic","APrivate","AInline","AOverride","AStatic","AMacro"] };
hscript_FieldAccess.APublic = ["APublic",0];
hscript_FieldAccess.APublic.toString = $estr;
hscript_FieldAccess.APublic.__enum__ = hscript_FieldAccess;
hscript_FieldAccess.APrivate = ["APrivate",1];
hscript_FieldAccess.APrivate.toString = $estr;
hscript_FieldAccess.APrivate.__enum__ = hscript_FieldAccess;
hscript_FieldAccess.AInline = ["AInline",2];
hscript_FieldAccess.AInline.toString = $estr;
hscript_FieldAccess.AInline.__enum__ = hscript_FieldAccess;
hscript_FieldAccess.AOverride = ["AOverride",3];
hscript_FieldAccess.AOverride.toString = $estr;
hscript_FieldAccess.AOverride.__enum__ = hscript_FieldAccess;
hscript_FieldAccess.AStatic = ["AStatic",4];
hscript_FieldAccess.AStatic.toString = $estr;
hscript_FieldAccess.AStatic.__enum__ = hscript_FieldAccess;
hscript_FieldAccess.AMacro = ["AMacro",5];
hscript_FieldAccess.AMacro.toString = $estr;
hscript_FieldAccess.AMacro.__enum__ = hscript_FieldAccess;
var hscript_FieldKind = { __ename__ : true, __constructs__ : ["KFunction","KVar"] };
hscript_FieldKind.KFunction = function(f) { var $x = ["KFunction",0,f]; $x.__enum__ = hscript_FieldKind; $x.toString = $estr; return $x; };
hscript_FieldKind.KVar = function(v) { var $x = ["KVar",1,v]; $x.__enum__ = hscript_FieldKind; $x.toString = $estr; return $x; };
var hscript__$Interp_Stop = { __ename__ : true, __constructs__ : ["SBreak","SContinue","SReturn"] };
hscript__$Interp_Stop.SBreak = ["SBreak",0];
hscript__$Interp_Stop.SBreak.toString = $estr;
hscript__$Interp_Stop.SBreak.__enum__ = hscript__$Interp_Stop;
hscript__$Interp_Stop.SContinue = ["SContinue",1];
hscript__$Interp_Stop.SContinue.toString = $estr;
hscript__$Interp_Stop.SContinue.__enum__ = hscript__$Interp_Stop;
hscript__$Interp_Stop.SReturn = ["SReturn",2];
hscript__$Interp_Stop.SReturn.toString = $estr;
hscript__$Interp_Stop.SReturn.__enum__ = hscript__$Interp_Stop;
var hscript_Interp = function() {
	var _gthis = this;
	this.variables = new haxe_ds_StringMap();
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	var _this = this.variables;
	if(__map_reserved["null"] != null) {
		_this.setReserved("null",null);
	} else {
		_this.h["null"] = null;
	}
	var _this1 = this.variables;
	if(__map_reserved["true"] != null) {
		_this1.setReserved("true",true);
	} else {
		_this1.h["true"] = true;
	}
	var _this2 = this.variables;
	if(__map_reserved["false"] != null) {
		_this2.setReserved("false",false);
	} else {
		_this2.h["false"] = false;
	}
	var _this3 = this.variables;
	var value = Reflect.makeVarArgs(function(el) {
		var inf = _gthis.posInfos();
		var v = el.shift();
		if(el.length > 0) {
			inf.customParams = el;
		}
		haxe_Log.trace(Std.string(v),inf);
	});
	if(__map_reserved["trace"] != null) {
		_this3.setReserved("trace",value);
	} else {
		_this3.h["trace"] = value;
	}
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = ["hscript","Interp"];
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,returnValue: null
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		var _this = this.binops;
		if(__map_reserved["+"] != null) {
			_this.setReserved("+",function(e11,e21) {
				return me.expr(e11) + me.expr(e21);
			});
		} else {
			_this.h["+"] = function(e11,e21) {
				return me.expr(e11) + me.expr(e21);
			};
		}
		var _this1 = this.binops;
		if(__map_reserved["-"] != null) {
			_this1.setReserved("-",function(e121,e221) {
				return me.expr(e121) - me.expr(e221);
			});
		} else {
			_this1.h["-"] = function(e121,e221) {
				return me.expr(e121) - me.expr(e221);
			};
		}
		var _this2 = this.binops;
		if(__map_reserved["*"] != null) {
			_this2.setReserved("*",function(e131,e231) {
				return me.expr(e131) * me.expr(e231);
			});
		} else {
			_this2.h["*"] = function(e131,e231) {
				return me.expr(e131) * me.expr(e231);
			};
		}
		var _this3 = this.binops;
		if(__map_reserved["/"] != null) {
			_this3.setReserved("/",function(e141,e241) {
				return me.expr(e141) / me.expr(e241);
			});
		} else {
			_this3.h["/"] = function(e141,e241) {
				return me.expr(e141) / me.expr(e241);
			};
		}
		var _this4 = this.binops;
		if(__map_reserved["%"] != null) {
			_this4.setReserved("%",function(e151,e251) {
				return me.expr(e151) % me.expr(e251);
			});
		} else {
			_this4.h["%"] = function(e151,e251) {
				return me.expr(e151) % me.expr(e251);
			};
		}
		var _this5 = this.binops;
		if(__map_reserved["&"] != null) {
			_this5.setReserved("&",function(e161,e261) {
				return me.expr(e161) & me.expr(e261);
			});
		} else {
			_this5.h["&"] = function(e161,e261) {
				return me.expr(e161) & me.expr(e261);
			};
		}
		var _this6 = this.binops;
		if(__map_reserved["|"] != null) {
			_this6.setReserved("|",function(e171,e271) {
				return me.expr(e171) | me.expr(e271);
			});
		} else {
			_this6.h["|"] = function(e171,e271) {
				return me.expr(e171) | me.expr(e271);
			};
		}
		var _this7 = this.binops;
		if(__map_reserved["^"] != null) {
			_this7.setReserved("^",function(e181,e281) {
				return me.expr(e181) ^ me.expr(e281);
			});
		} else {
			_this7.h["^"] = function(e181,e281) {
				return me.expr(e181) ^ me.expr(e281);
			};
		}
		var _this8 = this.binops;
		if(__map_reserved["<<"] != null) {
			_this8.setReserved("<<",function(e191,e291) {
				return me.expr(e191) << me.expr(e291);
			});
		} else {
			_this8.h["<<"] = function(e191,e291) {
				return me.expr(e191) << me.expr(e291);
			};
		}
		var _this9 = this.binops;
		if(__map_reserved[">>"] != null) {
			_this9.setReserved(">>",function(e1101,e2101) {
				return me.expr(e1101) >> me.expr(e2101);
			});
		} else {
			_this9.h[">>"] = function(e1101,e2101) {
				return me.expr(e1101) >> me.expr(e2101);
			};
		}
		var _this10 = this.binops;
		if(__map_reserved[">>>"] != null) {
			_this10.setReserved(">>>",function(e1111,e2111) {
				return me.expr(e1111) >>> me.expr(e2111);
			});
		} else {
			_this10.h[">>>"] = function(e1111,e2111) {
				return me.expr(e1111) >>> me.expr(e2111);
			};
		}
		var _this11 = this.binops;
		if(__map_reserved["=="] != null) {
			_this11.setReserved("==",function(e1121,e2121) {
				return me.expr(e1121) == me.expr(e2121);
			});
		} else {
			_this11.h["=="] = function(e1121,e2121) {
				return me.expr(e1121) == me.expr(e2121);
			};
		}
		var _this12 = this.binops;
		if(__map_reserved["!="] != null) {
			_this12.setReserved("!=",function(e1131,e2131) {
				return me.expr(e1131) != me.expr(e2131);
			});
		} else {
			_this12.h["!="] = function(e1131,e2131) {
				return me.expr(e1131) != me.expr(e2131);
			};
		}
		var _this13 = this.binops;
		if(__map_reserved[">="] != null) {
			_this13.setReserved(">=",function(e1141,e2141) {
				return me.expr(e1141) >= me.expr(e2141);
			});
		} else {
			_this13.h[">="] = function(e1141,e2141) {
				return me.expr(e1141) >= me.expr(e2141);
			};
		}
		var _this14 = this.binops;
		if(__map_reserved["<="] != null) {
			_this14.setReserved("<=",function(e1151,e2151) {
				return me.expr(e1151) <= me.expr(e2151);
			});
		} else {
			_this14.h["<="] = function(e1151,e2151) {
				return me.expr(e1151) <= me.expr(e2151);
			};
		}
		var _this15 = this.binops;
		if(__map_reserved[">"] != null) {
			_this15.setReserved(">",function(e1161,e2161) {
				return me.expr(e1161) > me.expr(e2161);
			});
		} else {
			_this15.h[">"] = function(e1161,e2161) {
				return me.expr(e1161) > me.expr(e2161);
			};
		}
		var _this16 = this.binops;
		if(__map_reserved["<"] != null) {
			_this16.setReserved("<",function(e1171,e2171) {
				return me.expr(e1171) < me.expr(e2171);
			});
		} else {
			_this16.h["<"] = function(e1171,e2171) {
				return me.expr(e1171) < me.expr(e2171);
			};
		}
		var _this17 = this.binops;
		if(__map_reserved["||"] != null) {
			_this17.setReserved("||",function(e1181,e2181) {
				if(me.expr(e1181) != true) {
					return me.expr(e2181) == true;
				} else {
					return true;
				}
			});
		} else {
			_this17.h["||"] = function(e1181,e2181) {
				if(me.expr(e1181) != true) {
					return me.expr(e2181) == true;
				} else {
					return true;
				}
			};
		}
		var _this18 = this.binops;
		if(__map_reserved["&&"] != null) {
			_this18.setReserved("&&",function(e1191,e2191) {
				if(me.expr(e1191) == true) {
					return me.expr(e2191) == true;
				} else {
					return false;
				}
			});
		} else {
			_this18.h["&&"] = function(e1191,e2191) {
				if(me.expr(e1191) == true) {
					return me.expr(e2191) == true;
				} else {
					return false;
				}
			};
		}
		var _this19 = this.binops;
		var value = $bind(this,this.assign);
		if(__map_reserved["="] != null) {
			_this19.setReserved("=",value);
		} else {
			_this19.h["="] = value;
		}
		var _this20 = this.binops;
		if(__map_reserved["..."] != null) {
			_this20.setReserved("...",function(e1201,e2201) {
				return new IntIterator(me.expr(e1201),me.expr(e2201));
			});
		} else {
			_this20.h["..."] = function(e1201,e2201) {
				return new IntIterator(me.expr(e1201),me.expr(e2201));
			};
		}
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v11,v21) {
			return v11 - v21;
		});
		this.assignOp("*=",function(v12,v22) {
			return v12 * v22;
		});
		this.assignOp("/=",function(v13,v23) {
			return v13 / v23;
		});
		this.assignOp("%=",function(v14,v24) {
			return v14 % v24;
		});
		this.assignOp("&=",function(v15,v25) {
			return v15 & v25;
		});
		this.assignOp("|=",function(v16,v26) {
			return v16 | v26;
		});
		this.assignOp("^=",function(v17,v27) {
			return v17 ^ v27;
		});
		this.assignOp("<<=",function(v18,v28) {
			return v18 << v28;
		});
		this.assignOp(">>=",function(v19,v29) {
			return v19 >> v29;
		});
		this.assignOp(">>>=",function(v110,v210) {
			return v110 >>> v210;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			if(l == null) {
				this.variables.set(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			if(js_Boot.__instanceof(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			var e4 = hscript_Error.EInvalidOp("=");
			throw new js__$Boot_HaxeError(e4);
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		var _this = this.binops;
		if(__map_reserved[op] != null) {
			_this.setReserved(op,function(e11,e21) {
				return me.evalAssignOp(op,fop,e11,e21);
			});
		} else {
			_this.h[op] = function(e11,e21) {
				return me.evalAssignOp(op,fop,e11,e21);
			};
		}
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.set(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			if(js_Boot.__instanceof(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			var e4 = hscript_Error.EInvalidOp(op);
			throw new js__$Boot_HaxeError(e4);
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e[1]) {
		case 1:
			var id = e[2];
			var l = this.locals.get(id);
			var v = l == null ? this.variables.get(id) : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.set(id,v);
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.set(id,v + delta);
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var f = e[3];
			var e1 = e[2];
			var obj = this.expr(e1);
			var v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else {
				this.set(obj,f,v1 + delta);
			}
			return v1;
		case 16:
			var index = e[3];
			var e2 = e[2];
			var arr = this.expr(e2);
			var index1 = this.expr(index);
			if(js_Boot.__instanceof(arr,haxe_IMap)) {
				var v2 = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v2 += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v2);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v2 + delta);
				}
				return v2;
			} else {
				var v3 = arr[index1];
				if(prefix) {
					v3 += delta;
					arr[index1] = v3;
				} else {
					arr[index1] = v3 + delta;
				}
				return v3;
			}
			break;
		default:
			var e3 = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw new js__$Boot_HaxeError(e3);
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,hscript__$Interp_Stop) ) {
				switch(e1[1]) {
				case 0:
					throw new js__$Boot_HaxeError("Invalid break");
					break;
				case 1:
					throw new js__$Boot_HaxeError("Invalid continue");
					break;
				case 2:
					var v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else throw(e1);
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var k = h.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var value = __map_reserved[k1] != null ? h.getReserved(k1) : h.h[k1];
			if(__map_reserved[k1] != null) {
				h2.setReserved(k1,value);
			} else {
				h2.h[k1] = value;
			}
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			var key = d.n;
			var value = d.old;
			var _this = this.locals;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,error: function(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw new js__$Boot_HaxeError(e);
		} else {
			throw new js__$Boot_HaxeError(e);
		}
	}
	,rethrow: function(e) {
		throw js__$Boot_HaxeError.wrap(e);
	}
	,resolve: function(id) {
		var _this = this.locals;
		var l = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(l != null) {
			return l.r;
		}
		var _this1 = this.variables;
		var v = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		var tmp;
		if(v == null) {
			var _this2 = this.variables;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var e = hscript_Error.EUnknownVariable(id);
			throw new js__$Boot_HaxeError(e);
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e[1]) {
		case 0:
			var c = e[2];
			switch(c[1]) {
			case 0:
				var v = c[2];
				return v;
			case 1:
				var f = c[2];
				return f;
			case 2:
				var s = c[2];
				return s;
			}
			break;
		case 1:
			var id = e[2];
			return this.resolve(id);
		case 2:
			var e1 = e[4];
			var n = e[2];
			this.declared.push({ n : n, old : this.locals.get(n)});
			this.locals.set(n,{ r : e1 == null ? null : this.expr(e1)});
			return null;
		case 3:
			var e2 = e[2];
			return this.expr(e2);
		case 4:
			var exprs = e[2];
			var old = this.declared.length;
			var v1 = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e3 = exprs[_g];
				++_g;
				v1 = this.expr(e3);
			}
			this.restore(old);
			return v1;
		case 5:
			var f1 = e[3];
			var e4 = e[2];
			return this.get(this.expr(e4),f1);
		case 6:
			var e21 = e[4];
			var e11 = e[3];
			var op = e[2];
			var fop = this.binops.get(op);
			if(fop == null) {
				var e5 = hscript_Error.EInvalidOp(op);
				throw new js__$Boot_HaxeError(e5);
			}
			return fop(e11,e21);
		case 7:
			var e6 = e[4];
			var prefix = e[3];
			var op1 = e[2];
			switch(op1) {
			case "!":
				return this.expr(e6) != true;
			case "++":
				return this.increment(e6,prefix,1);
			case "-":
				return -this.expr(e6);
			case "--":
				return this.increment(e6,prefix,-1);
			case "~":
				return ~this.expr(e6);
			default:
				var e7 = hscript_Error.EInvalidOp(op1);
				throw new js__$Boot_HaxeError(e7);
			}
			break;
		case 8:
			var params = e[3];
			var e8 = e[2];
			var args = [];
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				args.push(this.expr(p));
			}
			if(e8[1] == 5) {
				var f2 = e8[3];
				var e9 = e8[2];
				var obj = this.expr(e9);
				if(obj == null) {
					var e10 = hscript_Error.EInvalidAccess(f2);
					throw new js__$Boot_HaxeError(e10);
				}
				return this.fcall(obj,f2,args);
			} else {
				return this.call(null,this.expr(e8),args);
			}
			break;
		case 9:
			var e22 = e[4];
			var e12 = e[3];
			var econd = e[2];
			if(this.expr(econd) == true) {
				return this.expr(e12);
			} else if(e22 == null) {
				return null;
			} else {
				return this.expr(e22);
			}
			break;
		case 10:
			var e13 = e[3];
			var econd1 = e[2];
			this.whileLoop(econd1,e13);
			return null;
		case 11:
			var e14 = e[4];
			var it = e[3];
			var v2 = e[2];
			this.forLoop(v2,it,e14);
			return null;
		case 12:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SBreak);
			break;
		case 13:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SContinue);
			break;
		case 14:
			var name = e[4];
			var fexpr = e[3];
			var params1 = e[2];
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g2 = 0;
			while(_g2 < params1.length) {
				var p1 = params1[_g2];
				++_g2;
				if(p1.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f3 = function(args1) {
				if(args1.length != params1.length) {
					if(args1.length < minParams) {
						var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						throw new js__$Boot_HaxeError(str);
					}
					var args2 = [];
					var extraParams = args1.length - minParams;
					var pos = 0;
					var _g3 = 0;
					while(_g3 < params1.length) {
						var p2 = params1[_g3];
						++_g3;
						if(p2.opt) {
							if(extraParams > 0) {
								args2.push(args1[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args1[pos++]);
						}
					}
					args1 = args2;
				}
				var old1 = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g11 = 0;
				var _g4 = params1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					me.locals.set(params1[i].name,{ r : args1[i]});
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( e15 ) {
						if (e15 instanceof js__$Boot_HaxeError) e15 = e15.val;
						me.locals = old1;
						me.depth = depth;
						throw js__$Boot_HaxeError.wrap(e15);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old1;
				me.depth = depth;
				return r;
			};
			var f4 = Reflect.makeVarArgs(f3);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.set(name,f4);
				} else {
					var tmp = this.declared;
					var tmp1 = this.locals.get(name);
					tmp.push({ n : name, old : tmp1});
					var ref = { r : f4};
					this.locals.set(name,ref);
					if(__map_reserved[name] != null) {
						capturedLocals.setReserved(name,ref);
					} else {
						capturedLocals.h[name] = ref;
					}
				}
			}
			return f4;
		case 15:
			var e16 = e[2];
			this.returnValue = e16 == null ? null : this.expr(e16);
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SReturn);
			break;
		case 16:
			var index = e[3];
			var e17 = e[2];
			var arr = this.expr(e17);
			var index1 = this.expr(index);
			if(js_Boot.__instanceof(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr1 = e[2];
			var tmp2;
			if(arr1.length > 0) {
				var _g5 = arr1[0];
				if(_g5[1] == 6) {
					if(_g5[2] == "=>") {
						tmp2 = true;
					} else {
						tmp2 = false;
					}
				} else {
					tmp2 = false;
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g12 = 0;
				while(_g12 < arr1.length) {
					var e18 = arr1[_g12];
					++_g12;
					if(e18[1] == 6) {
						if(e18[2] == "=>") {
							var eValue = e18[4];
							var eKey = e18[3];
							var key = this.expr(eKey);
							var value = this.expr(eValue);
							if(isAllString) {
								isAllString = typeof(key) == "string";
							} else {
								isAllString = false;
							}
							if(isAllInt) {
								if(typeof(key) == "number") {
									isAllInt = ((key | 0) === key);
								} else {
									isAllInt = false;
								}
							} else {
								isAllInt = false;
							}
							if(isAllObject) {
								isAllObject = Reflect.isObject(key);
							} else {
								isAllObject = false;
							}
							if(isAllEnum) {
								isAllEnum = Reflect.isEnumValue(key);
							} else {
								isAllEnum = false;
							}
							keys.push(key);
							values.push(value);
						} else {
							throw new js__$Boot_HaxeError("=> expected");
						}
					} else {
						throw new js__$Boot_HaxeError("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw new js__$Boot_HaxeError("Inconsistent key types");
				}
				var _g21 = 0;
				var _g13 = keys.length;
				while(_g21 < _g13) {
					var n1 = _g21++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n1],values[n1]);
				}
				return map;
			} else {
				var a = [];
				var _g14 = 0;
				while(_g14 < arr1.length) {
					var e19 = arr1[_g14];
					++_g14;
					a.push(this.expr(e19));
				}
				return a;
			}
			break;
		case 18:
			var params2 = e[3];
			var cl = e[2];
			var a1 = [];
			var _g6 = 0;
			while(_g6 < params2.length) {
				var e20 = params2[_g6];
				++_g6;
				a1.push(this.expr(e20));
			}
			return this.cnew(cl,a1);
		case 19:
			var e23 = e[2];
			throw js__$Boot_HaxeError.wrap(this.expr(e23));
			break;
		case 20:
			var ecatch = e[5];
			var n2 = e[3];
			var e24 = e[2];
			var old2 = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v3 = this.expr(e24);
				this.restore(old2);
				this.inTry = oldTry;
				return v3;
			} catch( $e0 ) {
				if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
				if( js_Boot.__instanceof($e0,hscript__$Interp_Stop) ) {
					var err = $e0;
					this.inTry = oldTry;
					throw new js__$Boot_HaxeError(err);
				} else {
				var err1 = $e0;
				this.restore(old2);
				this.inTry = oldTry;
				this.declared.push({ n : n2, old : this.locals.get(n2)});
				this.locals.set(n2,{ r : err1});
				var v4 = this.expr(ecatch);
				this.restore(old2);
				return v4;
				}
			}
			break;
		case 21:
			var fl = e[2];
			var o = { };
			var _g7 = 0;
			while(_g7 < fl.length) {
				var f5 = fl[_g7];
				++_g7;
				this.set(o,f5.name,this.expr(f5.e));
			}
			return o;
		case 22:
			var e25 = e[4];
			var e110 = e[3];
			var econd2 = e[2];
			if(this.expr(econd2) == true) {
				return this.expr(e110);
			} else {
				return this.expr(e25);
			}
			break;
		case 23:
			var def = e[4];
			var cases = e[3];
			var e26 = e[2];
			var val = this.expr(e26);
			var match = false;
			var _g8 = 0;
			while(_g8 < cases.length) {
				var c1 = cases[_g8];
				++_g8;
				var _g15 = 0;
				var _g22 = c1.values;
				while(_g15 < _g22.length) {
					var v5 = _g22[_g15];
					++_g15;
					if(this.expr(v5) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c1.expr);
					break;
				}
			}
			if(!match) {
				if(def == null) {
					val = null;
				} else {
					val = this.expr(def);
				}
			}
			return val;
		case 24:
			var e27 = e[3];
			var econd3 = e[2];
			this.doWhileLoop(econd3,e27);
			return null;
		case 25:
			var e28 = e[4];
			return this.expr(e28);
		case 26:
			var e29 = e[2];
			return this.expr(e29);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		try {
			while(true) {
				try {
					this.expr(e);
				} catch( err ) {
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
						switch(err[1]) {
						case 0:
							throw "__break__";
							break;
						case 1:
							break;
						case 2:
							throw new js__$Boot_HaxeError(err);
							break;
						}
					} else throw(err);
				}
				if(!(this.expr(econd) == true)) {
					throw "__break__";
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		try {
			while(this.expr(econd) == true) try {
				this.expr(e);
			} catch( err ) {
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
					switch(err[1]) {
					case 0:
						throw "__break__";
						break;
					case 1:
						break;
					case 2:
						throw new js__$Boot_HaxeError(err);
						break;
					}
				} else throw(err);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $iterator(v)();
		} catch( e ) {
		}
		if(v.hasNext == null || v.next == null) {
			var e1 = hscript_Error.EInvalidIterator(v);
			throw new js__$Boot_HaxeError(e1);
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		var _this = this.locals;
		this.declared.push({ n : n, old : __map_reserved[n] != null ? _this.getReserved(n) : _this.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		try {
			while(it1.hasNext()) {
				var this1 = this.locals;
				var value = { r : it1.next()};
				var _this1 = this1;
				if(__map_reserved[n] != null) {
					_this1.setReserved(n,value);
				} else {
					_this1.h[n] = value;
				}
				try {
					this.expr(e);
				} catch( err ) {
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
						switch(err[1]) {
						case 0:
							throw "__break__";
							break;
						case 1:
							break;
						case 2:
							throw new js__$Boot_HaxeError(err);
							break;
						}
					} else throw(err);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__instanceof(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw new js__$Boot_HaxeError(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw new js__$Boot_HaxeError(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = Type.resolveClass(cl);
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var hscript_Token = { __ename__ : true, __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot","TMeta","TPrepro"] };
hscript_Token.TEof = ["TEof",0];
hscript_Token.TEof.toString = $estr;
hscript_Token.TEof.__enum__ = hscript_Token;
hscript_Token.TConst = function(c) { var $x = ["TConst",1,c]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TId = function(s) { var $x = ["TId",2,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TOp = function(s) { var $x = ["TOp",3,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TPOpen = ["TPOpen",4];
hscript_Token.TPOpen.toString = $estr;
hscript_Token.TPOpen.__enum__ = hscript_Token;
hscript_Token.TPClose = ["TPClose",5];
hscript_Token.TPClose.toString = $estr;
hscript_Token.TPClose.__enum__ = hscript_Token;
hscript_Token.TBrOpen = ["TBrOpen",6];
hscript_Token.TBrOpen.toString = $estr;
hscript_Token.TBrOpen.__enum__ = hscript_Token;
hscript_Token.TBrClose = ["TBrClose",7];
hscript_Token.TBrClose.toString = $estr;
hscript_Token.TBrClose.__enum__ = hscript_Token;
hscript_Token.TDot = ["TDot",8];
hscript_Token.TDot.toString = $estr;
hscript_Token.TDot.__enum__ = hscript_Token;
hscript_Token.TComma = ["TComma",9];
hscript_Token.TComma.toString = $estr;
hscript_Token.TComma.__enum__ = hscript_Token;
hscript_Token.TSemicolon = ["TSemicolon",10];
hscript_Token.TSemicolon.toString = $estr;
hscript_Token.TSemicolon.__enum__ = hscript_Token;
hscript_Token.TBkOpen = ["TBkOpen",11];
hscript_Token.TBkOpen.toString = $estr;
hscript_Token.TBkOpen.__enum__ = hscript_Token;
hscript_Token.TBkClose = ["TBkClose",12];
hscript_Token.TBkClose.toString = $estr;
hscript_Token.TBkClose.__enum__ = hscript_Token;
hscript_Token.TQuestion = ["TQuestion",13];
hscript_Token.TQuestion.toString = $estr;
hscript_Token.TQuestion.__enum__ = hscript_Token;
hscript_Token.TDoubleDot = ["TDoubleDot",14];
hscript_Token.TDoubleDot.toString = $estr;
hscript_Token.TDoubleDot.__enum__ = hscript_Token;
hscript_Token.TMeta = function(s) { var $x = ["TMeta",15,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TPrepro = function(s) { var $x = ["TPrepro",16,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
var hscript_Parser = function() {
	this.uid = 0;
	this.preprocesorValues = new haxe_ds_StringMap();
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = priorities.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			var _this = this.opPriority;
			if(__map_reserved[x] != null) {
				_this.setReserved(x,i);
			} else {
				_this.h[x] = i;
			}
			if(i == 9) {
				var _this1 = this.opRightAssoc;
				if(__map_reserved[x] != null) {
					_this1.setReserved(x,true);
				} else {
					_this1.h[x] = true;
				}
			}
		}
	}
	var _g4 = 0;
	var _g11 = ["!","++","--","-","~"];
	while(_g4 < _g11.length) {
		var x1 = _g11[_g4];
		++_g4;
		var _this2 = this.unops;
		var value = x1 == "++" || x1 == "--";
		if(__map_reserved[x1] != null) {
			_this2.setReserved(x1,value);
		} else {
			_this2.h[x1] = value;
		}
	}
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = ["hscript","Parser"];
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,preprocesorValues: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,input: null
	,'char': null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,error: function(err,pmin,pmax) {
		throw new js__$Boot_HaxeError(err);
	}
	,invalidChar: function(c) {
		throw new js__$Boot_HaxeError(hscript_Error.EInvalidChar(c));
	}
	,initParser: function(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this["char"] = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		var _g1 = 0;
		var _g = this.opChars.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g11 = 0;
		var _g2 = this.identChars.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.idents[HxOverrides.cca(this.identChars,i1)] = true;
		}
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		return this.parse(new haxe_io_StringInput(s),origin);
	}
	,parse: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		throw new js__$Boot_HaxeError(hscript_Error.EUnexpected(this.tokenString(tk)));
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,ensureToken: function(tk) {
		var t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	,maybe: function(tk) {
		var t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk[1] == 2) {
			var id = tk[2];
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		switch(e[1]) {
		case 2:
			var e1 = e[4];
			var t = e[3];
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t[1] == 2) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 6:
			var e2 = e[4];
			return this.isBlock(e2);
		case 7:
			var e3 = e[4];
			var prefix = e[3];
			if(!prefix) {
				return this.isBlock(e3);
			} else {
				return false;
			}
			break;
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			if(e21 != null) {
				return this.isBlock(e21);
			} else {
				return this.isBlock(e11);
			}
			break;
		case 10:
			var e4 = e[3];
			return this.isBlock(e4);
		case 11:
			var e5 = e[4];
			return this.isBlock(e5);
		case 14:
			var e6 = e[3];
			return this.isBlock(e6);
		case 15:
			var e7 = e[2];
			if(e7 != null) {
				return this.isBlock(e7);
			} else {
				return false;
			}
			break;
		case 20:
			var e8 = e[5];
			return this.isBlock(e8);
		case 4:case 21:case 23:
			return true;
		case 24:
			var e9 = e[3];
			return this.isBlock(e9);
		case 25:
			var e10 = e[4];
			return this.isBlock(e10);
		default:
			return false;
		}
	}
	,parseFullExpr: function(exprs) {
		var e = this.parseExpr();
		exprs.push(e);
		var tk = this.token();
		while(tk == hscript_Token.TComma && e[1] == 2) {
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	,parseObject: function(p1) {
		var fl = [];
		try {
			while(true) {
				var tk = this.token();
				var id = null;
				switch(tk[1]) {
				case 1:
					var c = tk[2];
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c[1] == 2) {
						var s = c[2];
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk[2];
					id = i;
					break;
				case 7:
					throw "__break__";
					break;
				default:
					this.unexpected(tk);
				}
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				fl.push({ name : id, e : this.parseExpr()});
				tk = this.token();
				switch(tk[1]) {
				case 7:
					throw "__break__";
					break;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		switch(tk[1]) {
		case 1:
			var c = tk[2];
			return this.parseExprNext(hscript_Expr.EConst(c));
		case 2:
			var id = tk[2];
			var e = this.parseStructure(id);
			if(e == null) {
				e = hscript_Expr.EIdent(id);
			}
			return this.parseExprNext(e);
		case 3:
			var op = tk[2];
			if(this.unops.exists(op)) {
				var start = 0;
				var e1 = this.parseExpr();
				if(op == "-") {
					if(e1[1] == 0) {
						switch(e1[2][1]) {
						case 0:
							var i = e1[2][2];
							return hscript_Expr.EConst(hscript_Const.CInt(-i));
						case 1:
							var f = e1[2][2];
							return hscript_Expr.EConst(hscript_Const.CFloat(-f));
						default:
						}
					}
				}
				return this.makeUnop(op,e1);
			}
			return this.unexpected(tk);
		case 4:
			var e2 = this.parseExpr();
			tk = this.token();
			switch(tk[1]) {
			case 5:
				return this.parseExprNext(hscript_Expr.EParent(e2));
			case 9:
				if(e2[1] == 1) {
					var v = e2[2];
					return this.parseLambda([{ name : v}],0);
				}
				break;
			case 14:
				var t = this.parseType();
				tk = this.token();
				switch(tk[1]) {
				case 5:
					return this.parseExprNext(hscript_Expr.ECheckType(e2,t));
				case 9:
					if(e2[1] == 1) {
						var v1 = e2[2];
						return this.parseLambda([{ name : v1, t : t}],0);
					}
					break;
				default:
				}
				break;
			default:
			}
			return this.unexpected(tk);
		case 6:
			tk = this.token();
			switch(tk[1]) {
			case 1:
				var c1 = tk[2];
				if(this.allowJSON) {
					if(c1[1] == 2) {
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						if(tk2[1] == 14) {
							return this.parseExprNext(this.parseObject(0));
						}
					} else {
						var _this2 = this.tokens;
						_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
					}
				} else {
					var _this3 = this.tokens;
					_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
				}
				break;
			case 2:
				var tk21 = this.token();
				var _this4 = this.tokens;
				_this4.head = new haxe_ds_GenericCell(tk21,_this4.head);
				var _this5 = this.tokens;
				_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
				if(tk21[1] == 14) {
					return this.parseExprNext(this.parseObject(0));
				}
				break;
			case 7:
				return this.parseExprNext(hscript_Expr.EObject([]));
			default:
				var _this6 = this.tokens;
				_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
			}
			var a = [];
			while(true) {
				this.parseFullExpr(a);
				tk = this.token();
				if(tk == hscript_Token.TBrClose) {
					break;
				}
				var _this7 = this.tokens;
				_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
			}
			return hscript_Expr.EBlock(a);
		case 11:
			var a1 = [];
			tk = this.token();
			while(tk != hscript_Token.TBkClose) {
				var _this8 = this.tokens;
				_this8.head = new haxe_ds_GenericCell(tk,_this8.head);
				a1.push(this.parseExpr());
				tk = this.token();
				if(tk == hscript_Token.TComma) {
					tk = this.token();
				}
			}
			if(a1.length == 1) {
				var _g = a1[0];
				switch(_g[1]) {
				case 10:case 11:case 24:
					var tmp = "__a_" + this.uid++;
					var e3 = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a1[0]),hscript_Expr.EIdent(tmp)]);
					return this.parseExprNext(e3);
				default:
				}
			}
			return this.parseExprNext(hscript_Expr.EArrayDecl(a1));
		case 15:
			var id1 = tk[2];
			if(this.allowMetadata) {
				var args = this.parseMetaArgs();
				return hscript_Expr.EMeta(id1,args,this.parseExpr());
			} else {
				return this.unexpected(tk);
			}
			break;
		default:
			return this.unexpected(tk);
		}
	}
	,parseLambda: function(args,pmin) {
		try {
			while(true) {
				var id = this.getIdent();
				var t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				args.push({ name : id, t : t});
				var tk = this.token();
				switch(tk[1]) {
				case 5:
					throw "__break__";
					break;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		var t1 = this.token();
		if(!Type.enumEq(t1,hscript_Token.TOp("->"))) {
			this.unexpected(t1);
		}
		var eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this1 = this.tokens;
			_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
			try {
				while(true) {
					args.push(this.parseExpr());
					var _g = this.token();
					switch(_g[1]) {
					case 5:
						throw "__break__";
						break;
					case 9:
						break;
					default:
						var tk1 = _g;
						this.unexpected(tk1);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		var edef;
		switch(e[1]) {
		case 3:
			var e2 = e[2];
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			if(e[2].length == 1) {
				var e1 = e[2][0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			var cond = e[2];
			if(e21 == null) {
				edef = hscript_Expr.EIf(cond,this.mapCompr(tmp,e11),null);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 10:
			var e22 = e[3];
			var cond1 = e[2];
			edef = hscript_Expr.EWhile(cond1,this.mapCompr(tmp,e22));
			break;
		case 11:
			var e23 = e[4];
			var it = e[3];
			var v = e[2];
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e23));
			break;
		case 24:
			var e24 = e[3];
			var cond2 = e[2];
			edef = hscript_Expr.EDoWhile(cond2,this.mapCompr(tmp,e24));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		switch(e[1]) {
		case 6:
			var e2 = e[4];
			var e1 = e[3];
			var bop = e[2];
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e3 = e[4];
			var e21 = e[3];
			var e11 = e[2];
			return hscript_Expr.ETernary(this.makeUnop(op,e11),e21,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		switch(e[1]) {
		case 6:
			var e3 = e[4];
			var e2 = e[3];
			var op2 = e[2];
			if(this.opPriority.get(op) <= this.opPriority.get(op2) && !this.opRightAssoc.exists(op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e4 = e[4];
			var e31 = e[3];
			var e21 = e[2];
			if(this.opRightAssoc.exists(op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk[1] == 2) {
				if(tk[2] != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t1 = this.token();
			if(!Type.enumEq(t1,hscript_Token.TId("in"))) {
				this.unexpected(t1);
			}
			var eiter = this.parseExpr();
			var t2 = this.token();
			if(t2 != hscript_Token.TPClose) {
				this.unexpected(t2);
			}
			var e1 = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e1);
		case "function":
			var tk1 = this.token();
			var name = null;
			if(tk1[1] == 2) {
				var id1 = tk1[2];
				name = id1;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk1,_this.head);
			}
			var inf = this.parseFunctionDecl();
			var e2 = inf.body;
			var pmax = 0;
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			var t3 = this.token();
			if(t3 != hscript_Token.TPOpen) {
				this.unexpected(t3);
			}
			var cond = this.parseExpr();
			var t4 = this.token();
			if(t4 != hscript_Token.TPClose) {
				this.unexpected(t4);
			}
			var e11 = this.parseExpr();
			var e21 = null;
			var semic = false;
			var tk2 = this.token();
			if(tk2 == hscript_Token.TSemicolon) {
				semic = true;
				tk2 = this.token();
			}
			if(Type.enumEq(tk2,hscript_Token.TId("else"))) {
				e21 = this.parseExpr();
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk2,_this1.head);
				if(semic) {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this2.head);
				}
			}
			return hscript_Expr.EIf(cond,e11,e21);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			var a = [];
			a.push(this.getIdent());
			var next = true;
			while(next) {
				var tk3 = this.token();
				switch(tk3[1]) {
				case 4:
					next = false;
					break;
				case 8:
					a.push(this.getIdent());
					break;
				default:
					this.unexpected(tk3);
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk4 = this.token();
			var _this3 = this.tokens;
			_this3.head = new haxe_ds_GenericCell(tk4,_this3.head);
			var e3 = tk4 == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e3);
		case "switch":
			var e4 = this.parseExpr();
			var def = null;
			var cases = [];
			var t5 = this.token();
			if(t5 != hscript_Token.TBrOpen) {
				this.unexpected(t5);
			}
			try {
				while(true) {
					var tk5 = this.token();
					switch(tk5[1]) {
					case 2:
						switch(tk5[2]) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							try {
								while(true) {
									var e5 = this.parseExpr();
									c.values.push(e5);
									tk5 = this.token();
									switch(tk5[1]) {
									case 9:
										break;
									case 14:
										throw "__break__";
										break;
									default:
										this.unexpected(tk5);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							var exprs = [];
							try {
								while(true) {
									tk5 = this.token();
									var _this4 = this.tokens;
									_this4.head = new haxe_ds_GenericCell(tk5,_this4.head);
									switch(tk5[1]) {
									case 2:
										switch(tk5[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										this.parseFullExpr(exprs);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							var tmp;
							if(exprs.length == 1) {
								tmp = exprs[0];
							} else if(exprs.length == 0) {
								tmp = hscript_Expr.EBlock([]);
							} else {
								var e6 = exprs[exprs.length - 1];
								var pmax1 = 0;
								tmp = hscript_Expr.EBlock(exprs);
							}
							c.expr = tmp;
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk5);
							}
							var t6 = this.token();
							if(t6 != hscript_Token.TDoubleDot) {
								this.unexpected(t6);
							}
							var exprs1 = [];
							try {
								while(true) {
									tk5 = this.token();
									var _this5 = this.tokens;
									_this5.head = new haxe_ds_GenericCell(tk5,_this5.head);
									switch(tk5[1]) {
									case 2:
										switch(tk5[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs1.length == 1) {
								def = exprs1[0];
							} else if(exprs1.length == 0) {
								def = hscript_Expr.EBlock([]);
							} else {
								var e7 = exprs1[exprs1.length - 1];
								var pmax2 = 0;
								def = hscript_Expr.EBlock(exprs1);
							}
							break;
						default:
							this.unexpected(tk5);
						}
						break;
					case 7:
						throw "__break__";
						break;
					default:
						this.unexpected(tk5);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return hscript_Expr.ESwitch(e4,cases,def);
		case "throw":
			var e8 = this.parseExpr();
			return hscript_Expr.EThrow(e8);
		case "try":
			var e9 = this.parseExpr();
			var t7 = this.token();
			if(!Type.enumEq(t7,hscript_Token.TId("catch"))) {
				this.unexpected(t7);
			}
			var t8 = this.token();
			if(t8 != hscript_Token.TPOpen) {
				this.unexpected(t8);
			}
			var vname1 = this.getIdent();
			var t9 = this.token();
			if(t9 != hscript_Token.TDoubleDot) {
				this.unexpected(t9);
			}
			var t10 = null;
			if(this.allowTypes) {
				t10 = this.parseType();
			} else {
				var t11 = this.token();
				if(!Type.enumEq(t11,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t11);
				}
			}
			var t12 = this.token();
			if(t12 != hscript_Token.TPClose) {
				this.unexpected(t12);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e9,vname1,t10,ec);
		case "var":
			var ident = this.getIdent();
			var tk6 = this.token();
			var t13 = null;
			if(tk6 == hscript_Token.TDoubleDot && this.allowTypes) {
				t13 = this.parseType();
				tk6 = this.token();
			}
			var e10 = null;
			if(Type.enumEq(tk6,hscript_Token.TOp("="))) {
				e10 = this.parseExpr();
			} else {
				var _this6 = this.tokens;
				_this6.head = new haxe_ds_GenericCell(tk6,_this6.head);
			}
			return hscript_Expr.EVar(ident,t13,e10);
		case "while":
			var econd1 = this.parseExpr();
			var e12 = this.parseExpr();
			return hscript_Expr.EWhile(econd1,e12);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(op == "->") {
				switch(e1[1]) {
				case 1:
					var i = e1[2];
					var eret = this.parseExpr();
					return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
				case 3:
					var _hx_tmp = e1[2];
					if(_hx_tmp[1] == 1) {
						var i1 = _hx_tmp[2];
						var eret1 = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i1}],hscript_Expr.EReturn(eret1));
					}
					break;
				case 26:
					var _hx_tmp1 = e1[2];
					if(_hx_tmp1[1] == 1) {
						var t = e1[3];
						var i2 = _hx_tmp1[2];
						var eret2 = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i2, t : t}],hscript_Expr.EReturn(eret2));
					}
					break;
				default:
				}
				this.unexpected(tk);
			}
			if(this.unops.get(op)) {
				if(this.isBlock(e1) || e1[1] == 3) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					return e1;
				}
				return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
			}
			return this.makeBinop(op,e1,this.parseExpr());
		case 4:
			return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
		case 8:
			var field = this.getIdent();
			return this.parseExprNext(hscript_Expr.EField(e1,field));
		case 11:
			var e2 = this.parseExpr();
			var t1 = this.token();
			if(t1 != hscript_Token.TBkClose) {
				this.unexpected(t1);
			}
			return this.parseExprNext(hscript_Expr.EArray(e1,e2));
		case 13:
			var e21 = this.parseExpr();
			var t2 = this.token();
			if(t2 != hscript_Token.TDoubleDot) {
				this.unexpected(t2);
			}
			var e3 = this.parseExpr();
			return hscript_Expr.ETernary(e1,e21,e3);
		default:
			var _this1 = this.tokens;
			_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
			return e1;
		}
	}
	,parseFunctionArgs: function() {
		var args = [];
		var tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var done = false;
			while(!done) {
				var name = null;
				var opt = false;
				if(tk[1] == 13) {
					opt = true;
					tk = this.token();
				}
				if(tk[1] == 2) {
					var id = tk[2];
					name = id;
				} else {
					this.unexpected(tk);
				}
				var arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				switch(tk[1]) {
				case 5:
					done = true;
					break;
				case 9:
					tk = this.token();
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return args;
	}
	,parseFunctionDecl: function() {
		var t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		var args = this.parseFunctionArgs();
		var ret = null;
		if(this.allowTypes) {
			var tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	,parsePath: function() {
		var path = [this.getIdent()];
		while(true) {
			var t = this.token();
			if(t != hscript_Token.TDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	,parseType: function() {
		var _gthis = this;
		var t = this.token();
		switch(t[1]) {
		case 2:
			var v = t[2];
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(t,_this.head);
			var path = this.parsePath();
			var params = null;
			t = this.token();
			if(t[1] == 3) {
				var op = t[2];
				if(op == "<") {
					params = [];
					try {
						while(true) {
							params.push(this.parseType());
							t = this.token();
							switch(t[1]) {
							case 3:
								var op1 = t[2];
								if(op1 == ">") {
									throw "__break__";
								}
								if(HxOverrides.cca(op1,0) == 62) {
									var _this1 = this.tokens;
									_this1.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op1,1,null)),_this1.head);
									throw "__break__";
								}
								break;
							case 9:
								continue;
								break;
							default:
							}
							this.unexpected(t);
						}
					} catch( e ) { if( e != "__break__" ) throw e; }
				} else {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t,_this2.head);
				}
			} else {
				var _this3 = this.tokens;
				_this3.head = new haxe_ds_GenericCell(t,_this3.head);
			}
			return this.parseTypeNext(hscript_CType.CTPath(path,params));
		case 4:
			var a = this.token();
			var b = this.token();
			var _this4 = this.tokens;
			_this4.head = new haxe_ds_GenericCell(b,_this4.head);
			var _this5 = this.tokens;
			_this5.head = new haxe_ds_GenericCell(a,_this5.head);
			var withReturn = function(args) {
				var _g = _gthis.token();
				if(_g[1] == 3) {
					if(_g[2] != "->") {
						var t1 = _g;
						_gthis.unexpected(t1);
					}
				} else {
					var t2 = _g;
					_gthis.unexpected(t2);
				}
				return hscript_CType.CTFun(args,_gthis.parseType());
			};
			switch(a[1]) {
			case 2:
				if(b[1] == 14) {
					var _g1 = [];
					var _g11 = 0;
					var _g2 = this.parseFunctionArgs();
					while(_g11 < _g2.length) {
						var arg = _g2[_g11];
						++_g11;
						var _g3 = arg.value;
						if(_g3 != null) {
							var v1 = _g3;
							throw new js__$Boot_HaxeError(hscript_Error.ECustom("Default values not allowed in function types"));
						}
						_g1.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
					}
					var args1 = _g1;
					return withReturn(args1);
				} else {
					var t3 = this.parseType();
					var _g4 = this.token();
					switch(_g4[1]) {
					case 5:
						return this.parseTypeNext(hscript_CType.CTParent(t3));
					case 9:
						var args2 = [t3];
						while(true) {
							args2.push(this.parseType());
							if(!this.maybe(hscript_Token.TComma)) {
								break;
							}
						}
						var t4 = this.token();
						if(t4 != hscript_Token.TPClose) {
							this.unexpected(t4);
						}
						return withReturn(args2);
					default:
						var t5 = _g4;
						return this.unexpected(t5);
					}
				}
				break;
			case 5:
				var _g5 = [];
				var _g12 = 0;
				var _g21 = this.parseFunctionArgs();
				while(_g12 < _g21.length) {
					var arg1 = _g21[_g12];
					++_g12;
					var _g31 = arg1.value;
					if(_g31 != null) {
						var v2 = _g31;
						throw new js__$Boot_HaxeError(hscript_Error.ECustom("Default values not allowed in function types"));
					}
					_g5.push(hscript_CType.CTNamed(arg1.name,arg1.opt ? hscript_CType.CTOpt(arg1.t) : arg1.t));
				}
				var args3 = _g5;
				return withReturn(args3);
			default:
				var t6 = this.parseType();
				var _g6 = this.token();
				switch(_g6[1]) {
				case 5:
					return this.parseTypeNext(hscript_CType.CTParent(t6));
				case 9:
					var args4 = [t6];
					while(true) {
						args4.push(this.parseType());
						if(!this.maybe(hscript_Token.TComma)) {
							break;
						}
					}
					var t7 = this.token();
					if(t7 != hscript_Token.TPClose) {
						this.unexpected(t7);
					}
					return withReturn(args4);
				default:
					var t8 = _g6;
					return this.unexpected(t8);
				}
			}
			break;
		case 6:
			var fields = [];
			var meta = null;
			try {
				while(true) {
					t = this.token();
					switch(t[1]) {
					case 2:
						if(t[2] == "var") {
							var name = this.getIdent();
							var t9 = this.token();
							if(t9 != hscript_Token.TDoubleDot) {
								this.unexpected(t9);
							}
							fields.push({ name : name, t : this.parseType(), meta : meta});
							meta = null;
							var t10 = this.token();
							if(t10 != hscript_Token.TSemicolon) {
								this.unexpected(t10);
							}
						} else {
							var name1 = t[2];
							var t11 = this.token();
							if(t11 != hscript_Token.TDoubleDot) {
								this.unexpected(t11);
							}
							fields.push({ name : name1, t : this.parseType(), meta : meta});
							t = this.token();
							switch(t[1]) {
							case 7:
								throw "__break__";
								break;
							case 9:
								break;
							default:
								this.unexpected(t);
							}
						}
						break;
					case 7:
						throw "__break__";
						break;
					case 15:
						var name2 = t[2];
						if(meta == null) {
							meta = [];
						}
						meta.push({ name : name2, params : this.parseMetaArgs()});
						break;
					default:
						this.unexpected(t);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.parseTypeNext(hscript_CType.CTAnon(fields));
		default:
			return this.unexpected(t);
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk[1] == 3) {
			var op = tk[2];
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this1 = this.tokens;
			_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2[1] == 1) {
			var args = t2[2];
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk[1] != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
			}
		}
		return args;
	}
	,parseModule: function(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = new haxe_io_StringInput(content);
		this.allowTypes = true;
		this.allowMetadata = true;
		var decls = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	,parseMetadata: function() {
		var meta = [];
		while(true) {
			var tk = this.token();
			if(tk[1] == 15) {
				var name = tk[2];
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
		return meta;
	}
	,parseParams: function() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp("Unsupported class type parameters"));
		}
		return { };
	}
	,parseModuleDecl: function() {
		var meta = this.parseMetadata();
		var ident = this.getIdent();
		var isPrivate = false;
		var isExtern = false;
		try {
			while(true) {
				switch(ident) {
				case "extern":
					isExtern = true;
					break;
				case "private":
					isPrivate = true;
					break;
				default:
					throw "__break__";
				}
				ident = this.getIdent();
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		switch(ident) {
		case "class":
			var name = this.getIdent();
			var params = this.parseParams();
			var extend = null;
			var implement = [];
			try {
				while(true) {
					var t = this.token();
					if(t[1] == 2) {
						switch(t[2]) {
						case "extends":
							extend = this.parseType();
							break;
						case "implements":
							implement.push(this.parseType());
							break;
						default:
							var _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(t,_this.head);
							throw "__break__";
						}
					} else {
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(t,_this1.head);
						throw "__break__";
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			var fields = [];
			var t1 = this.token();
			if(t1 != hscript_Token.TBrOpen) {
				this.unexpected(t1);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			var path = [this.getIdent()];
			var star = false;
			while(true) {
				var t2 = this.token();
				if(t2 != hscript_Token.TDot) {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t2,_this2.head);
					break;
				}
				t2 = this.token();
				switch(t2[1]) {
				case 2:
					var id = t2[2];
					path.push(id);
					break;
				case 3:
					if(t2[2] == "*") {
						star = true;
					} else {
						this.unexpected(t2);
					}
					break;
				default:
					this.unexpected(t2);
				}
			}
			var t3 = this.token();
			if(t3 != hscript_Token.TSemicolon) {
				this.unexpected(t3);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			var path1 = this.parsePath();
			var t4 = this.token();
			if(t4 != hscript_Token.TSemicolon) {
				this.unexpected(t4);
			}
			return hscript_ModuleDecl.DPackage(path1);
		case "typedef":
			var name1 = this.getIdent();
			var params1 = this.parseParams();
			var t5 = this.token();
			if(!Type.enumEq(t5,hscript_Token.TOp("="))) {
				this.unexpected(t5);
			}
			var t6 = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name1, meta : meta, params : params1, isPrivate : isPrivate, t : t6});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	,parseField: function() {
		var meta = this.parseMetadata();
		var access = [];
		while(true) {
			var id = this.getIdent();
			switch(id) {
			case "function":
				var name = this.getIdent();
				var inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				var name1 = this.getIdent();
				var get = null;
				var set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					var t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					var t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				var type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				var expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t2 = this.token();
						if(t2 != hscript_Token.TSemicolon) {
							this.unexpected(t2);
						}
					}
				} else if(type != null && type[1] == 2) {
					this.maybe(hscript_Token.TSemicolon);
				} else {
					var t3 = this.token();
					if(t3 != hscript_Token.TSemicolon) {
						this.unexpected(t3);
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
			}
		}
	}
	,incPos: function() {
	}
	,readChar: function() {
		try {
			return this.input.readByte();
		} catch( e ) {
			return 0;
		}
	}
	,readString: function(until) {
		var c = 0;
		var b = new haxe_io_BytesOutput();
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			try {
				c = s.readByte();
			} catch( e ) {
				this.line = old;
				throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b.writeByte(c);
					break;
				case 47:
					if(this.allowJSON) {
						b.writeByte(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b.writeByte(10);
					break;
				case 114:
					b.writeByte(13);
					break;
				case 116:
					b.writeByte(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var code = null;
					try {
						code = s.readString(4);
					} catch( e1 ) {
						this.line = old;
						throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var $char = HxOverrides.cca(code,i);
						if($char == null) {
							this.invalidChar($char);
						} else {
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								k += $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								k += $char - 55;
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								k += $char - 87;
								break;
							default:
								this.invalidChar($char);
							}
						}
					}
					if(k <= 127) {
						b.writeByte(k);
					} else if(k <= 2047) {
						b.writeByte(192 | k >> 6);
						b.writeByte(128 | k & 63);
					} else {
						b.writeByte(224 | k >> 12);
						b.writeByte(128 | k >> 6 & 63);
						b.writeByte(128 | k & 63);
					}
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b.writeByte(c);
			}
		}
		return b.getBytes().toString();
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var $char;
		if(this["char"] < 0) {
			$char = this.readChar();
		} else {
			$char = this["char"];
			this["char"] = -1;
		}
		while(true) {
			switch($char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				$char = this.readChar();
				if(this.idents[$char]) {
					var id = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return this.preprocess(id);
						}
						id += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString($char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				$char = this.readChar();
				switch($char) {
				case 46:
					$char = this.readChar();
					if($char != 46) {
						this.invalidChar($char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = $char - 48;
					var exp = 1;
					while(true) {
						$char = this.readChar();
						exp *= 10;
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + ($char - 48);
							break;
						default:
							this["char"] = $char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this["char"] = $char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = ($char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					$char = this.readChar();
					exp1 *= 10;
					switch($char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.readChar() == 46) {
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this1.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar($char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + ($char - 48);
						break;
					case 69:case 101:
						var tk = this.token();
						var pow = null;
						switch(tk[1]) {
						case 1:
							if(tk[2][1] == 0) {
								var e = tk[2][2];
								pow = e;
							} else {
								var _this2 = this.tokens;
								_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
							}
							break;
						case 3:
							if(tk[2] == "-") {
								tk = this.token();
								if(tk[1] == 1) {
									if(tk[2][1] == 0) {
										var e1 = tk[2][2];
										pow = -e1;
									} else {
										var _this3 = this.tokens;
										_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
									}
								} else {
									var _this4 = this.tokens;
									_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
								}
							} else {
								var _this5 = this.tokens;
								_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
							}
							break;
						default:
							var _this6 = this.tokens;
							_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
						}
						if(pow == null) {
							this.invalidChar($char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar($char);
						}
						var n2 = 0;
						while(true) {
							$char = this.readChar();
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + ($char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + ($char - 87);
								break;
							default:
								this["char"] = $char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this["char"] = $char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				$char = this.readChar();
				if($char == 61) {
					return hscript_Token.TOp("==");
				} else if($char == 62) {
					return hscript_Token.TOp("=>");
				}
				this["char"] = $char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				$char = this.readChar();
				if(this.idents[$char] || $char == 58) {
					var id1 = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return hscript_Token.TMeta(id1);
						}
						id1 += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[$char]) {
					var op = String.fromCharCode($char);
					var prev = -1;
					while(true) {
						$char = this.readChar();
						if(!this.ops[$char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,$char);
							}
							this["char"] = $char;
							return hscript_Token.TOp(op);
						}
						prev = $char;
						op += String.fromCharCode($char);
					}
				}
				if(this.idents[$char]) {
					var id2 = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return hscript_Token.TId(id2);
						}
						id2 += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
			}
			$char = this.readChar();
		}
	}
	,preprocValue: function(id) {
		var _this = this.preprocesorValues;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,preprocStack: null
	,parsePreproCond: function() {
		var tk = this.token();
		switch(tk[1]) {
		case 2:
			var id = tk[2];
			return hscript_Expr.EIdent(id);
		case 3:
			if(tk[2] == "!") {
				return hscript_Expr.EUnop("!",true,this.parsePreproCond());
			} else {
				return this.unexpected(tk);
			}
			break;
		case 4:
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
			return this.parseExpr();
		default:
			return this.unexpected(tk);
		}
	}
	,evalPreproCond: function(e) {
		switch(e[1]) {
		case 1:
			var id = e[2];
			return this.preprocValue(id) != null;
		case 3:
			var e1 = e[2];
			return this.evalPreproCond(e1);
		case 6:
			switch(e[2]) {
			case "&&":
				var e2 = e[4];
				var e11 = e[3];
				if(this.evalPreproCond(e11)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				var e21 = e[4];
				var e12 = e[3];
				if(!this.evalPreproCond(e12)) {
					return this.evalPreproCond(e21);
				} else {
					return true;
				}
				break;
			default:
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Can't eval " + e[0]));
			}
			break;
		case 7:
			if(e[2] == "!") {
				var e3 = e[4];
				return !this.evalPreproCond(e3);
			} else {
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Can't eval " + e[0]));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Can't eval " + e[0]));
		}
	}
	,preprocess: function(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			var e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	,skipTokens: function() {
		var spos = this.preprocStack.length - 1;
		var obj = this.preprocStack[spos];
		var pos = 0;
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Unclosed"));
			}
			if(this.preprocStack[spos] != obj) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	,tokenComment: function(op,$char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			try {
				while($char != 13 && $char != 10) $char = s.readByte();
				this["char"] = $char;
			} catch( e ) {
			}
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this["char"] = $char;
				return this.token();
			}
			try {
				while(true) {
					while($char != 42) {
						if($char == 10) {
							this.line++;
						}
						$char = s.readByte();
					}
					$char = s.readByte();
					if($char == 47) {
						break;
					}
				}
			} catch( e1 ) {
				this.line = old;
				throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedComment);
			}
			return this.token();
		}
		this["char"] = $char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c[1]) {
		case 0:
			var v = c[2];
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c[2];
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c[2];
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t[1]) {
		case 0:
			return "<eof>";
		case 1:
			var c = t[2];
			return this.constString(c);
		case 2:
			var s = t[2];
			return s;
		case 3:
			var s1 = t[2];
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t[2];
			return "@" + id;
		case 16:
			var id1 = t[2];
			return "#" + id1;
		}
	}
	,__class__: hscript_Parser
};
var hscript_Tools = function() { };
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = ["hscript","Tools"];
hscript_Tools.iter = function(e,f) {
	switch(e[1]) {
	case 0:case 1:
		break;
	case 2:
		var e1 = e[4];
		if(e1 != null) {
			f(e1);
		}
		break;
	case 3:
		var e2 = e[2];
		f(e2);
		break;
	case 4:
		var el = e[2];
		var _g = 0;
		while(_g < el.length) {
			var e3 = el[_g];
			++_g;
			f(e3);
		}
		break;
	case 5:
		var e4 = e[2];
		f(e4);
		break;
	case 6:
		var e21 = e[4];
		var e11 = e[3];
		f(e11);
		f(e21);
		break;
	case 7:
		var e5 = e[4];
		f(e5);
		break;
	case 8:
		var args = e[3];
		var e6 = e[2];
		f(e6);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var e22 = e[4];
		var e12 = e[3];
		var c = e[2];
		f(c);
		f(e12);
		if(e22 != null) {
			f(e22);
		}
		break;
	case 10:
		var e7 = e[3];
		var c1 = e[2];
		f(c1);
		f(e7);
		break;
	case 11:
		var e8 = e[4];
		var it = e[3];
		f(it);
		f(e8);
		break;
	case 12:case 13:
		break;
	case 14:
		var e9 = e[3];
		f(e9);
		break;
	case 15:
		var e10 = e[2];
		if(e10 != null) {
			f(e10);
		}
		break;
	case 16:
		var i = e[3];
		var e13 = e[2];
		f(e13);
		f(i);
		break;
	case 17:
		var el1 = e[2];
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e14 = el1[_g2];
			++_g2;
			f(e14);
		}
		break;
	case 18:
		var el2 = e[3];
		var _g3 = 0;
		while(_g3 < el2.length) {
			var e15 = el2[_g3];
			++_g3;
			f(e15);
		}
		break;
	case 19:
		var e16 = e[2];
		f(e16);
		break;
	case 20:
		var c2 = e[5];
		var e17 = e[2];
		f(e17);
		f(c2);
		break;
	case 21:
		var fl = e[2];
		var _g4 = 0;
		while(_g4 < fl.length) {
			var fi = fl[_g4];
			++_g4;
			f(fi.e);
		}
		break;
	case 22:
		var e23 = e[4];
		var e18 = e[3];
		var c3 = e[2];
		f(c3);
		f(e18);
		f(e23);
		break;
	case 23:
		var def = e[4];
		var cases = e[3];
		var e19 = e[2];
		f(e19);
		var _g5 = 0;
		while(_g5 < cases.length) {
			var c4 = cases[_g5];
			++_g5;
			var _g11 = 0;
			var _g21 = c4.values;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				f(v);
			}
			f(c4.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 24:
		var e20 = e[3];
		var c5 = e[2];
		f(c5);
		f(e20);
		break;
	case 25:
		var e24 = e[4];
		var args1 = e[3];
		var name = e[2];
		if(args1 != null) {
			var _g6 = 0;
			while(_g6 < args1.length) {
				var a1 = args1[_g6];
				++_g6;
				f(a1);
			}
		}
		f(e24);
		break;
	case 26:
		var e25 = e[2];
		f(e25);
		break;
	}
};
hscript_Tools.map = function(e,f) {
	var edef;
	switch(e[1]) {
	case 2:
		var e1 = e[4];
		var t = e[3];
		var n = e[2];
		edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
		break;
	case 3:
		var e2 = e[2];
		edef = hscript_Expr.EParent(f(e2));
		break;
	case 4:
		var el = e[2];
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e3 = el[_g1];
			++_g1;
			_g.push(f(e3));
		}
		edef = hscript_Expr.EBlock(_g);
		break;
	case 5:
		var fi = e[3];
		var e4 = e[2];
		edef = hscript_Expr.EField(f(e4),fi);
		break;
	case 6:
		var e21 = e[4];
		var e11 = e[3];
		var op = e[2];
		edef = hscript_Expr.EBinop(op,f(e11),f(e21));
		break;
	case 7:
		var e5 = e[4];
		var pre = e[3];
		var op1 = e[2];
		edef = hscript_Expr.EUnop(op1,pre,f(e5));
		break;
	case 8:
		var args = e[3];
		var e6 = e[2];
		var edef1 = f(e6);
		var _g2 = [];
		var _g11 = 0;
		while(_g11 < args.length) {
			var a = args[_g11];
			++_g11;
			_g2.push(f(a));
		}
		edef = hscript_Expr.ECall(edef1,_g2);
		break;
	case 9:
		var e22 = e[4];
		var e12 = e[3];
		var c = e[2];
		edef = hscript_Expr.EIf(f(c),f(e12),e22 != null ? f(e22) : null);
		break;
	case 10:
		var e7 = e[3];
		var c1 = e[2];
		edef = hscript_Expr.EWhile(f(c1),f(e7));
		break;
	case 11:
		var e8 = e[4];
		var it = e[3];
		var v = e[2];
		edef = hscript_Expr.EFor(v,f(it),f(e8));
		break;
	case 0:case 1:case 12:case 13:
		edef = e;
		break;
	case 14:
		var t1 = e[5];
		var name = e[4];
		var e9 = e[3];
		var args1 = e[2];
		edef = hscript_Expr.EFunction(args1,f(e9),name,t1);
		break;
	case 15:
		var e10 = e[2];
		edef = hscript_Expr.EReturn(e10 != null ? f(e10) : null);
		break;
	case 16:
		var i = e[3];
		var e13 = e[2];
		edef = hscript_Expr.EArray(f(e13),f(i));
		break;
	case 17:
		var el1 = e[2];
		var _g3 = [];
		var _g12 = 0;
		while(_g12 < el1.length) {
			var e14 = el1[_g12];
			++_g12;
			_g3.push(f(e14));
		}
		edef = hscript_Expr.EArrayDecl(_g3);
		break;
	case 18:
		var el2 = e[3];
		var cl = e[2];
		var _g4 = [];
		var _g13 = 0;
		while(_g13 < el2.length) {
			var e15 = el2[_g13];
			++_g13;
			_g4.push(f(e15));
		}
		edef = hscript_Expr.ENew(cl,_g4);
		break;
	case 19:
		var e16 = e[2];
		edef = hscript_Expr.EThrow(f(e16));
		break;
	case 20:
		var c2 = e[5];
		var t2 = e[4];
		var v1 = e[3];
		var e17 = e[2];
		edef = hscript_Expr.ETry(f(e17),v1,t2,f(c2));
		break;
	case 21:
		var fl = e[2];
		var _g5 = [];
		var _g14 = 0;
		while(_g14 < fl.length) {
			var fi1 = fl[_g14];
			++_g14;
			_g5.push({ name : fi1.name, e : f(fi1.e)});
		}
		edef = hscript_Expr.EObject(_g5);
		break;
	case 22:
		var e23 = e[4];
		var e18 = e[3];
		var c3 = e[2];
		edef = hscript_Expr.ETernary(f(c3),f(e18),f(e23));
		break;
	case 23:
		var def = e[4];
		var cases = e[3];
		var e19 = e[2];
		var edef2 = f(e19);
		var _g6 = [];
		var _g15 = 0;
		while(_g15 < cases.length) {
			var c4 = cases[_g15];
			++_g15;
			var _g21 = [];
			var _g31 = 0;
			var _g41 = c4.values;
			while(_g31 < _g41.length) {
				var v2 = _g41[_g31];
				++_g31;
				_g21.push(f(v2));
			}
			_g6.push({ values : _g21, expr : f(c4.expr)});
		}
		edef = hscript_Expr.ESwitch(edef2,_g6,def == null ? null : f(def));
		break;
	case 24:
		var e20 = e[3];
		var c5 = e[2];
		edef = hscript_Expr.EDoWhile(f(c5),f(e20));
		break;
	case 25:
		var e24 = e[4];
		var args2 = e[3];
		var name1 = e[2];
		var edef3;
		if(args2 == null) {
			edef3 = null;
		} else {
			var _g7 = [];
			var _g16 = 0;
			while(_g16 < args2.length) {
				var a1 = args2[_g16];
				++_g16;
				_g7.push(f(a1));
			}
			edef3 = _g7;
		}
		edef = hscript_Expr.EMeta(name1,edef3,f(e24));
		break;
	case 26:
		var t3 = e[3];
		var e25 = e[2];
		edef = hscript_Expr.ECheckType(f(e25),t3);
		break;
	}
	return edef;
};
hscript_Tools.expr = function(e) {
	return e;
};
hscript_Tools.mk = function(e,p) {
	return e;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var markdown_Node = function() { };
$hxClasses["markdown.Node"] = markdown_Node;
markdown_Node.__name__ = ["markdown","Node"];
markdown_Node.prototype = {
	accept: null
	,__class__: markdown_Node
};
var markdown_NodeVisitor = function() { };
$hxClasses["markdown.NodeVisitor"] = markdown_NodeVisitor;
markdown_NodeVisitor.__name__ = ["markdown","NodeVisitor"];
markdown_NodeVisitor.prototype = {
	visitText: null
	,visitElementBefore: null
	,visitElementAfter: null
	,__class__: markdown_NodeVisitor
};
var markdown_ElementNode = function(tag,children) {
	this.tag = tag;
	this.children = children;
	this.attributes = new haxe_ds_StringMap();
};
$hxClasses["markdown.ElementNode"] = markdown_ElementNode;
markdown_ElementNode.__name__ = ["markdown","ElementNode"];
markdown_ElementNode.__interfaces__ = [markdown_Node];
markdown_ElementNode.empty = function(tag) {
	return new markdown_ElementNode(tag,null);
};
markdown_ElementNode.withTag = function(tag) {
	return new markdown_ElementNode(tag,[]);
};
markdown_ElementNode.text = function(tag,text) {
	return new markdown_ElementNode(tag,[new markdown_TextNode(text)]);
};
markdown_ElementNode.prototype = {
	tag: null
	,children: null
	,attributes: null
	,isEmpty: function() {
		return this.children == null;
	}
	,accept: function(visitor) {
		if(visitor.visitElementBefore(this)) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.accept(visitor);
			}
			visitor.visitElementAfter(this);
		}
	}
	,__class__: markdown_ElementNode
};
var markdown_TextNode = function(text) {
	this.text = text;
};
$hxClasses["markdown.TextNode"] = markdown_TextNode;
markdown_TextNode.__name__ = ["markdown","TextNode"];
markdown_TextNode.__interfaces__ = [markdown_Node];
markdown_TextNode.prototype = {
	text: null
	,accept: function(visitor) {
		visitor.visitText(this);
	}
	,__class__: markdown_TextNode
};
var markdown_BlockParser = function(lines,document) {
	this.lines = lines;
	this.document = document;
	this.pos = 0;
};
$hxClasses["markdown.BlockParser"] = markdown_BlockParser;
markdown_BlockParser.__name__ = ["markdown","BlockParser"];
markdown_BlockParser.prototype = {
	lines: null
	,document: null
	,pos: null
	,get_current: function() {
		return this.lines[this.pos];
	}
	,get_next: function() {
		if(this.pos >= this.lines.length - 1) {
			return null;
		}
		return this.lines[this.pos + 1];
	}
	,advance: function() {
		this.pos++;
	}
	,get_isDone: function() {
		return this.pos >= this.lines.length;
	}
	,matches: function(ereg) {
		if(this.pos >= this.lines.length) {
			return false;
		}
		return ereg.match(this.lines[this.pos]);
	}
	,matchesNext: function(ereg) {
		if(this.get_next() == null) {
			return false;
		}
		return ereg.match(this.get_next());
	}
	,__class__: markdown_BlockParser
	,__properties__: {get_isDone:"get_isDone",get_next:"get_next",get_current:"get_current"}
};
var markdown_BlockSyntax = function() {
};
$hxClasses["markdown.BlockSyntax"] = markdown_BlockSyntax;
markdown_BlockSyntax.__name__ = ["markdown","BlockSyntax"];
markdown_BlockSyntax.__properties__ = {get_syntaxes:"get_syntaxes"};
markdown_BlockSyntax.get_syntaxes = function() {
	if(markdown_BlockSyntax.syntaxes == null) {
		markdown_BlockSyntax.syntaxes = [new markdown_EmptyBlockSyntax(),new markdown_BlockHtmlSyntax(),new markdown_SetextHeaderSyntax(),new markdown_HeaderSyntax(),new markdown_CodeBlockSyntax(),new markdown_GitHubCodeBlockSyntax(),new markdown_BlockquoteSyntax(),new markdown_HorizontalRuleSyntax(),new markdown_UnorderedListSyntax(),new markdown_OrderedListSyntax(),new markdown_TableSyntax(),new markdown_ParagraphSyntax()];
	}
	return markdown_BlockSyntax.syntaxes;
};
markdown_BlockSyntax.isAtBlockEnd = function(parser) {
	if(parser.pos >= parser.lines.length) {
		return true;
	}
	var _g = 0;
	var _g1 = markdown_BlockSyntax.get_syntaxes();
	while(_g < _g1.length) {
		var syntax = _g1[_g];
		++_g;
		if(syntax.canParse(parser) && syntax.get_canEndBlock()) {
			return true;
		}
	}
	return false;
};
markdown_BlockSyntax.prototype = {
	get_pattern: function() {
		return null;
	}
	,get_canEndBlock: function() {
		return true;
	}
	,canParse: function(parser) {
		return this.get_pattern().match(parser.lines[parser.pos]);
	}
	,parse: function(parser) {
		return null;
	}
	,parseChildLines: function(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) {
			if(!this.get_pattern().match(parser.lines[parser.pos])) {
				break;
			}
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		}
		return childLines;
	}
	,__class__: markdown_BlockSyntax
	,__properties__: {get_canEndBlock:"get_canEndBlock",get_pattern:"get_pattern"}
};
var markdown_EmptyBlockSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.EmptyBlockSyntax"] = markdown_EmptyBlockSyntax;
markdown_EmptyBlockSyntax.__name__ = ["markdown","EmptyBlockSyntax"];
markdown_EmptyBlockSyntax.__super__ = markdown_BlockSyntax;
markdown_EmptyBlockSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_EMPTY;
	}
	,parse: function(parser) {
		parser.advance();
		return null;
	}
	,__class__: markdown_EmptyBlockSyntax
});
var markdown_SetextHeaderSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.SetextHeaderSyntax"] = markdown_SetextHeaderSyntax;
markdown_SetextHeaderSyntax.__name__ = ["markdown","SetextHeaderSyntax"];
markdown_SetextHeaderSyntax.__super__ = markdown_BlockSyntax;
markdown_SetextHeaderSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	canParse: function(parser) {
		return parser.matchesNext(markdown_BlockSyntax.RE_SETEXT);
	}
	,parse: function(parser) {
		var re = markdown_BlockSyntax.RE_SETEXT;
		re.match(parser.get_next());
		var tag = re.matched(1).charAt(0) == "=" ? "h1" : "h2";
		var contents = parser.document.parseInline(parser.lines[parser.pos]);
		parser.advance();
		parser.advance();
		return new markdown_ElementNode(tag,contents);
	}
	,__class__: markdown_SetextHeaderSyntax
});
var markdown_HeaderSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.HeaderSyntax"] = markdown_HeaderSyntax;
markdown_HeaderSyntax.__name__ = ["markdown","HeaderSyntax"];
markdown_HeaderSyntax.__super__ = markdown_BlockSyntax;
markdown_HeaderSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_HEADER;
	}
	,parse: function(parser) {
		this.get_pattern().match(parser.lines[parser.pos]);
		parser.advance();
		var level = this.get_pattern().matched(1).length;
		var contents = parser.document.parseInline(StringTools.trim(this.get_pattern().matched(2)));
		return new markdown_ElementNode("h" + level,contents);
	}
	,__class__: markdown_HeaderSyntax
});
var markdown_BlockquoteSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.BlockquoteSyntax"] = markdown_BlockquoteSyntax;
markdown_BlockquoteSyntax.__name__ = ["markdown","BlockquoteSyntax"];
markdown_BlockquoteSyntax.__super__ = markdown_BlockSyntax;
markdown_BlockquoteSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_BLOCKQUOTE;
	}
	,parseChildLines: function(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) if(this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		} else {
			var nextMatch = parser.get_next() != null && this.get_pattern().match(parser.get_next());
			if(StringTools.trim(parser.lines[parser.pos]) == "" && nextMatch) {
				childLines.push("");
				childLines.push(this.get_pattern().matched(1));
				parser.advance();
				parser.advance();
			} else {
				break;
			}
		}
		return childLines;
	}
	,parse: function(parser) {
		var childLines = this.parseChildLines(parser);
		var children = parser.document.parseLines(childLines);
		return new markdown_ElementNode("blockquote",children);
	}
	,__class__: markdown_BlockquoteSyntax
});
var markdown_CodeBlockSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.CodeBlockSyntax"] = markdown_CodeBlockSyntax;
markdown_CodeBlockSyntax.__name__ = ["markdown","CodeBlockSyntax"];
markdown_CodeBlockSyntax.__super__ = markdown_BlockSyntax;
markdown_CodeBlockSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_INDENT;
	}
	,parseChildLines: function(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) if(this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		} else {
			var nextMatch = parser.get_next() != null && this.get_pattern().match(parser.get_next());
			if(StringTools.trim(parser.lines[parser.pos]) == "" && nextMatch) {
				childLines.push("");
				childLines.push(this.get_pattern().matched(1));
				parser.advance();
				parser.advance();
			} else {
				break;
			}
		}
		return childLines;
	}
	,parse: function(parser) {
		var childLines = this.parseChildLines(parser);
		childLines.push("");
		var escaped = StringTools.htmlEscape(childLines.join("\n"));
		return new markdown_ElementNode("pre",[markdown_ElementNode.text("code",escaped)]);
	}
	,__class__: markdown_CodeBlockSyntax
});
var markdown_GitHubCodeBlockSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.GitHubCodeBlockSyntax"] = markdown_GitHubCodeBlockSyntax;
markdown_GitHubCodeBlockSyntax.__name__ = ["markdown","GitHubCodeBlockSyntax"];
markdown_GitHubCodeBlockSyntax.__super__ = markdown_BlockSyntax;
markdown_GitHubCodeBlockSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_CODE;
	}
	,parseChildLines: function(parser) {
		var childLines = [];
		parser.advance();
		while(parser.pos < parser.lines.length) if(!this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(parser.lines[parser.pos]);
			parser.advance();
		} else {
			parser.advance();
			break;
		}
		return childLines;
	}
	,parse: function(parser) {
		var syntax = this.get_pattern().matched(1);
		var childLines = this.parseChildLines(parser);
		var code = markdown_ElementNode.text("code",StringTools.htmlEscape(childLines.join("\n")));
		if(syntax != null && syntax.length > 0) {
			var _this = code.attributes;
			var value = "prettyprint " + syntax;
			if(__map_reserved["class"] != null) {
				_this.setReserved("class",value);
			} else {
				_this.h["class"] = value;
			}
		}
		return new markdown_ElementNode("pre",[code]);
	}
	,__class__: markdown_GitHubCodeBlockSyntax
});
var markdown_HorizontalRuleSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.HorizontalRuleSyntax"] = markdown_HorizontalRuleSyntax;
markdown_HorizontalRuleSyntax.__name__ = ["markdown","HorizontalRuleSyntax"];
markdown_HorizontalRuleSyntax.__super__ = markdown_BlockSyntax;
markdown_HorizontalRuleSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_HR;
	}
	,parse: function(parser) {
		parser.advance();
		return markdown_ElementNode.empty("hr");
	}
	,__class__: markdown_HorizontalRuleSyntax
});
var markdown_BlockHtmlSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.BlockHtmlSyntax"] = markdown_BlockHtmlSyntax;
markdown_BlockHtmlSyntax.__name__ = ["markdown","BlockHtmlSyntax"];
markdown_BlockHtmlSyntax.__super__ = markdown_BlockSyntax;
markdown_BlockHtmlSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_HTML;
	}
	,get_canEndBlock: function() {
		return false;
	}
	,parse: function(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length && !parser.matches(markdown_BlockSyntax.RE_EMPTY)) {
			childLines.push(parser.lines[parser.pos]);
			parser.advance();
		}
		return new markdown_TextNode(childLines.join("\n"));
	}
	,__class__: markdown_BlockHtmlSyntax
});
var markdown_ListItem = function(lines) {
	this.forceBlock = false;
	this.lines = lines;
};
$hxClasses["markdown.ListItem"] = markdown_ListItem;
markdown_ListItem.__name__ = ["markdown","ListItem"];
markdown_ListItem.prototype = {
	forceBlock: null
	,lines: null
	,__class__: markdown_ListItem
};
var markdown_ParagraphSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.ParagraphSyntax"] = markdown_ParagraphSyntax;
markdown_ParagraphSyntax.__name__ = ["markdown","ParagraphSyntax"];
markdown_ParagraphSyntax.__super__ = markdown_BlockSyntax;
markdown_ParagraphSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_canEndBlock: function() {
		return false;
	}
	,canParse: function(parser) {
		return true;
	}
	,parse: function(parser) {
		var childLines = [];
		while(!markdown_BlockSyntax.isAtBlockEnd(parser)) {
			childLines.push(StringTools.ltrim(parser.lines[parser.pos]));
			parser.advance();
		}
		var contents = parser.document.parseInline(childLines.join("\n"));
		return new markdown_ElementNode("p",contents);
	}
	,__class__: markdown_ParagraphSyntax
});
var markdown_ListSyntax = function(listTag) {
	markdown_BlockSyntax.call(this);
	this.listTag = listTag;
};
$hxClasses["markdown.ListSyntax"] = markdown_ListSyntax;
markdown_ListSyntax.__name__ = ["markdown","ListSyntax"];
markdown_ListSyntax.__super__ = markdown_BlockSyntax;
markdown_ListSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_canEndBlock: function() {
		return false;
	}
	,listTag: null
	,parse: function(parser) {
		var items = [];
		var childLines = [];
		var endItem = function() {
			if(childLines.length > 0) {
				items.push(new markdown_ListItem(childLines));
				childLines = [];
			}
		};
		var match;
		var tryMatch = function(pattern) {
			match = pattern;
			return pattern.match(parser.lines[parser.pos]);
		};
		while(parser.pos < parser.lines.length) {
			if(tryMatch(markdown_BlockSyntax.RE_EMPTY)) {
				childLines.push("");
			} else if(tryMatch(markdown_BlockSyntax.RE_UL) || tryMatch(markdown_BlockSyntax.RE_OL)) {
				endItem();
				var tmp = match.matched(1);
				childLines.push(tmp);
			} else if(tryMatch(markdown_BlockSyntax.RE_INDENT)) {
				var tmp1 = match.matched(1);
				childLines.push(tmp1);
			} else if(markdown_BlockSyntax.isAtBlockEnd(parser)) {
				break;
			} else {
				if(childLines.length > 0 && childLines[childLines.length - 1] == "") {
					break;
				}
				childLines.push(parser.lines[parser.pos]);
			}
			parser.advance();
		}
		endItem();
		var _g1 = 0;
		var _g = items.length;
		while(_g1 < _g) {
			var i = _g1++;
			var len = items[i].lines.length;
			var _g3 = 1;
			var _g2 = len + 1;
			while(_g3 < _g2) {
				var jj = _g3++;
				var j = len - jj;
				if(markdown_BlockSyntax.RE_EMPTY.match(items[i].lines[j])) {
					if(i < items.length - 1) {
						items[i].forceBlock = true;
						items[i + 1].forceBlock = true;
					}
					items[i].lines.pop();
				} else {
					break;
				}
			}
		}
		var itemNodes = [];
		var _g4 = 0;
		while(_g4 < items.length) {
			var item = items[_g4];
			++_g4;
			var blockItem = item.forceBlock || item.lines.length > 1;
			var blocksInList = [markdown_BlockSyntax.RE_BLOCKQUOTE,markdown_BlockSyntax.RE_HEADER,markdown_BlockSyntax.RE_HR,markdown_BlockSyntax.RE_INDENT,markdown_BlockSyntax.RE_UL,markdown_BlockSyntax.RE_OL];
			if(!blockItem) {
				var _g11 = 0;
				while(_g11 < blocksInList.length) {
					var pattern1 = blocksInList[_g11];
					++_g11;
					if(pattern1.match(item.lines[0])) {
						blockItem = true;
						break;
					}
				}
			}
			if(blockItem) {
				var children = parser.document.parseLines(item.lines);
				if(!item.forceBlock && children.length == 1) {
					if(js_Boot.__instanceof(children[0],markdown_ElementNode)) {
						var node = children[0];
						if(node.tag == "p") {
							children = node.children;
						}
					}
				}
				itemNodes.push(new markdown_ElementNode("li",children));
			} else {
				var contents = parser.document.parseInline(item.lines[0]);
				itemNodes.push(new markdown_ElementNode("li",contents));
			}
		}
		return new markdown_ElementNode(this.listTag,itemNodes);
	}
	,__class__: markdown_ListSyntax
});
var markdown_UnorderedListSyntax = function() {
	markdown_ListSyntax.call(this,"ul");
};
$hxClasses["markdown.UnorderedListSyntax"] = markdown_UnorderedListSyntax;
markdown_UnorderedListSyntax.__name__ = ["markdown","UnorderedListSyntax"];
markdown_UnorderedListSyntax.__super__ = markdown_ListSyntax;
markdown_UnorderedListSyntax.prototype = $extend(markdown_ListSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_UL;
	}
	,__class__: markdown_UnorderedListSyntax
});
var markdown_OrderedListSyntax = function() {
	markdown_ListSyntax.call(this,"ol");
};
$hxClasses["markdown.OrderedListSyntax"] = markdown_OrderedListSyntax;
markdown_OrderedListSyntax.__name__ = ["markdown","OrderedListSyntax"];
markdown_OrderedListSyntax.__super__ = markdown_ListSyntax;
markdown_OrderedListSyntax.prototype = $extend(markdown_ListSyntax.prototype,{
	get_pattern: function() {
		return markdown_BlockSyntax.RE_OL;
	}
	,__class__: markdown_OrderedListSyntax
});
var markdown_TableSyntax = function() {
	markdown_BlockSyntax.call(this);
};
$hxClasses["markdown.TableSyntax"] = markdown_TableSyntax;
markdown_TableSyntax.__name__ = ["markdown","TableSyntax"];
markdown_TableSyntax.__super__ = markdown_BlockSyntax;
markdown_TableSyntax.prototype = $extend(markdown_BlockSyntax.prototype,{
	get_pattern: function() {
		return markdown_TableSyntax.TABLE_PATTERN;
	}
	,get_canEndBlock: function() {
		return false;
	}
	,parse: function(parser) {
		var lines = [];
		while(parser.pos < parser.lines.length && parser.matches(markdown_TableSyntax.TABLE_PATTERN)) {
			lines.push(parser.lines[parser.pos]);
			parser.advance();
		}
		var heads = [];
		var rows = [];
		var headLine = lines.shift();
		var alignLine = lines.shift();
		var aligns = [];
		if(alignLine != null) {
			markdown_TableSyntax.CELL_PATTERN.map(alignLine,function(e) {
				var text = e.matched(2);
				var align = text.charAt(0) == ":" ? text.charAt(text.length - 1) == ":" ? "center" : "left" : text.charAt(text.length - 1) == ":" ? "right" : "left";
				aligns.push(align);
				return "";
			});
		}
		var index = 0;
		markdown_TableSyntax.CELL_PATTERN.map(headLine,function(e1) {
			var text1 = StringTools.trim(e1.matched(2));
			var cell = new markdown_ElementNode("th",parser.document.parseInline(text1));
			if(aligns[index] != "left") {
				var _this = cell.attributes;
				var value = aligns[index];
				if(__map_reserved["align"] != null) {
					_this.setReserved("align",value);
				} else {
					_this.h["align"] = value;
				}
			}
			heads.push(cell);
			index += 1;
			return "";
		});
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var cols = [[]];
			rows.push(new markdown_ElementNode("tr",cols[0]));
			var index1 = [0];
			markdown_TableSyntax.CELL_PATTERN.map(line,(function(index2,cols1) {
				return function(e2) {
					var text2 = StringTools.trim(e2.matched(2));
					var cell1 = new markdown_ElementNode("td",parser.document.parseInline(text2));
					if(aligns[index2[0]] != "left") {
						var _this1 = cell1.attributes;
						var value1 = aligns[index2[0]];
						if(__map_reserved["align"] != null) {
							_this1.setReserved("align",value1);
						} else {
							_this1.h["align"] = value1;
						}
					}
					cols1[0].push(cell1);
					index2[0] += 1;
					return "";
				};
			})(index1,cols));
		}
		return new markdown_ElementNode("table",[new markdown_ElementNode("thead",heads),new markdown_ElementNode("tbody",rows)]);
	}
	,__class__: markdown_TableSyntax
});
var markdown_HtmlRenderer = function() {
};
$hxClasses["markdown.HtmlRenderer"] = markdown_HtmlRenderer;
markdown_HtmlRenderer.__name__ = ["markdown","HtmlRenderer"];
markdown_HtmlRenderer.__interfaces__ = [markdown_NodeVisitor];
markdown_HtmlRenderer.sortAttributes = function(a,b) {
	var ia = markdown_HtmlRenderer.attributeOrder.indexOf(a);
	var ib = markdown_HtmlRenderer.attributeOrder.indexOf(a);
	if(ia > -1 && ib > -1) {
		return ia - ib;
	}
	return Reflect.compare(a,b);
};
markdown_HtmlRenderer.prototype = {
	buffer: null
	,render: function(nodes) {
		this.buffer = new StringBuf();
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			node.accept(this);
		}
		return this.buffer.b;
	}
	,visitText: function(text) {
		this.buffer.b += Std.string(text.text);
	}
	,visitElementBefore: function(element) {
		if(this.buffer.b != "" && markdown_HtmlRenderer.BLOCK_TAGS.match(element.tag)) {
			this.buffer.b += "\n";
		}
		this.buffer.b += Std.string("<" + element.tag);
		var _g = [];
		var k = element.attributes.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var attributeNames = _g;
		attributeNames.sort(markdown_HtmlRenderer.sortAttributes);
		var _g1 = 0;
		while(_g1 < attributeNames.length) {
			var name = attributeNames[_g1];
			++_g1;
			var _this = this.buffer;
			var _this1 = element.attributes;
			var x = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			_this.b += Std.string(" " + name + "=\"" + x + "\"");
		}
		if(element.children == null) {
			this.buffer.b += " />";
			return false;
		} else {
			this.buffer.b += ">";
			return true;
		}
	}
	,visitElementAfter: function(element) {
		this.buffer.b += Std.string("</" + element.tag + ">");
	}
	,__class__: markdown_HtmlRenderer
};
var markdown_InlineSyntax = function(pattern) {
	this.pattern = new EReg(pattern,"m");
};
$hxClasses["markdown.InlineSyntax"] = markdown_InlineSyntax;
markdown_InlineSyntax.__name__ = ["markdown","InlineSyntax"];
markdown_InlineSyntax.prototype = {
	pattern: null
	,tryMatch: function(parser) {
		if(this.pattern.match(parser.get_currentSource()) && this.pattern.matchedPos().pos == 0) {
			parser.writeText();
			if(this.onMatch(parser)) {
				parser.consume(this.pattern.matched(0).length);
			}
			return true;
		}
		return false;
	}
	,onMatch: function(parser) {
		return false;
	}
	,__class__: markdown_InlineSyntax
};
var markdown_AutolinkSyntaxWithoutBrackets = function() {
	markdown_InlineSyntax.call(this,"\\b((http|https|ftp)://[^\\s]*)\\b");
};
$hxClasses["markdown.AutolinkSyntaxWithoutBrackets"] = markdown_AutolinkSyntaxWithoutBrackets;
markdown_AutolinkSyntaxWithoutBrackets.__name__ = ["markdown","AutolinkSyntaxWithoutBrackets"];
markdown_AutolinkSyntaxWithoutBrackets.__super__ = markdown_InlineSyntax;
markdown_AutolinkSyntaxWithoutBrackets.prototype = $extend(markdown_InlineSyntax.prototype,{
	tryMatch: function(parser) {
		return markdown_InlineSyntax.prototype.tryMatch.call(this,parser);
	}
	,onMatch: function(parser) {
		var url = this.pattern.matched(1);
		var anchor = markdown_ElementNode.text("a",StringTools.htmlEscape(url));
		var _this = anchor.attributes;
		if(__map_reserved["href"] != null) {
			_this.setReserved("href",url);
		} else {
			_this.h["href"] = url;
		}
		parser.addNode(anchor);
		return true;
	}
	,__class__: markdown_AutolinkSyntaxWithoutBrackets
});
var markdown_TextSyntax = function(pattern,substitute) {
	markdown_InlineSyntax.call(this,pattern);
	this.substitute = substitute;
};
$hxClasses["markdown.TextSyntax"] = markdown_TextSyntax;
markdown_TextSyntax.__name__ = ["markdown","TextSyntax"];
markdown_TextSyntax.__super__ = markdown_InlineSyntax;
markdown_TextSyntax.prototype = $extend(markdown_InlineSyntax.prototype,{
	substitute: null
	,onMatch: function(parser) {
		if(this.substitute == null) {
			parser.advanceBy(this.pattern.matched(0).length);
			return false;
		}
		parser.addNode(parser.createText(this.substitute));
		return true;
	}
	,__class__: markdown_TextSyntax
});
var markdown_AutolinkSyntax = function() {
	markdown_InlineSyntax.call(this,"<((http|https|ftp)://[^>]*)>");
};
$hxClasses["markdown.AutolinkSyntax"] = markdown_AutolinkSyntax;
markdown_AutolinkSyntax.__name__ = ["markdown","AutolinkSyntax"];
markdown_AutolinkSyntax.__super__ = markdown_InlineSyntax;
markdown_AutolinkSyntax.prototype = $extend(markdown_InlineSyntax.prototype,{
	onMatch: function(parser) {
		var url = this.pattern.matched(1);
		var anchor = markdown_ElementNode.text("a",StringTools.htmlEscape(url));
		var _this = anchor.attributes;
		if(__map_reserved["href"] != null) {
			_this.setReserved("href",url);
		} else {
			_this.h["href"] = url;
		}
		parser.addNode(anchor);
		return true;
	}
	,__class__: markdown_AutolinkSyntax
});
var markdown_TagSyntax = function(pattern,tag,end) {
	markdown_InlineSyntax.call(this,pattern);
	this.tag = tag;
	this.endPattern = new EReg(end == null ? pattern : end,"m");
};
$hxClasses["markdown.TagSyntax"] = markdown_TagSyntax;
markdown_TagSyntax.__name__ = ["markdown","TagSyntax"];
markdown_TagSyntax.__super__ = markdown_InlineSyntax;
markdown_TagSyntax.prototype = $extend(markdown_InlineSyntax.prototype,{
	endPattern: null
	,tag: null
	,onMatch: function(parser) {
		parser.stack.push(new markdown_TagState(parser.pos,parser.pos + this.pattern.matched(0).length,this));
		return true;
	}
	,onMatchEnd: function(parser,state) {
		parser.addNode(new markdown_ElementNode(this.tag,state.children));
		return true;
	}
	,__class__: markdown_TagSyntax
});
var markdown_LinkSyntax = function(linkResolver) {
	markdown_TagSyntax.call(this,"\\[",null,markdown_LinkSyntax.linkPattern);
	this.linkResolver = linkResolver;
};
$hxClasses["markdown.LinkSyntax"] = markdown_LinkSyntax;
markdown_LinkSyntax.__name__ = ["markdown","LinkSyntax"];
markdown_LinkSyntax.__super__ = markdown_TagSyntax;
markdown_LinkSyntax.prototype = $extend(markdown_TagSyntax.prototype,{
	linkResolver: null
	,onMatchEnd: function(parser,state) {
		var url;
		var title;
		if(this.endPattern.matched(1) == null || this.endPattern.matched(1) == "") {
			if(this.linkResolver == null) {
				return false;
			}
			if(state.children.length != 1) {
				return false;
			}
			if(!js_Boot.__instanceof(state.children[0],markdown_TextNode)) {
				return false;
			}
			var link = state.children[0];
			var node = this.linkResolver(link.text);
			if(node == null) {
				return false;
			}
			parser.addNode(node);
			return true;
		}
		if(this.endPattern.matched(3) != null && this.endPattern.matched(3) != "") {
			url = this.endPattern.matched(3);
			title = this.endPattern.matched(4);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = url.substring(1,url.length - 1);
			}
		} else {
			var id = this.endPattern.matched(2);
			if(id == "") {
				id = parser.source.substring(state.startPos + 1,parser.pos);
			}
			id = id.toLowerCase();
			var _this = parser.document.refLinks;
			var link1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(link1 == null) {
				return false;
			}
			url = link1.url;
			title = link1.title;
		}
		var anchor = new markdown_ElementNode("a",state.children);
		var this1 = anchor.attributes;
		var value = StringTools.htmlEscape(url);
		var _this1 = this1;
		if(__map_reserved["href"] != null) {
			_this1.setReserved("href",value);
		} else {
			_this1.h["href"] = value;
		}
		if(title != null && title != "") {
			var this2 = anchor.attributes;
			var value1 = StringTools.htmlEscape(title);
			var _this2 = this2;
			if(__map_reserved["title"] != null) {
				_this2.setReserved("title",value1);
			} else {
				_this2.h["title"] = value1;
			}
		}
		parser.addNode(anchor);
		return true;
	}
	,__class__: markdown_LinkSyntax
});
var markdown_ImgSyntax = function(linkResolver) {
	markdown_TagSyntax.call(this,"!\\[",null,markdown_ImgSyntax.linkPattern);
	this.linkResolver = linkResolver;
};
$hxClasses["markdown.ImgSyntax"] = markdown_ImgSyntax;
markdown_ImgSyntax.__name__ = ["markdown","ImgSyntax"];
markdown_ImgSyntax.__super__ = markdown_TagSyntax;
markdown_ImgSyntax.prototype = $extend(markdown_TagSyntax.prototype,{
	linkResolver: null
	,onMatchEnd: function(parser,state) {
		var url;
		var title;
		if(this.endPattern.matched(1) == null || this.endPattern.matched(1) == "") {
			if(this.linkResolver == null) {
				return false;
			}
			if(state.children.length != 1) {
				return false;
			}
			if(!js_Boot.__instanceof(state.children[0],markdown_TextNode)) {
				return false;
			}
			var link = state.children[0];
			var node = this.linkResolver(link.text);
			if(node == null) {
				return false;
			}
			parser.addNode(node);
			return true;
		}
		if(this.endPattern.matched(3) != null && this.endPattern.matched(3) != "") {
			url = this.endPattern.matched(3);
			title = this.endPattern.matched(4);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = url.substring(1,url.length - 1);
			}
		} else {
			var id = this.endPattern.matched(2);
			if(id == "") {
				id = parser.source.substring(state.startPos + 1,parser.pos);
			}
			id = id.toLowerCase();
			var _this = parser.document.refLinks;
			var link1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(link1 == null) {
				return false;
			}
			url = link1.url;
			title = link1.title;
		}
		var img = new markdown_ElementNode("img",null);
		var this1 = img.attributes;
		var value = StringTools.htmlEscape(url);
		var _this1 = this1;
		if(__map_reserved["src"] != null) {
			_this1.setReserved("src",value);
		} else {
			_this1.h["src"] = value;
		}
		if(state.children.length == 1 && js_Boot.__instanceof(state.children[0],markdown_TextNode)) {
			var alt = state.children[0];
			var value1 = alt.text;
			var _this2 = img.attributes;
			if(__map_reserved["alt"] != null) {
				_this2.setReserved("alt",value1);
			} else {
				_this2.h["alt"] = value1;
			}
		}
		if(title != null && title != "") {
			var this2 = img.attributes;
			var value2 = StringTools.htmlEscape(title);
			var _this3 = this2;
			if(__map_reserved["title"] != null) {
				_this3.setReserved("title",value2);
			} else {
				_this3.h["title"] = value2;
			}
		}
		parser.addNode(img);
		return true;
	}
	,__class__: markdown_ImgSyntax
});
var markdown_CodeSyntax = function(pattern) {
	markdown_InlineSyntax.call(this,pattern);
};
$hxClasses["markdown.CodeSyntax"] = markdown_CodeSyntax;
markdown_CodeSyntax.__name__ = ["markdown","CodeSyntax"];
markdown_CodeSyntax.__super__ = markdown_InlineSyntax;
markdown_CodeSyntax.prototype = $extend(markdown_InlineSyntax.prototype,{
	onMatch: function(parser) {
		parser.addNode(markdown_ElementNode.text("code",StringTools.htmlEscape(this.pattern.matched(1))));
		return true;
	}
	,__class__: markdown_CodeSyntax
});
var markdown_InlineParser = function(source,document) {
	this.start = 0;
	this.pos = 0;
	this.source = source;
	this.document = document;
	this.stack = [];
	if(document.inlineSyntaxes != null) {
		this.syntaxes = [];
		var _g = 0;
		var _g1 = document.inlineSyntaxes;
		while(_g < _g1.length) {
			var syntax = _g1[_g];
			++_g;
			this.syntaxes.push(syntax);
		}
		var _g2 = 0;
		var _g11 = markdown_InlineParser.defaultSyntaxes;
		while(_g2 < _g11.length) {
			var syntax1 = _g11[_g2];
			++_g2;
			this.syntaxes.push(syntax1);
		}
	} else {
		this.syntaxes = markdown_InlineParser.defaultSyntaxes;
	}
	var _this = this.syntaxes;
	var x = new markdown_LinkSyntax(document.linkResolver);
	_this.splice(1,0,x);
};
$hxClasses["markdown.InlineParser"] = markdown_InlineParser;
markdown_InlineParser.__name__ = ["markdown","InlineParser"];
markdown_InlineParser.prototype = {
	source: null
	,document: null
	,syntaxes: null
	,pos: null
	,start: null
	,stack: null
	,parse: function() {
		this.stack.push(new markdown_TagState(0,0,null));
		while(!this.get_isDone()) {
			var matched = false;
			var _g1 = 1;
			var _g = this.stack.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.stack[this.stack.length - i].tryMatch(this)) {
					matched = true;
					break;
				}
			}
			if(matched) {
				continue;
			}
			var _g2 = 0;
			var _g11 = this.syntaxes;
			while(_g2 < _g11.length) {
				var syntax = _g11[_g2];
				++_g2;
				if(syntax.tryMatch(this)) {
					matched = true;
					break;
				}
			}
			if(matched) {
				continue;
			}
			this.advanceBy(1);
		}
		return this.stack[0].close(this);
	}
	,writeText: function() {
		this.writeTextRange(this.start,this.pos);
		this.start = this.pos;
	}
	,writeTextRange: function(start,end) {
		if(end > start) {
			var text = this.source.substring(start,end);
			var nodes = this.stack[this.stack.length - 1].children;
			if(nodes.length > 0 && js_Boot.__instanceof(nodes[nodes.length - 1],markdown_TextNode)) {
				var lastNode = nodes[nodes.length - 1];
				var newNode = this.createText("" + lastNode.text + text);
				nodes[nodes.length - 1] = newNode;
			} else {
				nodes.push(this.createText(text));
			}
		}
	}
	,createText: function(text) {
		return new markdown_TextNode(this.unescape(text));
	}
	,addNode: function(node) {
		this.stack[this.stack.length - 1].children.push(node);
	}
	,get_currentSource: function() {
		return this.source.substring(this.pos,this.source.length);
	}
	,get_isDone: function() {
		return this.pos == this.source.length;
	}
	,advanceBy: function(length) {
		this.pos += length;
	}
	,consume: function(length) {
		this.pos += length;
		this.start = this.pos;
	}
	,unescape: function(text) {
		var _this_r = new RegExp("\\\\([\\\\`*_{}[\\]()#+-.!])","g".split("u").join(""));
		text = text.replace(_this_r,"$1");
		text = StringTools.replace(text,"\t","    ");
		return text;
	}
	,__class__: markdown_InlineParser
	,__properties__: {get_isDone:"get_isDone",get_currentSource:"get_currentSource"}
};
var markdown_TagState = function(startPos,endPos,syntax) {
	this.startPos = startPos;
	this.endPos = endPos;
	this.syntax = syntax;
	this.children = [];
};
$hxClasses["markdown.TagState"] = markdown_TagState;
markdown_TagState.__name__ = ["markdown","TagState"];
markdown_TagState.prototype = {
	startPos: null
	,endPos: null
	,syntax: null
	,children: null
	,tryMatch: function(parser) {
		if(this.syntax.endPattern.match(parser.get_currentSource()) && this.syntax.endPattern.matchedPos().pos == 0) {
			this.close(parser);
			return true;
		}
		return false;
	}
	,close: function(parser) {
		var index = parser.stack.indexOf(this);
		var unmatchedTags = parser.stack.splice(index + 1,parser.stack.length - index);
		var _g = 0;
		while(_g < unmatchedTags.length) {
			var unmatched = unmatchedTags[_g];
			++_g;
			parser.writeTextRange(unmatched.startPos,unmatched.endPos);
			var _g1 = 0;
			var _g2 = unmatched.children;
			while(_g1 < _g2.length) {
				var child = _g2[_g1];
				++_g1;
				this.children.push(child);
			}
		}
		parser.writeText();
		parser.stack.pop();
		if(parser.stack.length == 0) {
			return this.children;
		}
		if(this.syntax.onMatchEnd(parser,this)) {
			parser.consume(this.syntax.endPattern.matched(0).length);
		} else {
			parser.start = this.startPos;
			parser.advanceBy(this.syntax.endPattern.matched(0).length);
		}
		return null;
	}
	,__class__: markdown_TagState
};
var mustache__$Context_ContextImpl = function(view,parentContext,partialOverride) {
	this.view = view;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["."] != null) {
		_g.setReserved(".",view);
	} else {
		_g.h["."] = view;
	}
	this.cache = _g;
	this.parent = parentContext;
	this.partialOverride = partialOverride;
};
$hxClasses["mustache._Context.ContextImpl"] = mustache__$Context_ContextImpl;
mustache__$Context_ContextImpl.__name__ = ["mustache","_Context","ContextImpl"];
mustache__$Context_ContextImpl.getField = function(object,name) {
	var value = Reflect.field(object,name);
	if(Reflect.isFunction(value)) {
		return haxe_ds_Option.Some(function() {
			return value.apply(object,[]);
		});
	}
	if(value != null || Object.prototype.hasOwnProperty.call(object,name)) {
		return haxe_ds_Option.Some(value);
	}
	var o = object;
	var cl = o == null ? null : js_Boot.getClass(o);
	if(cl != null && Type.getInstanceFields(cl).indexOf(name) != -1) {
		return haxe_ds_Option.Some(value);
	}
	return haxe_ds_Option.None;
};
mustache__$Context_ContextImpl.prototype = {
	view: null
	,parent: null
	,cache: null
	,partialOverride: null
	,push: function(view,partialOverride) {
		var this1 = new mustache__$Context_ContextImpl(view,this,partialOverride);
		return this1;
	}
	,lookup: function(name) {
		var value = null;
		var _this = this.cache;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.cache;
			if(__map_reserved[name] != null) {
				value = _this1.getReserved(name);
			} else {
				value = _this1.h[name];
			}
		} else {
			var context = this;
			while(context != null) {
				var found = false;
				if(name.indexOf(".") == -1) {
					var _g = mustache__$Context_ContextImpl.getField(context.view,name);
					switch(_g[1]) {
					case 0:
						var v = _g[2];
						found = true;
						value = v;
						break;
					case 1:
						break;
					}
				} else {
					var names = name.split(".");
					var index = 0;
					value = context.view;
					while(value != null && index < names.length) {
						var _g1 = mustache__$Context_ContextImpl.getField(value,names[index++]);
						switch(_g1[1]) {
						case 0:
							var v1 = _g1[2];
							if(index == names.length - 1) {
								found = true;
							}
							value = v1;
							break;
						case 1:
							value = null;
							break;
						}
					}
				}
				if(found) {
					break;
				}
				context = context.parent;
			}
			var v2 = value;
			var _this2 = this.cache;
			var value1 = v2;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,value1);
			} else {
				_this2.h[name] = value1;
			}
		}
		if(Reflect.isFunction(value)) {
			value = value();
		}
		return value;
	}
	,__class__: mustache__$Context_ContextImpl
};
var mustache_Parser = function() { };
$hxClasses["mustache.Parser"] = mustache_Parser;
mustache_Parser.__name__ = ["mustache","Parser"];
mustache_Parser.parse = function(template,tags) {
	if(template.length == 0) {
		return [];
	}
	var openingTagRe;
	var closingTagRe;
	var closingCurlyRe;
	var compileTags = function(tags1) {
		if(tags1.length != 2) {
			throw new js__$Boot_HaxeError("Invalid tags: " + Std.string(tags1));
		}
		openingTagRe = new EReg(mustache_Parser.escapeRegExp(tags1[0]) + "\\s*","");
		closingTagRe = new EReg("\\s*" + mustache_Parser.escapeRegExp(tags1[1]),"");
		closingCurlyRe = new EReg("\\s*" + mustache_Parser.escapeRegExp("}" + tags1[1]),"");
	};
	compileTags(tags != null ? tags : Mustache.tags);
	var sections = [];
	var tokens = [];
	var spaces = [];
	var hasTag = false;
	var nonSpace = false;
	var scanner = new mustache_Scanner(template);
	while(scanner.tail != "") {
		var start = scanner.pos;
		var value = scanner.scanUntil(openingTagRe);
		if(value.length > 0) {
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				var chr = value.charAt(i);
				if(mustache_Parser.spaceRe.match(chr)) {
					spaces.push(tokens.length);
				} else {
					nonSpace = true;
				}
				tokens.push(new mustache_Token(mustache_TokenType.Text,chr,start,start + 1));
				++start;
				if(chr == "\n") {
					if(hasTag && !nonSpace) {
						var _g2 = 0;
						while(_g2 < spaces.length) {
							var idx = spaces[_g2];
							++_g2;
							tokens[idx] = null;
						}
					}
					spaces = [];
					hasTag = false;
					nonSpace = false;
				}
			}
		}
		if(scanner.scan(openingTagRe).length == 0) {
			break;
		}
		hasTag = true;
		var type = scanner.scan(mustache_Parser.tagRe);
		if(type.length > 0) {
			scanner.scan(mustache_Parser.whiteRe);
		}
		if(type == "=") {
			value = scanner.scanUntil(mustache_Parser.equalsRe);
			scanner.scan(mustache_Parser.equalsRe);
			scanner.scanUntil(closingTagRe);
		} else if(type == "{") {
			value = scanner.scanUntil(closingCurlyRe);
			scanner.scan(mustache_Parser.curlyRe);
			scanner.scanUntil(closingTagRe);
			type = "&";
		} else {
			value = scanner.scanUntil(closingTagRe);
		}
		if(scanner.scan(closingTagRe).length == 0) {
			throw new js__$Boot_HaxeError("Unclosed tag at " + scanner.pos);
		}
		var tokenType;
		switch(type) {
		case "":
			tokenType = mustache_TokenType.Value(true);
			break;
		case "!":
			tokenType = mustache_TokenType.Comment;
			break;
		case "#":
			tokenType = mustache_TokenType.Section(false);
			break;
		case "$":
			tokenType = mustache_TokenType.Block;
			break;
		case "&":
			tokenType = mustache_TokenType.Value(false);
			break;
		case "/":
			tokenType = mustache_TokenType.SectionClose;
			break;
		case "<":
			tokenType = mustache_TokenType.PartialOverride;
			break;
		case "=":
			tokenType = mustache_TokenType.SetDelimiters;
			break;
		case ">":
			tokenType = mustache_TokenType.Partial;
			break;
		case "^":
			tokenType = mustache_TokenType.Section(true);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown token type: " + type);
		}
		var token = new mustache_Token(tokenType,value,start,scanner.pos);
		tokens.push(token);
		switch(tokenType[1]) {
		case 1:
			nonSpace = true;
			break;
		case 2:case 7:case 8:
			sections.push(token);
			break;
		case 3:
			var openSection = sections.pop();
			if(openSection == null) {
				throw new js__$Boot_HaxeError("Unopened section \"" + value + "\" at " + start);
			}
			if(openSection.value != value) {
				throw new js__$Boot_HaxeError("Unclosed section \"" + openSection.value + "\" at " + start);
			}
			break;
		case 6:
			compileTags(mustache_Parser.spaceRe.split(value));
			break;
		default:
		}
	}
	var openSection1 = sections.pop();
	if(openSection1 != null) {
		throw new js__$Boot_HaxeError("Unclosed section \"" + openSection1.value + "\" at " + scanner.pos);
	}
	return mustache_Parser.nestTokens(mustache_Parser.squashTokens(tokens));
};
mustache_Parser.squashTokens = function(tokens) {
	var squashedTokens = [];
	var lastToken = null;
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		if(token != null) {
			if(token.type == mustache_TokenType.Text && lastToken != null && lastToken.type == mustache_TokenType.Text) {
				lastToken.value += token.value;
				lastToken.endIndex = token.endIndex;
			} else {
				squashedTokens.push(token);
				lastToken = token;
			}
		}
	}
	return squashedTokens;
};
mustache_Parser.nestTokens = function(tokens) {
	var nestedTokens = [];
	var collector = nestedTokens;
	var sections = [];
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		var _g1 = token.type;
		switch(_g1[1]) {
		case 2:case 7:case 8:
			collector.push(token);
			sections.push(token);
			collector = token.subTokens = [];
			break;
		case 3:
			var section = sections.pop();
			section.sectionEndIndex = token.startIndex;
			if(sections.length > 0) {
				collector = sections[sections.length - 1].subTokens;
			} else {
				collector = nestedTokens;
			}
			break;
		default:
			collector.push(token);
		}
	}
	return nestedTokens;
};
mustache_Parser.escapeRegExp = function(string) {
	return mustache_Parser.escapeRegExpRe.map(string,function(r) {
		return "\\" + r.matched(0);
	});
};
var mustache__$Partials_Partials_$Impl_$ = {};
$hxClasses["mustache._Partials.Partials_Impl_"] = mustache__$Partials_Partials_$Impl_$;
mustache__$Partials_Partials_$Impl_$.__name__ = ["mustache","_Partials","Partials_Impl_"];
mustache__$Partials_Partials_$Impl_$.fromDynamic = function(obj) {
	return function(name) {
		return Reflect.field(obj,name);
	};
};
var mustache_Scanner = function(string) {
	this.string = string;
	this.tail = string;
	this.pos = 0;
};
$hxClasses["mustache.Scanner"] = mustache_Scanner;
mustache_Scanner.__name__ = ["mustache","Scanner"];
mustache_Scanner.prototype = {
	string: null
	,tail: null
	,pos: null
	,eos: function() {
		return this.tail == "";
	}
	,scan: function(re) {
		if(!re.match(this.tail)) {
			return "";
		}
		var p = re.matchedPos();
		if(p.pos != 0) {
			return "";
		}
		this.tail = this.tail.substring(p.len);
		this.pos += p.len;
		return re.matched(0);
	}
	,scanUntil: function(re) {
		var match;
		if(re.match(this.tail)) {
			var p = re.matchedPos();
			if(p.pos == 0) {
				match = "";
			} else {
				match = this.tail.substring(0,p.pos);
				this.tail = this.tail.substring(p.pos);
			}
		} else {
			match = this.tail;
			this.tail = "";
		}
		this.pos += match.length;
		return match;
	}
	,__class__: mustache_Scanner
};
var mustache_TokenType = { __ename__ : true, __constructs__ : ["Text","Value","Section","SectionClose","Partial","Comment","SetDelimiters","PartialOverride","Block"] };
mustache_TokenType.Text = ["Text",0];
mustache_TokenType.Text.toString = $estr;
mustache_TokenType.Text.__enum__ = mustache_TokenType;
mustache_TokenType.Value = function(escaped) { var $x = ["Value",1,escaped]; $x.__enum__ = mustache_TokenType; $x.toString = $estr; return $x; };
mustache_TokenType.Section = function(inverted) { var $x = ["Section",2,inverted]; $x.__enum__ = mustache_TokenType; $x.toString = $estr; return $x; };
mustache_TokenType.SectionClose = ["SectionClose",3];
mustache_TokenType.SectionClose.toString = $estr;
mustache_TokenType.SectionClose.__enum__ = mustache_TokenType;
mustache_TokenType.Partial = ["Partial",4];
mustache_TokenType.Partial.toString = $estr;
mustache_TokenType.Partial.__enum__ = mustache_TokenType;
mustache_TokenType.Comment = ["Comment",5];
mustache_TokenType.Comment.toString = $estr;
mustache_TokenType.Comment.__enum__ = mustache_TokenType;
mustache_TokenType.SetDelimiters = ["SetDelimiters",6];
mustache_TokenType.SetDelimiters.toString = $estr;
mustache_TokenType.SetDelimiters.__enum__ = mustache_TokenType;
mustache_TokenType.PartialOverride = ["PartialOverride",7];
mustache_TokenType.PartialOverride.toString = $estr;
mustache_TokenType.PartialOverride.__enum__ = mustache_TokenType;
mustache_TokenType.Block = ["Block",8];
mustache_TokenType.Block.toString = $estr;
mustache_TokenType.Block.__enum__ = mustache_TokenType;
var mustache_Token = function(type,value,startIndex,endIndex,subTokens,sectionEndIndex) {
	this.type = type;
	this.value = value;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
	this.subTokens = subTokens;
	this.sectionEndIndex = sectionEndIndex;
};
$hxClasses["mustache.Token"] = mustache_Token;
mustache_Token.__name__ = ["mustache","Token"];
mustache_Token.prototype = {
	type: null
	,value: null
	,startIndex: null
	,endIndex: null
	,subTokens: null
	,sectionEndIndex: null
	,toString: function() {
		return "Token(" + Std.string(this.type) + ", " + JSON.stringify(this.value) + ", " + this.startIndex + ", " + this.endIndex + ", [" + (this.subTokens != null ? this.subTokens.join(", ") : "") + "], " + this.sectionEndIndex + ")";
	}
	,__class__: mustache_Token
};
var nice_Create = function() { };
$hxClasses["nice.Create"] = nice_Create;
nice_Create.__name__ = ["nice","Create"];
nice_Create.post = function(name) {
	js_node_Fs.writeFileSync("_posts/" + name + ".html",nice_Create.DEFAULT_POST_FRONTMATTER + nice_Create.DEFAULT_CONTENT);
};
nice_Create.page = function(name) {
	js_node_Fs.writeFileSync("_pages/" + name + ".html",nice_Create.DEFAULT_PAGE_FRONTMATTER + nice_Create.DEFAULT_CONTENT);
};
nice_Create.layout = function(name) {
	js_node_Fs.writeFileSync("_layouts/" + name + ".html",nice_Create.DEFAULT_LAYOUT);
};
nice_Create.project = function() {
	js_node_Fs.writeFileSync("config.yaml","");
	nice_fs_Directory.create("_assets");
	nice_fs_Directory.create("_pages");
	nice_fs_Directory.create("_posts");
	nice_fs_Directory.create("_layouts");
	nice_fs_Directory.create("_public");
	nice_Create.layout("index");
	nice_Create.page("index");
	nice_Create.post("MyFirstPost");
};
var nice_Main = function() { };
$hxClasses["nice.Main"] = nice_Main;
nice_Main.__name__ = ["nice","Main"];
nice_Main.main = function() {
	var controller = new nice_cli_Controller();
	controller.addDefault(new nice_cli_commands_DefaultCommand());
	controller.add(new nice_cli_commands_BuildCommand());
	controller.add(new nice_cli_commands_CreateCommand());
	controller.add(new nice_cli_commands_DeleteCommand());
	var currentDir = process.argv.slice(2).pop();
	process.chdir(currentDir);
	controller.run();
};
var nice_cli_Command = function(name,description) {
	if(description == null) {
		description = "";
	}
	this.name = name;
	this.description = description;
};
$hxClasses["nice.cli.Command"] = nice_cli_Command;
nice_cli_Command.__name__ = ["nice","cli","Command"];
nice_cli_Command.prototype = {
	name: null
	,description: null
	,onExecute: function(args) {
	}
	,__class__: nice_cli_Command
};
var nice_cli_Controller = function() {
	this.commands = new haxe_ds_StringMap();
	this.args = process.argv.slice(2);
};
$hxClasses["nice.cli.Controller"] = nice_cli_Controller;
nice_cli_Controller.__name__ = ["nice","cli","Controller"];
nice_cli_Controller.prototype = {
	defaultCommand: null
	,commands: null
	,args: null
	,run: function() {
		if(this.args.length > 0) {
			var command = this.args[0];
			var $arguments = this.args.slice(1,this.args.length);
			var _this = this.commands;
			if(__map_reserved[command] != null ? _this.existsReserved(command) : _this.h.hasOwnProperty(command)) {
				var _this1 = this.commands;
				var currentCommand = __map_reserved[command] != null ? _this1.getReserved(command) : _this1.h[command];
				currentCommand.onExecute($arguments);
			} else {
				nice_cli_Output.error("Unknown command");
			}
		} else if(this.defaultCommand != null) {
			this.defaultCommand.onExecute([]);
		} else {
			nice_cli_Output.error("Cannot find default command.");
		}
	}
	,help: function() {
		var output = "";
		var _this = this.commands;
		var command = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(command.hasNext()) {
			var command1 = command.next();
			output += command1.name + " -> " + command1.description + "\n";
		}
		return output;
	}
	,add: function(command) {
		var key = command.name;
		var _this = this.commands;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,command);
		} else {
			_this.h[key] = command;
		}
	}
	,addDefault: function(command) {
		this.defaultCommand = command;
	}
	,__class__: nice_cli_Controller
};
var nice_cli_Output = function() { };
$hxClasses["nice.cli.Output"] = nice_cli_Output;
nice_cli_Output.__name__ = ["nice","cli","Output"];
nice_cli_Output.text = function(msg) {
	Console.printFormatted(nice_cli_Output.prefix + msg + "\n",0);
};
nice_cli_Output.error = function(msg) {
	Console.printFormatted("<red>" + nice_cli_Output.prefix + nice_cli_Output.errorPrefix + " " + msg + " " + nice_cli_Output.errorPrefix + "</>" + "\n",0);
};
nice_cli_Output.warning = function(msg) {
	Console.printFormatted("<green>" + nice_cli_Output.prefix + nice_cli_Output.warningPrefix + " " + msg + " " + nice_cli_Output.warningPrefix + "</>" + "\n",0);
};
nice_cli_Output.plugin = function(msg) {
	Console.printFormatted("<blue>" + nice_cli_Output.prefix + "(Plugin) " + msg + " " + "</>" + "\n",0);
};
var nice_cli_commands_BuildCommand = function() {
	nice_cli_Command.call(this,"build","Builds the project.");
};
$hxClasses["nice.cli.commands.BuildCommand"] = nice_cli_commands_BuildCommand;
nice_cli_commands_BuildCommand.__name__ = ["nice","cli","commands","BuildCommand"];
nice_cli_commands_BuildCommand.__super__ = nice_cli_Command;
nice_cli_commands_BuildCommand.prototype = $extend(nice_cli_Command.prototype,{
	onExecute: function(args) {
		nice_lib_Build.process();
		nice_lib_Build.compile();
		nice_cli_Output.text("Done.");
	}
	,__class__: nice_cli_commands_BuildCommand
});
var nice_cli_commands_CreateCommand = function() {
	nice_cli_Command.call(this,"create","Creates a new project.");
};
$hxClasses["nice.cli.commands.CreateCommand"] = nice_cli_commands_CreateCommand;
nice_cli_commands_CreateCommand.__name__ = ["nice","cli","commands","CreateCommand"];
nice_cli_commands_CreateCommand.__super__ = nice_cli_Command;
nice_cli_commands_CreateCommand.prototype = $extend(nice_cli_Command.prototype,{
	onExecute: function(args) {
		var name = args[1];
		var type = args[0];
		if(type == null) {
			nice_cli_Output.error("Create command cannot be empty!");
			process.exit(1);
		}
		if(name == null) {
			nice_cli_Output.error("You must give your " + type + " a name!");
			process.exit(1);
		}
		if(type == "post") {
			nice_Create.post(name);
		} else if(type == "page") {
			nice_Create.page(name);
		} else if(type == "layout") {
			nice_Create.layout(name);
		} else if(type == "project") {
			nice_Create.project();
		} else {
			nice_cli_Output.error("Unrecognized type " + type);
		}
	}
	,__class__: nice_cli_commands_CreateCommand
});
var nice_cli_commands_DefaultCommand = function() {
	nice_cli_Command.call(this,"default","Default command");
};
$hxClasses["nice.cli.commands.DefaultCommand"] = nice_cli_commands_DefaultCommand;
nice_cli_commands_DefaultCommand.__name__ = ["nice","cli","commands","DefaultCommand"];
nice_cli_commands_DefaultCommand.__super__ = nice_cli_Command;
nice_cli_commands_DefaultCommand.prototype = $extend(nice_cli_Command.prototype,{
	onExecute: function(args) {
		process.stdout.write(Std.string(nice_cli_commands_DefaultCommand.logo + "\n"));
		process.stdout.write("\n");
		process.stdout.write(" ~ A static site generator that is not mean. ~\n");
		process.stdout.write("\n");
	}
	,__class__: nice_cli_commands_DefaultCommand
});
var nice_cli_commands_DeleteCommand = function() {
	nice_cli_Command.call(this,"delete","Deletes a file.");
};
$hxClasses["nice.cli.commands.DeleteCommand"] = nice_cli_commands_DeleteCommand;
nice_cli_commands_DeleteCommand.__name__ = ["nice","cli","commands","DeleteCommand"];
nice_cli_commands_DeleteCommand.__super__ = nice_cli_Command;
nice_cli_commands_DeleteCommand.prototype = $extend(nice_cli_Command.prototype,{
	onExecute: function(args) {
		if(args.length > 0) {
			var type = args[0];
			var name = args[1];
			var prefix = "";
			if(type == "post") {
				prefix = "_posts/";
			} else if(type == "page") {
				prefix = "bin._pages/";
			} else if(type == "layout") {
				prefix = "_layouts/";
			} else {
				nice_cli_Output.error("Cannot find " + type + " " + name);
				return;
			}
			if(name == null) {
				nice_cli_Output.error("You must include the name of the " + type + " to delete!");
				return;
			}
			var path = prefix + name + ".html";
			if(sys_FileSystem.exists(path)) {
				js_node_Fs.unlinkSync(path);
			} else {
				nice_cli_Output.error("Cannot find " + type + " with the name " + name);
				return;
			}
		}
	}
	,__class__: nice_cli_commands_DeleteCommand
});
var nice_fs_Directory = function(_local) {
	this._local = _local;
	if(!sys_FileSystem.exists(this._local)) {
		nice_cli_Output.error("Cannot find directory /" + this._local + ".");
		process.exit(1);
	}
	this._names = js_node_Fs.readdirSync(this._local);
	this._contents = this._loadFiles(this._names);
};
$hxClasses["nice.fs.Directory"] = nice_fs_Directory;
nice_fs_Directory.__name__ = ["nice","fs","Directory"];
nice_fs_Directory.create = function(name) {
	sys_FileSystem.createDirectory(name);
};
nice_fs_Directory.exists = function(name) {
	return sys_FileSystem.exists(name);
};
nice_fs_Directory.prototype = {
	_local: null
	,_names: null
	,_contents: null
	,getFile: function(name) {
		var _this = this._contents;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getLocalPath: function() {
		return this._local;
	}
	,files: function() {
		return this._contents.keys();
	}
	,_loadFiles: function(files) {
		var file_contents = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < files.length) {
			var file = files[_g];
			++_g;
			if(sys_FileSystem.isDirectory("" + this._local + "/" + file)) {
				if(__map_reserved[file] != null) {
					file_contents.setReserved(file,"directory");
				} else {
					file_contents.h[file] = "directory";
				}
			} else {
				var value = js_node_Fs.readFileSync("" + this._local + "/" + file,{ encoding : "utf8"});
				if(__map_reserved[file] != null) {
					file_contents.setReserved(file,value);
				} else {
					file_contents.h[file] = value;
				}
			}
		}
		return file_contents;
	}
	,__class__: nice_fs_Directory
};
var nice_lib_Assets = function(path) {
	nice_fs_Directory.call(this,path);
	this._subdirectories = [];
	var file = this.files();
	while(file.hasNext()) {
		var file1 = file.next();
		var subdirectoryPath = "" + this.getLocalPath() + "/" + file1;
		if(sys_FileSystem.isDirectory(subdirectoryPath)) {
			this._subdirectories.push(new nice_fs_Directory(subdirectoryPath));
		}
	}
};
$hxClasses["nice.lib.Assets"] = nice_lib_Assets;
nice_lib_Assets.__name__ = ["nice","lib","Assets"];
nice_lib_Assets.__super__ = nice_fs_Directory;
nice_lib_Assets.prototype = $extend(nice_fs_Directory.prototype,{
	_subdirectories: null
	,copy: function() {
		var file = this.files();
		while(file.hasNext()) {
			var file1 = file.next();
			if(!sys_FileSystem.isDirectory("" + this.getLocalPath() + "/" + file1)) {
				var from = "_assets/" + file1;
				var to = "_public/_assets/" + file1;
				sys_io_File.copy(from,to);
			}
		}
		var _g = 0;
		var _g1 = this._subdirectories;
		while(_g < _g1.length) {
			var subdirectory = _g1[_g];
			++_g;
			nice_fs_Directory.create("" + this.getLocalPath() + "/" + subdirectory.getLocalPath());
			var subfile = subdirectory.files();
			while(subfile.hasNext()) {
				var subfile1 = subfile.next();
				var from1 = "" + subdirectory.getLocalPath() + "/" + subfile1;
				var to1 = "" + this.getLocalPath() + "/" + subdirectory.getLocalPath() + "/" + subfile1;
				sys_io_File.copy(from1,to1);
			}
		}
	}
	,__class__: nice_lib_Assets
});
var nice_lib_Build = function() { };
$hxClasses["nice.lib.Build"] = nice_lib_Build;
nice_lib_Build.__name__ = ["nice","lib","Build"];
nice_lib_Build.process = function() {
	nice_lib_Build._config = new nice_lib_util_ConfigFile("config.yaml");
	nice_lib_Build._posts = new nice_lib_Collection(nice_lib_Build._config.getPostsPath(),nice_lib_Build._config.getSortPosts());
	nice_lib_Build._pages = new nice_lib_Collection(nice_lib_Build._config.getPagesPath(),nice_lib_Build._config.getSortPages());
	nice_lib_Build._layouts = new nice_lib_Layouts(nice_lib_Build._config.getLayoutsPath());
	nice_lib_Build._assets = new nice_lib_Assets(nice_lib_Build._config.getAssetsPath());
	if(sys_FileSystem.exists("_plugins")) {
		nice_lib_Build._plugin_manager = new nice_plugin_PluginManager("_plugins");
		nice_lib_Build._plugins = new nice_fs_Directory("_plugins");
		var name = nice_lib_Build._plugins.files();
		while(name.hasNext()) {
			var name1 = name.next();
			nice_lib_Build._plugin_manager.add(name1);
		}
		nice_lib_Build._plugin_manager.execute(nice_lib_Build._posts.getItems(),nice_lib_Build._pages.getItems());
	}
};
nice_lib_Build.compile = function() {
	nice_lib_Build.clean(nice_lib_Build._config.getOutputPath());
	nice_fs_Directory.create(nice_lib_Build._config.getOutputPath());
	nice_fs_Directory.create(nice_lib_Build._config.getOutputPath() + "/_posts");
	nice_fs_Directory.create(nice_lib_Build._config.getOutputPath() + "/_assets");
	if(nice_lib_Build._config.getPlatform() == nice_lib_util_Platform.GITHUB_PAGES) {
		js_node_Fs.writeFileSync(nice_lib_Build._config.getOutputPath() + "/.nojekyll","");
	}
	nice_lib_Build._assets.copy();
	nice_lib_Build._posts.render(nice_lib_Build._layouts,nice_lib_Build._posts,nice_lib_Build._pages,nice_lib_Build._config,nice_lib_Build._config.getOutputPath() + "/_posts",true);
	nice_lib_Build._pages.render(nice_lib_Build._layouts,nice_lib_Build._posts,nice_lib_Build._pages,nice_lib_Build._config,nice_lib_Build._config.getOutputPath(),false);
};
nice_lib_Build.clean = function(path) {
	if(sys_FileSystem.exists(path) && sys_FileSystem.isDirectory(path)) {
		var entries = js_node_Fs.readdirSync(path);
		var _g = 0;
		while(_g < entries.length) {
			var entry = entries[_g];
			++_g;
			if(sys_FileSystem.isDirectory(path + "/" + entry)) {
				nice_lib_Build.clean(path + "/" + entry);
				var path1 = path + "/" + entry;
				if(sys_FileSystem.exists(path1)) {
					var _g1 = 0;
					var _g11 = js_node_Fs.readdirSync(path1);
					while(_g1 < _g11.length) {
						var file = _g11[_g1];
						++_g1;
						var curPath = path1 + "/" + file;
						if(sys_FileSystem.isDirectory(curPath)) {
							sys_FileSystem.deleteDirectory(curPath);
						} else {
							js_node_Fs.unlinkSync(curPath);
						}
					}
					js_node_Fs.rmdirSync(path1);
				}
			} else {
				js_node_Fs.unlinkSync(path + "/" + entry);
			}
		}
	}
};
var nice_lib_Collection = function(dir,sort) {
	if(sort == null) {
		sort = "none";
	}
	this._directory = new nice_fs_Directory(dir);
	this._items = [];
	this._visible = [];
	this._sort = sort;
	this._tags = new haxe_ds_StringMap();
	var item = this._directory.files();
	while(item.hasNext()) {
		var item1 = item.next();
		if(item1 != ".DS_Store") {
			var post = new nice_lib_core_Post(item1,this._directory.getFile(item1));
			this._items.push(post);
			if(post.getState() != "hidden") {
				this._visible.push(post);
			}
		}
	}
};
$hxClasses["nice.lib.Collection"] = nice_lib_Collection;
nice_lib_Collection.__name__ = ["nice","lib","Collection"];
nice_lib_Collection.prototype = {
	_directory: null
	,_items: null
	,_visible: null
	,_sort: null
	,_tags: null
	,getItems: function() {
		var _g = this._sort;
		switch(_g) {
		case "newest-to-oldest":
			this._visible.sort(nice_lib_core_Post.compareReverse);
			break;
		case "oldest-to-newest":
			this._visible.sort(nice_lib_core_Post.compare);
			break;
		case "order":
			this._visible.sort(nice_lib_core_Post.compareOrder);
			break;
		default:
			this._sort = "none";
		}
		return this._visible;
	}
	,getAllItems: function() {
		return this._items;
	}
	,renderTags: function(tags) {
	}
	,render: function(layouts,posts,pages,config,path,isPost) {
		if(isPost == null) {
			isPost = false;
		}
		var _g = 0;
		var _g1 = this.getAllItems();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var tmp;
			if(item.getTag() != null) {
				var this1 = this._tags;
				var key = item.getTag();
				var _this = this1;
				if(__map_reserved[key] != null) {
					tmp = _this.existsReserved(key);
				} else {
					tmp = _this.h.hasOwnProperty(key);
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var this2 = this._tags;
				var key1 = item.getTag();
				var _this1 = this2;
				(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).push(item);
			} else if(item.getTag() != null) {
				var tagNames = [];
				tagNames.push(item);
				var this3 = this._tags;
				var key2 = item.getTag();
				var _this2 = this3;
				if(__map_reserved[key2] != null) {
					_this2.setReserved(key2,tagNames);
				} else {
					_this2.h[key2] = tagNames;
				}
			}
			var layout = layouts.getLayout(item.getTemplate());
			if(layout == null) {
				if(layouts.getLayout("index.html") == null) {
					nice_cli_Output.error("You must have a default layout (index.html) defined!");
					process.exit(1);
				}
				layout = layouts.getLayout("index.html");
			}
			nice_cli_Output.text("Compiling " + item.getName());
			var rendered = layout.compilePost(item,posts,pages,config.getVariables());
			item.save(path,rendered);
		}
	}
	,__class__: nice_lib_Collection
};
var nice_lib_Layouts = function(path) {
	this._directory = new nice_fs_Directory(path);
	this._layouts = new haxe_ds_StringMap();
	var layout = this._directory.files();
	while(layout.hasNext()) {
		var layout1 = layout.next();
		var this1 = this._layouts;
		var value = new nice_lib_core_Layout(layout1,this._directory.getFile(layout1));
		var _this = this1;
		if(__map_reserved[layout1] != null) {
			_this.setReserved(layout1,value);
		} else {
			_this.h[layout1] = value;
		}
	}
};
$hxClasses["nice.lib.Layouts"] = nice_lib_Layouts;
nice_lib_Layouts.__name__ = ["nice","lib","Layouts"];
nice_lib_Layouts.prototype = {
	_directory: null
	,_layouts: null
	,getLayout: function(name) {
		var _this = this._layouts;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,__class__: nice_lib_Layouts
};
var nice_lib_core_Layout = function(name,content) {
	this.name = name;
	this.content = content;
};
$hxClasses["nice.lib.core.Layout"] = nice_lib_core_Layout;
nice_lib_core_Layout.__name__ = ["nice","lib","core","Layout"];
nice_lib_core_Layout.prototype = {
	name: null
	,content: null
	,compilePost: function(post,posts,pages,variables) {
		var date = { day : post.getDate().getDate(), month : post.getDate().getMonth() + 1, year : post.getDate().getFullYear()};
		return this.compile({ title : post.getTitle(), body : post.compile(), date : date, posts : posts.getItems(), pages : pages.getItems(), variables : variables});
	}
	,compile: function(context) {
		var template = this.content;
		var this1 = new mustache__$Context_ContextImpl(context,null,null);
		var _this = Mustache.defaultWriter;
		return _this.renderTokens(_this.parse(template),this1,null,template);
	}
	,__class__: nice_lib_core_Layout
};
var nice_lib_core_Post = function(name,content) {
	this._name = name;
	this._content = content;
	var frontmatterContent = this._content.split("---");
	this._frontmatter = yaml_Yaml.parse(frontmatterContent[1]);
	this._createBody(frontmatterContent);
	this._title = this._frontmatter.get("title");
	this._tag = this._frontmatter.get("tag");
	this._date = this._frontmatter.get("date");
	this._template = this._frontmatter.get("template");
	this._state = this._frontmatter.get("state");
	this._language = this._frontmatter.get("language");
	this._order = this._frontmatter.get("order");
	this._tag = this._frontmatter.get("tag");
	if(this._template == null) {
		this._template = "index.html";
	}
	if(this._state == null) {
		this._state = "visible";
	}
	if(this._language == null) {
		this._language = "html";
	}
	if(this._date == null || !js_Boot.__instanceof(this._date,Date)) {
		this._date = new Date();
	} else if(this._date != null && !js_Boot.__instanceof(this._date,Date)) {
		nice_cli_Output.warning("Unknown 'Date' type. Output may be unexpected. (" + this._name + ")");
	}
	if(this._order == null) {
		this._order = -1;
	}
};
$hxClasses["nice.lib.core.Post"] = nice_lib_core_Post;
nice_lib_core_Post.__name__ = ["nice","lib","core","Post"];
nice_lib_core_Post.compare = function(a,b) {
	if(a.getDate().getFullYear() < b.getDate().getFullYear()) {
		return -1;
	} else if(a.getDate().getFullYear() == b.getDate().getFullYear() && a.getDate().getMonth() < b.getDate().getMonth()) {
		return -1;
	} else if(a.getDate().getFullYear() == b.getDate().getFullYear() && a.getDate().getMonth() == b.getDate().getMonth() && a.getDate().getDate() < b.getDate().getDate()) {
		return -1;
	} else if(a.getDate().getFullYear() == b.getDate().getFullYear() && a.getDate().getMonth() == b.getDate().getMonth() && a.getDate().getDate() == b.getDate().getDate()) {
		return 0;
	}
	return 1;
};
nice_lib_core_Post.compareReverse = function(a,b) {
	if(a.getDate().getFullYear() > b.getDate().getFullYear()) {
		return -1;
	} else if(a.getDate().getFullYear() == b.getDate().getFullYear() && a.getDate().getMonth() > b.getDate().getMonth()) {
		return -1;
	} else if(a.getDate().getFullYear() == b.getDate().getFullYear() && a.getDate().getMonth() == b.getDate().getMonth() && a.getDate().getDate() > b.getDate().getDate()) {
		return -1;
	} else if(a.getDate().getFullYear() == b.getDate().getFullYear() && a.getDate().getMonth() == b.getDate().getMonth() && a.getDate().getDate() == b.getDate().getDate()) {
		return 0;
	}
	return 1;
};
nice_lib_core_Post.compareOrder = function(a,b) {
	if(a.getOrder() < b.getOrder()) {
		return -1;
	} else if(a.getOrder() > b.getOrder()) {
		return 1;
	}
	return 0;
};
nice_lib_core_Post.prototype = {
	_name: null
	,_content: null
	,_body: null
	,_title: null
	,_date: null
	,_tag: null
	,_template: null
	,_state: null
	,_language: null
	,_order: null
	,_frontmatter: null
	,compile: function() {
		var _g = this._language;
		switch(_g) {
		case "html":
			return this._body;
		case "markdown":
			return Markdown.markdownToHtml(this._body);
		default:
			return this._body;
		}
	}
	,save: function(path,rendered) {
		var components = this._name.split(".");
		var extension = components[components.length - 1];
		var output = this._name;
		if(extension != "html") {
			output = "";
			var _g1 = 0;
			var _g = components.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i != components.length - 1) {
					output += components[i] + ".";
				}
			}
			output += "html";
		}
		if(sys_FileSystem.exists(output)) {
			js_node_Fs.writeFileSync(path + "/" + output,rendered);
		} else {
			sys_FileSystem.createDirectory(path + "/");
			js_node_Fs.writeFileSync(path + "/" + output,rendered);
		}
	}
	,getDate: function() {
		return this._date;
	}
	,getTitle: function() {
		return this._title;
	}
	,getState: function() {
		return this._state;
	}
	,getName: function() {
		return this._name;
	}
	,getOrder: function() {
		return this._order;
	}
	,getTemplate: function() {
		return this._template;
	}
	,getTag: function() {
		return this._tag;
	}
	,setTitle: function(title) {
		this._title = title;
	}
	,setBody: function(content) {
		this._body = content;
	}
	,_createBody: function(frontmatterContent) {
		if(frontmatterContent.length > 2) {
			var current = "";
			var _g1 = 2;
			var _g = frontmatterContent.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i != 2) {
					current += " --- ";
				}
				current += frontmatterContent[i];
			}
			this._body = current;
		} else {
			this._body = frontmatterContent[2];
		}
	}
	,__class__: nice_lib_core_Post
};
var nice_lib_util_ConfigFile = function(path) {
	this._path = path;
	if(sys_FileSystem.exists(path)) {
		this._content = js_node_Fs.readFileSync(path,{ encoding : "utf8"});
	} else {
		this._content = "";
		nice_cli_Output.error("Cannot find config.yaml!");
		process.exit(1);
	}
	if(this._content.length != 0) {
		var fileData = js_node_Fs.readFileSync(path,{ encoding : "utf8"});
		this._data = yaml_Yaml.parse(fileData);
	} else {
		this._data = null;
	}
};
$hxClasses["nice.lib.util.ConfigFile"] = nice_lib_util_ConfigFile;
nice_lib_util_ConfigFile.__name__ = ["nice","lib","util","ConfigFile"];
nice_lib_util_ConfigFile.prototype = {
	_path: null
	,_content: null
	,_data: null
	,getUrl: function() {
		if(this._data == null || this._data.url == null) {
			return "/";
		} else {
			return this._data.url;
		}
	}
	,getVariables: function() {
		if(this._data == null || this._data.variables == null) {
			return { };
		} else {
			return this._data.variables;
		}
	}
	,getOutputPath: function() {
		if(this._data == null || this._data.paths == null || this._data.paths.output == null) {
			return "_public";
		}
		return this._data.paths.output;
	}
	,getPostsPath: function() {
		if(this._data == null || this._data.paths == null || this._data.paths.posts == null) {
			return "_posts";
		}
		return this._data.paths.posts;
	}
	,getPagesPath: function() {
		if(this._data == null || this._data.paths == null || this._data.paths.pages == null) {
			return "_pages";
		}
		return this._data.paths.pages;
	}
	,getLayoutsPath: function() {
		if(this._data == null || this._data.paths == null || this._data.paths.layouts == null) {
			return "_layouts";
		}
		return this._data.paths.layouts;
	}
	,getAssetsPath: function() {
		if(this._data == null || this._data.paths == null || this._data.paths.assets == null) {
			return "_assets";
		}
		return this._data.paths.assets;
	}
	,getPlatform: function() {
		if(this._data == null || this._data.platform == null) {
			return nice_lib_util_Platform.DEFAULT;
		} else if(this._data.platform == "github pages") {
			return nice_lib_util_Platform.GITHUB_PAGES;
		} else {
			return nice_lib_util_Platform.DEFAULT;
		}
	}
	,getSortPages: function() {
		if(this._data == null || this._data.sortPages == null) {
			return "none";
		} else {
			return this._data.sortPages;
		}
	}
	,getSortPosts: function() {
		if(this._data == null || this._data.sortPosts == null) {
			return "none";
		} else {
			return this._data.sortPosts;
		}
	}
	,__class__: nice_lib_util_ConfigFile
};
var nice_lib_util_Platform = function() { };
$hxClasses["nice.lib.util.Platform"] = nice_lib_util_Platform;
nice_lib_util_Platform.__name__ = ["nice","lib","util","Platform"];
var nice_plugin_Plugin = function(path) {
	this._path = path;
	this._source = js_node_Fs.readFileSync(path,{ encoding : "utf8"});
};
$hxClasses["nice.plugin.Plugin"] = nice_plugin_Plugin;
nice_plugin_Plugin.__name__ = ["nice","plugin","Plugin"];
nice_plugin_Plugin.prototype = {
	_source: null
	,_path: null
	,getSource: function() {
		return this._source;
	}
	,getPath: function() {
		return this._path;
	}
	,__class__: nice_plugin_Plugin
};
var nice_plugin_PluginManager = function(path) {
	this._path = path;
	this._plugins = [];
};
$hxClasses["nice.plugin.PluginManager"] = nice_plugin_PluginManager;
nice_plugin_PluginManager.__name__ = ["nice","plugin","PluginManager"];
nice_plugin_PluginManager.prototype = {
	_path: null
	,_plugins: null
	,_interp: null
	,add: function(name) {
		this._plugins.push(new nice_plugin_Plugin(this._path + "/" + name));
	}
	,execute: function(posts,pages) {
		var parser = new hscript_Parser();
		this._interp = new hscript_Interp();
		var _this = this._interp.variables;
		if(__map_reserved["posts"] != null) {
			_this.setReserved("posts",posts);
		} else {
			_this.h["posts"] = posts;
		}
		var _this1 = this._interp.variables;
		if(__map_reserved["pages"] != null) {
			_this1.setReserved("pages",pages);
		} else {
			_this1.h["pages"] = pages;
		}
		var _this2 = this._interp.variables;
		var value = nice_cli_Output.plugin;
		if(__map_reserved["print"] != null) {
			_this2.setReserved("print",value);
		} else {
			_this2.h["print"] = value;
		}
		var _g = 0;
		var _g1 = this._plugins;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			nice_cli_Output.plugin("Executing Plugin: " + plugin.getPath());
			var output = this._interp.execute(parser.parseString(plugin.getSource()));
			if(output != null) {
				nice_cli_Output.plugin(output);
			}
		}
	}
	,__class__: nice_plugin_PluginManager
};
var nice_rss_RSS = function() {
	this._version = "2.0";
	this._document = Xml.createDocument();
	this._root = Xml.createElement("rss");
	this._root.set("version",this._version);
	this._document.addChild(this._root);
	this._channel = Xml.createElement("channel");
	this._root.addChild(this._channel);
};
$hxClasses["nice.rss.RSS"] = nice_rss_RSS;
nice_rss_RSS.__name__ = ["nice","rss","RSS"];
nice_rss_RSS.prototype = {
	_document: null
	,_root: null
	,_channel: null
	,_version: null
	,add: function(titleVal,linkVal,body) {
		if(body == null) {
			body = "";
		}
		var item = Xml.createElement("item");
		var title = Xml.createElement("title");
		title.addChild(Xml.createPCData(titleVal));
		var link = Xml.createElement("link");
		link.addChild(Xml.createPCData(linkVal));
		var desc = Xml.createElement("description");
		desc.addChild(Xml.createPCData(this._getDescription(body)));
		item.addChild(title);
		item.addChild(link);
		item.addChild(desc);
		this._channel.addChild(item);
	}
	,generate: function() {
		return haxe_xml_Printer.print(this._document,true);
	}
	,_getDescription: function(body,limit) {
		if(limit == null) {
			limit = 100;
		}
		if(body.length > limit) {
			var trimmedData = HxOverrides.substr(body,0,limit);
			trimmedData += "...";
			return trimmedData;
		}
		return body;
	}
	,__class__: nice_rss_RSS
};
var sys_FileSystem = function() { };
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = ["sys","FileSystem"];
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		return false;
	}
};
sys_FileSystem.isDirectory = function(path) {
	try {
		return js_node_Fs.statSync(path).isDirectory();
	} catch( e ) {
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if(e.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _ ) {
				throw e;
			}
			if(!stat.isDirectory()) {
				throw e;
			}
		}
	}
};
sys_FileSystem.deleteDirectory = function(path) {
	if(sys_FileSystem.exists(path)) {
		var _g = 0;
		var _g1 = js_node_Fs.readdirSync(path);
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var curPath = path + "/" + file;
			if(sys_FileSystem.isDirectory(curPath)) {
				sys_FileSystem.deleteDirectory(curPath);
			} else {
				js_node_Fs.unlinkSync(curPath);
			}
		}
		js_node_Fs.rmdirSync(path);
	}
};
var sys_io_File = function() { };
$hxClasses["sys.io.File"] = sys_io_File;
sys_io_File.__name__ = ["sys","io","File"];
sys_io_File.copy = function(srcPath,dstPath) {
	var src = js_node_Fs.openSync(srcPath,"r");
	var stat = js_node_Fs.fstatSync(src);
	var dst = js_node_Fs.openSync(dstPath,"w",stat.mode);
	var bytesRead;
	var pos = 0;
	while(true) {
		bytesRead = js_node_Fs.readSync(src,sys_io_File.copyBuf,0,65536,pos);
		if(!(bytesRead > 0)) {
			break;
		}
		js_node_Fs.writeSync(dst,sys_io_File.copyBuf,0,bytesRead);
		pos += bytesRead;
	}
	js_node_Fs.closeSync(src);
	js_node_Fs.closeSync(dst);
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
$hxClasses["sys.io.FileInput"] = sys_io_FileInput;
sys_io_FileInput.__name__ = ["sys","io","FileInput"];
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,pos: null
	,readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos[1]) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
$hxClasses["sys.io.FileOutput"] = sys_io_FileOutput;
sys_io_FileOutput.__name__ = ["sys","io","FileOutput"];
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,pos: null
	,writeByte: function(b) {
		var buf = new js_node_buffer_Buffer(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos[1]) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = { __ename__ : true, __constructs__ : ["SeekBegin","SeekCur","SeekEnd"] };
sys_io_FileSeek.SeekBegin = ["SeekBegin",0];
sys_io_FileSeek.SeekBegin.toString = $estr;
sys_io_FileSeek.SeekBegin.__enum__ = sys_io_FileSeek;
sys_io_FileSeek.SeekCur = ["SeekCur",1];
sys_io_FileSeek.SeekCur.toString = $estr;
sys_io_FileSeek.SeekCur.__enum__ = sys_io_FileSeek;
sys_io_FileSeek.SeekEnd = ["SeekEnd",2];
sys_io_FileSeek.SeekEnd.toString = $estr;
sys_io_FileSeek.SeekEnd.__enum__ = sys_io_FileSeek;
var yaml_ParserOptions = function(schema) {
	this.schema = schema == null ? new yaml_schema_DefaultSchema() : schema;
	this.strict = false;
	this.resolve = true;
	this.validation = true;
	this.maps = true;
};
$hxClasses["yaml.ParserOptions"] = yaml_ParserOptions;
yaml_ParserOptions.__name__ = ["yaml","ParserOptions"];
yaml_ParserOptions.prototype = {
	schema: null
	,resolve: null
	,validation: null
	,strict: null
	,maps: null
	,useMaps: function() {
		this.maps = true;
		return this;
	}
	,useObjects: function() {
		this.maps = false;
		return this;
	}
	,setSchema: function(schema) {
		this.schema = schema;
		return this;
	}
	,strictMode: function(value) {
		if(value == null) {
			value = true;
		}
		this.strict = value;
		return this;
	}
	,validate: function(value) {
		if(value == null) {
			value = true;
		}
		this.validation = value;
		return this;
	}
	,__class__: yaml_ParserOptions
};
var yaml_Parser = function() {
};
$hxClasses["yaml.Parser"] = yaml_Parser;
yaml_Parser.__name__ = ["yaml","Parser"];
yaml_Parser.options = function() {
	return new yaml_ParserOptions();
};
yaml_Parser.createUtf8Char = function(hex) {
	var utf8 = new haxe_Utf8(1);
	utf8.__b += String.fromCharCode(hex);
	return utf8.__b;
};
yaml_Parser.prototype = {
	schema: null
	,resolve: null
	,validate: null
	,strict: null
	,usingMaps: null
	,directiveHandlers: null
	,implicitTypes: null
	,typeMap: null
	,length: null
	,position: null
	,line: null
	,lineStart: null
	,lineIndent: null
	,character: null
	,version: null
	,checkLineBreaks: null
	,tagMap: null
	,anchorMap: null
	,tag: null
	,anchor: null
	,kind: null
	,result: null
	,input: null
	,output: null
	,safeParseAll: function(input,output,options) {
		options.schema = new yaml_schema_SafeSchema();
		this.parseAll(input,output,options);
	}
	,safeParse: function(input,options) {
		options.schema = new yaml_schema_SafeSchema();
		return this.parse(input,options);
	}
	,parse: function(input,options) {
		var result = null;
		var received = false;
		var responder = function(data) {
			if(!received) {
				result = data;
				received = true;
			} else {
				throw new js__$Boot_HaxeError(new yaml_YamlException("expected a single document in the stream, but found more",null,{ fileName : "Parser.hx", lineNumber : 155, className : "yaml.Parser", methodName : "parse"}));
			}
		};
		this.parseAll(input,responder,options);
		return result;
	}
	,parseAll: function(input,output,options) {
		var _gthis = this;
		this.input = input;
		this.output = output;
		this.schema = options.schema;
		this.resolve = options.resolve;
		this.validate = options.validation;
		this.strict = options.strict;
		this.usingMaps = options.maps;
		this.directiveHandlers = new haxe_ds_StringMap();
		this.implicitTypes = this.schema.compiledImplicit;
		this.typeMap = this.schema.compiledTypeMap;
		this.length = this.input.length;
		this.position = 0;
		this.line = 0;
		this.lineStart = 0;
		this.lineIndent = 0;
		this.character = HxOverrides.cca(this.input,this.position);
		var _this = this.directiveHandlers;
		if(__map_reserved["YAML"] != null) {
			_this.setReserved("YAML",function(name1,args1) {
				if(null != _gthis.version) {
					_gthis.throwError("duplication of %YAML directive",{ fileName : "Parser.hx", lineNumber : 199, className : "yaml.Parser", methodName : "parseAll"});
				}
				if(1 != args1.length) {
					_gthis.throwError("YAML directive accepts exactly one argument",{ fileName : "Parser.hx", lineNumber : 202, className : "yaml.Parser", methodName : "parseAll"});
				}
				var regex1 = new EReg("^([0-9]+)\\.([0-9]+)$","u");
				if(!regex1.match(args1[0])) {
					_gthis.throwError("ill-formed argument of the YAML directive",{ fileName : "Parser.hx", lineNumber : 207, className : "yaml.Parser", methodName : "parseAll"});
				}
				var major1 = yaml_util_Ints.parseInt(regex1.matched(1),10);
				var minor1 = yaml_util_Ints.parseInt(regex1.matched(2),10);
				if(1 != major1) {
					_gthis.throwError("unacceptable YAML version of the document",{ fileName : "Parser.hx", lineNumber : 213, className : "yaml.Parser", methodName : "parseAll"});
				}
				_gthis.version = args1[0];
				_gthis.checkLineBreaks = minor1 < 2;
				if(1 != minor1 && 2 != minor1) {
					_gthis.throwWarning("unsupported YAML version of the document",{ fileName : "Parser.hx", lineNumber : 219, className : "yaml.Parser", methodName : "parseAll"});
				}
			});
		} else {
			_this.h["YAML"] = function(name1,args1) {
				if(null != _gthis.version) {
					_gthis.throwError("duplication of %YAML directive",{ fileName : "Parser.hx", lineNumber : 199, className : "yaml.Parser", methodName : "parseAll"});
				}
				if(1 != args1.length) {
					_gthis.throwError("YAML directive accepts exactly one argument",{ fileName : "Parser.hx", lineNumber : 202, className : "yaml.Parser", methodName : "parseAll"});
				}
				var regex1 = new EReg("^([0-9]+)\\.([0-9]+)$","u");
				if(!regex1.match(args1[0])) {
					_gthis.throwError("ill-formed argument of the YAML directive",{ fileName : "Parser.hx", lineNumber : 207, className : "yaml.Parser", methodName : "parseAll"});
				}
				var major1 = yaml_util_Ints.parseInt(regex1.matched(1),10);
				var minor1 = yaml_util_Ints.parseInt(regex1.matched(2),10);
				if(1 != major1) {
					_gthis.throwError("unacceptable YAML version of the document",{ fileName : "Parser.hx", lineNumber : 213, className : "yaml.Parser", methodName : "parseAll"});
				}
				_gthis.version = args1[0];
				_gthis.checkLineBreaks = minor1 < 2;
				if(1 != minor1 && 2 != minor1) {
					_gthis.throwWarning("unsupported YAML version of the document",{ fileName : "Parser.hx", lineNumber : 219, className : "yaml.Parser", methodName : "parseAll"});
				}
			};
		}
		var _this1 = this.directiveHandlers;
		if(__map_reserved["TAG"] != null) {
			_this1.setReserved("TAG",function(name21,args21) {
				var handle1;
				var prefix1;
				if(2 != args21.length) {
					_gthis.throwError("TAG directive accepts exactly two arguments",{ fileName : "Parser.hx", lineNumber : 233, className : "yaml.Parser", methodName : "parseAll"});
				}
				handle1 = args21[0];
				prefix1 = args21[1];
				if(!yaml_Parser.PATTERN_TAG_HANDLE.match(handle1)) {
					_gthis.throwError("ill-formed tag handle (first argument) of the TAG directive",{ fileName : "Parser.hx", lineNumber : 239, className : "yaml.Parser", methodName : "parseAll"});
				}
				var _this21 = _gthis.tagMap;
				if(__map_reserved[handle1] != null ? _this21.existsReserved(handle1) : _this21.h.hasOwnProperty(handle1)) {
					_gthis.throwError("there is a previously declared suffix for \"" + handle1 + "\" tag handle",{ fileName : "Parser.hx", lineNumber : 242, className : "yaml.Parser", methodName : "parseAll"});
				}
				if(!yaml_Parser.PATTERN_TAG_URI.match(prefix1)) {
					_gthis.throwError("ill-formed tag prefix (second argument) of the TAG directive",{ fileName : "Parser.hx", lineNumber : 245, className : "yaml.Parser", methodName : "parseAll"});
				}
				var _this31 = _gthis.tagMap;
				if(__map_reserved[handle1] != null) {
					_this31.setReserved(handle1,prefix1);
				} else {
					_this31.h[handle1] = prefix1;
				}
			});
		} else {
			_this1.h["TAG"] = function(name21,args21) {
				var handle1;
				var prefix1;
				if(2 != args21.length) {
					_gthis.throwError("TAG directive accepts exactly two arguments",{ fileName : "Parser.hx", lineNumber : 233, className : "yaml.Parser", methodName : "parseAll"});
				}
				handle1 = args21[0];
				prefix1 = args21[1];
				if(!yaml_Parser.PATTERN_TAG_HANDLE.match(handle1)) {
					_gthis.throwError("ill-formed tag handle (first argument) of the TAG directive",{ fileName : "Parser.hx", lineNumber : 239, className : "yaml.Parser", methodName : "parseAll"});
				}
				var _this21 = _gthis.tagMap;
				if(__map_reserved[handle1] != null ? _this21.existsReserved(handle1) : _this21.h.hasOwnProperty(handle1)) {
					_gthis.throwError("there is a previously declared suffix for \"" + handle1 + "\" tag handle",{ fileName : "Parser.hx", lineNumber : 242, className : "yaml.Parser", methodName : "parseAll"});
				}
				if(!yaml_Parser.PATTERN_TAG_URI.match(prefix1)) {
					_gthis.throwError("ill-formed tag prefix (second argument) of the TAG directive",{ fileName : "Parser.hx", lineNumber : 245, className : "yaml.Parser", methodName : "parseAll"});
				}
				var _this31 = _gthis.tagMap;
				if(__map_reserved[handle1] != null) {
					_this31.setReserved(handle1,prefix1);
				} else {
					_this31.h[handle1] = prefix1;
				}
			};
		}
		if(this.validate && yaml_Parser.PATTERN_NON_PRINTABLE.match(this.input)) {
			this.throwError("the stream contains non-printable characters",{ fileName : "Parser.hx", lineNumber : 252, className : "yaml.Parser", methodName : "parseAll"});
		}
		while(32 == this.character) {
			this.lineIndent += 1;
			this.character = HxOverrides.cca(input,++this.position);
		}
		while(this.position < this.length) this.readDocument();
	}
	,generateError: function(message,info) {
		return new yaml_YamlException(message,info,{ fileName : "Parser.hx", lineNumber : 269, className : "yaml.Parser", methodName : "generateError"});
	}
	,throwError: function(message,info) {
		throw new js__$Boot_HaxeError(this.generateError(message,info));
	}
	,throwWarning: function(message,info) {
		var error = this.generateError(message,info);
		if(this.strict) {
			throw new js__$Boot_HaxeError(error);
		}
	}
	,captureSegment: function(start,end,checkJson) {
		var _result;
		if(start < end) {
			_result = yaml_util_Utf8.substring(this.input,start,end);
			if(checkJson && this.validate) {
				var _g1 = 0;
				var _g = _result.length;
				while(_g1 < _g) {
					var pos = _g1++;
					var $char = HxOverrides.cca(_result,pos);
					if(!(9 == $char || 32 <= $char && $char <= 1114111)) {
						this.throwError("expected valid JSON character",{ fileName : "Parser.hx", lineNumber : 302, className : "yaml.Parser", methodName : "captureSegment"});
					}
				}
			}
			this.result += _result;
		}
	}
	,mergeObjectMappings: function(destination,source) {
		if(Type["typeof"](source) != ValueType.TObject) {
			this.throwError("cannot merge mappings; the provided source object is unacceptable",{ fileName : "Parser.hx", lineNumber : 314, className : "yaml.Parser", methodName : "mergeObjectMappings"});
		}
		var _g = 0;
		var _g1 = Reflect.fields(source);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(destination,key)) {
				destination[key] = Reflect.field(source,key);
			}
		}
	}
	,mergeMappings: function(destination,source) {
		if(!js_Boot.__instanceof(source,yaml_util_TObjectMap)) {
			this.throwError("cannot merge mappings; the provided source object is unacceptable",{ fileName : "Parser.hx", lineNumber : 326, className : "yaml.Parser", methodName : "mergeMappings"});
		}
		var key = source.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(!destination.exists(key1)) {
				destination.set(key1,source.get(key1));
			}
		}
	}
	,storeObjectMappingPair: function(_result,keyTag,keyNode,valueNode) {
		if(null == _result) {
			_result = { };
		}
		if("tag:yaml.org,2002:merge" == keyTag) {
			if((valueNode instanceof Array) && valueNode.__enum__ == null) {
				var list = valueNode;
				var _g = 0;
				while(_g < list.length) {
					var member = list[_g];
					++_g;
					this.mergeObjectMappings(_result,member);
				}
			} else {
				this.mergeObjectMappings(_result,valueNode);
			}
		} else {
			_result[Std.string(keyNode)] = valueNode;
		}
		return _result;
	}
	,storeMappingPair: function(_result,keyTag,keyNode,valueNode) {
		if(null == _result) {
			_result = new yaml_util_TObjectMap();
		}
		if("tag:yaml.org,2002:merge" == keyTag) {
			if((valueNode instanceof Array) && valueNode.__enum__ == null) {
				var list = valueNode;
				var _g = 0;
				while(_g < list.length) {
					var member = list[_g];
					++_g;
					this.mergeMappings(_result,member);
				}
			} else {
				this.mergeMappings(_result,valueNode);
			}
		} else {
			_result.set(keyNode,valueNode);
		}
		return _result;
	}
	,readLineBreak: function() {
		if(10 == this.character) {
			this.position += 1;
		} else if(13 == this.character) {
			if(10 == HxOverrides.cca(this.input,this.position + 1)) {
				this.position += 2;
			} else {
				this.position += 1;
			}
		} else {
			this.throwError("a line break is expected",{ fileName : "Parser.hx", lineNumber : 406, className : "yaml.Parser", methodName : "readLineBreak"});
		}
		this.line += 1;
		this.lineStart = this.position;
		if(this.position < this.length) {
			this.character = HxOverrides.cca(this.input,this.position);
		} else {
			this.character = null;
		}
	}
	,skipSeparationSpace: function(allowComments,checkIndent) {
		var lineBreaks = 0;
		while(this.position < this.length) {
			while(32 == this.character || 9 == this.character) this.character = HxOverrides.cca(this.input,++this.position);
			if(allowComments && 35 == this.character) {
				while(true) {
					this.character = HxOverrides.cca(this.input,++this.position);
					if(!(this.position < this.length && 10 != this.character && 13 != this.character)) {
						break;
					}
				}
			}
			if(10 == this.character || 13 == this.character) {
				this.readLineBreak();
				++lineBreaks;
				this.lineIndent = 0;
				while(32 == this.character) {
					this.lineIndent += 1;
					this.character = HxOverrides.cca(this.input,++this.position);
				}
				if(this.lineIndent < checkIndent) {
					this.throwWarning("deficient indentation",{ fileName : "Parser.hx", lineNumber : 449, className : "yaml.Parser", methodName : "skipSeparationSpace"});
				}
			} else {
				break;
			}
		}
		return lineBreaks;
	}
	,testDocumentSeparator: function() {
		if(this.position == this.lineStart && (45 == this.character || 46 == this.character) && HxOverrides.cca(this.input,this.position + 1) == this.character && HxOverrides.cca(this.input,this.position + 2) == this.character) {
			var pos = this.position + 3;
			var $char = HxOverrides.cca(this.input,pos);
			if(pos >= this.length || 32 == $char || 9 == $char || 10 == $char || 13 == $char) {
				return true;
			}
		}
		return false;
	}
	,writeFoldedLines: function(count) {
		if(1 == count) {
			this.result += " ";
		} else if(count > 1) {
			this.result += yaml_util_Strings.repeat("\n",count - 1);
		}
	}
	,readPlainScalar: function(nodeIndent,withinFlowCollection) {
		var preceding;
		var following;
		var captureStart;
		var captureEnd;
		var hasPendingContent;
		var _line = 0;
		var _kind = this.kind;
		var _result = this.result;
		if(32 == this.character || 9 == this.character || 10 == this.character || 13 == this.character || 44 == this.character || 91 == this.character || 93 == this.character || 123 == this.character || 125 == this.character || 35 == this.character || 38 == this.character || 42 == this.character || 33 == this.character || 124 == this.character || 62 == this.character || 39 == this.character || 34 == this.character || 37 == this.character || 64 == this.character || 96 == this.character) {
			return false;
		}
		if(63 == this.character || 45 == this.character) {
			following = HxOverrides.cca(this.input,this.position + 1);
			if(32 == following || 9 == following || 10 == following || 13 == following || withinFlowCollection && (44 == following || 91 == following || 93 == following || 123 == following || 125 == following)) {
				return false;
			}
		}
		this.kind = "string";
		this.result = "";
		captureEnd = this.position;
		captureStart = captureEnd;
		hasPendingContent = false;
		while(this.position < this.length) {
			if(58 == this.character) {
				following = HxOverrides.cca(this.input,this.position + 1);
				if(32 == following || 9 == following || 10 == following || 13 == following || withinFlowCollection && (44 == following || 91 == following || 93 == following || 123 == following || 125 == following)) {
					break;
				}
			} else if(35 == this.character) {
				preceding = HxOverrides.cca(this.input,this.position - 1);
				if(32 == preceding || 9 == preceding || 10 == preceding || 13 == preceding) {
					break;
				}
			} else if(this.position == this.lineStart && this.testDocumentSeparator() || withinFlowCollection && (44 == this.character || 91 == this.character || 93 == this.character || 123 == this.character || 125 == this.character)) {
				break;
			} else if(10 == this.character || 13 == this.character) {
				_line = this.line;
				var _lineStart = this.lineStart;
				var _lineIndent = this.lineIndent;
				this.skipSeparationSpace(false,-1);
				if(this.lineIndent >= nodeIndent) {
					hasPendingContent = true;
					continue;
				} else {
					this.position = captureEnd;
					this.line = _line;
					this.lineStart = _lineStart;
					this.lineIndent = _lineIndent;
					this.character = HxOverrides.cca(this.input,this.position);
					break;
				}
			}
			if(hasPendingContent) {
				this.captureSegment(captureStart,captureEnd,false);
				this.writeFoldedLines(this.line - _line);
				captureEnd = this.position;
				captureStart = captureEnd;
				hasPendingContent = false;
			}
			if(32 != this.character && 9 != this.character) {
				captureEnd = this.position + 1;
			}
			if(++this.position >= this.length) {
				break;
			}
			this.character = HxOverrides.cca(this.input,this.position);
		}
		this.captureSegment(captureStart,captureEnd,false);
		if(this.result != null) {
			return true;
		} else {
			this.kind = _kind;
			this.result = _result;
			return false;
		}
	}
	,readSingleQuotedScalar: function(nodeIndent) {
		var captureStart;
		var captureEnd;
		if(39 != this.character) {
			return false;
		}
		this.kind = "string";
		this.result = "";
		this.character = HxOverrides.cca(this.input,++this.position);
		captureEnd = this.position;
		captureStart = captureEnd;
		while(this.position < this.length) if(39 == this.character) {
			this.captureSegment(captureStart,this.position,true);
			this.character = HxOverrides.cca(this.input,++this.position);
			if(39 == this.character) {
				captureEnd = this.position;
				captureStart = captureEnd;
				this.character = HxOverrides.cca(this.input,++this.position);
			} else {
				return true;
			}
		} else if(10 == this.character || 13 == this.character) {
			this.captureSegment(captureStart,captureEnd,true);
			this.writeFoldedLines(this.skipSeparationSpace(false,nodeIndent));
			captureEnd = this.position;
			captureStart = captureEnd;
			this.character = HxOverrides.cca(this.input,this.position);
		} else if(this.position == this.lineStart && this.testDocumentSeparator()) {
			this.throwError("unexpected end of the document within a single quoted scalar",{ fileName : "Parser.hx", lineNumber : 708, className : "yaml.Parser", methodName : "readSingleQuotedScalar"});
		} else {
			this.character = HxOverrides.cca(this.input,++this.position);
			captureEnd = this.position;
		}
		this.throwError("unexpected end of the stream within a single quoted scalar",{ fileName : "Parser.hx", lineNumber : 717, className : "yaml.Parser", methodName : "readSingleQuotedScalar"});
		return false;
	}
	,readDoubleQuotedScalar: function(nodeIndent) {
		var captureStart;
		var captureEnd;
		if(34 != this.character) {
			return false;
		}
		this.kind = "string";
		this.result = "";
		this.character = HxOverrides.cca(this.input,++this.position);
		captureEnd = this.position;
		captureStart = captureEnd;
		while(this.position < this.length) if(34 == this.character) {
			this.captureSegment(captureStart,this.position,true);
			this.character = HxOverrides.cca(this.input,++this.position);
			return true;
		} else if(92 == this.character) {
			this.captureSegment(captureStart,this.position,true);
			this.character = HxOverrides.cca(this.input,++this.position);
			if(10 == this.character || 13 == this.character) {
				this.skipSeparationSpace(false,nodeIndent);
			} else if(yaml_Parser.SIMPLE_ESCAPE_SEQUENCES.h.hasOwnProperty(this.character)) {
				this.result += yaml_Parser.SIMPLE_ESCAPE_SEQUENCES.h[this.character];
				this.character = HxOverrides.cca(this.input,++this.position);
			} else if(yaml_Parser.HEXADECIMAL_ESCAPE_SEQUENCES.h.hasOwnProperty(this.character)) {
				var hexLength = yaml_Parser.HEXADECIMAL_ESCAPE_SEQUENCES.h[this.character];
				var hexResult = 0;
				var _g1 = 1;
				var _g = hexLength;
				while(_g1 < _g) {
					var hexIndex = _g1++;
					var hexOffset = (hexLength - hexIndex) * 4;
					this.character = HxOverrides.cca(this.input,++this.position);
					if(48 <= this.character && this.character <= 57) {
						hexResult |= this.character - 48 << hexOffset;
					} else if(65 <= this.character && this.character <= 70) {
						hexResult |= this.character - 65 + 10 << hexOffset;
					} else if(97 <= this.character && this.character <= 102) {
						hexResult |= this.character - 97 + 10 << hexOffset;
					} else {
						this.throwError("expected hexadecimal character",{ fileName : "Parser.hx", lineNumber : 784, className : "yaml.Parser", methodName : "readDoubleQuotedScalar"});
					}
				}
				this.result += String.fromCharCode(hexResult);
				this.character = HxOverrides.cca(this.input,++this.position);
			} else {
				this.throwError("unknown escape sequence",{ fileName : "Parser.hx", lineNumber : 794, className : "yaml.Parser", methodName : "readDoubleQuotedScalar"});
			}
			captureEnd = this.position;
			captureStart = captureEnd;
		} else if(10 == this.character || 13 == this.character) {
			this.captureSegment(captureStart,captureEnd,true);
			this.writeFoldedLines(this.skipSeparationSpace(false,nodeIndent));
			captureEnd = this.position;
			captureStart = captureEnd;
			this.character = HxOverrides.cca(this.input,this.position);
		} else if(this.position == this.lineStart && this.testDocumentSeparator()) {
			this.throwError("unexpected end of the document within a double quoted scalar",{ fileName : "Parser.hx", lineNumber : 809, className : "yaml.Parser", methodName : "readDoubleQuotedScalar"});
		} else {
			this.character = HxOverrides.cca(this.input,++this.position);
			captureEnd = this.position;
		}
		this.throwError("unexpected end of the stream within a double quoted scalar",{ fileName : "Parser.hx", lineNumber : 818, className : "yaml.Parser", methodName : "readDoubleQuotedScalar"});
		return false;
	}
	,composeNode: function(parentIndent,nodeContext,allowToSeek,allowCompact) {
		var allowBlockStyles;
		var allowBlockScalars;
		var allowBlockCollections;
		var atNewLine = false;
		var isIndented = true;
		var hasContent = false;
		this.tag = null;
		this.anchor = null;
		this.kind = null;
		this.result = null;
		if(4 != nodeContext) {
			allowBlockCollections = 3 == nodeContext;
		} else {
			allowBlockCollections = true;
		}
		allowBlockScalars = allowBlockCollections;
		allowBlockStyles = allowBlockScalars;
		if(allowToSeek) {
			if(this.skipSeparationSpace(true,-1) != 0) {
				atNewLine = true;
				if(this.lineIndent == parentIndent) {
					isIndented = false;
				} else if(this.lineIndent > parentIndent) {
					isIndented = true;
				} else {
					return false;
				}
			}
		}
		if(isIndented) {
			while(this.readTagProperty() || this.readAnchorProperty()) if(this.skipSeparationSpace(true,-1) != 0) {
				atNewLine = true;
				if(this.lineIndent > parentIndent) {
					isIndented = true;
					allowBlockCollections = allowBlockStyles;
				} else if(this.lineIndent == parentIndent) {
					isIndented = false;
					allowBlockCollections = allowBlockStyles;
				} else {
					return true;
				}
			} else {
				allowBlockCollections = false;
			}
		}
		if(allowBlockCollections) {
			if(!atNewLine) {
				allowBlockCollections = allowCompact;
			} else {
				allowBlockCollections = true;
			}
		}
		if(isIndented || 4 == nodeContext) {
			var flowIndent;
			var blockIndent;
			if(1 == nodeContext || 2 == nodeContext) {
				flowIndent = parentIndent;
			} else {
				flowIndent = parentIndent + 1;
			}
			blockIndent = this.position - this.lineStart;
			if(isIndented) {
				if(allowBlockCollections && (this.readBlockSequence(blockIndent) || this.readBlockMapping(blockIndent)) || this.readFlowCollection(flowIndent)) {
					hasContent = true;
				} else {
					if(allowBlockScalars && this.readBlockScalar(flowIndent) || this.readSingleQuotedScalar(flowIndent) || this.readDoubleQuotedScalar(flowIndent)) {
						hasContent = true;
					} else if(this.readAlias()) {
						hasContent = true;
						if(null != this.tag || null != this.anchor) {
							this.throwError("alias node should not have any properties",{ fileName : "Parser.hx", lineNumber : 932, className : "yaml.Parser", methodName : "composeNode"});
						}
					} else if(this.readPlainScalar(flowIndent,1 == nodeContext)) {
						hasContent = true;
						if(null == this.tag) {
							this.tag = "?";
						}
					}
					if(null != this.anchor) {
						var _this = this.anchorMap;
						var key = this.anchor;
						var value = this.result;
						if(__map_reserved[key] != null) {
							_this.setReserved(key,value);
						} else {
							_this.h[key] = value;
						}
					}
				}
			} else if(allowBlockCollections) {
				hasContent = this.readBlockSequence(blockIndent);
			} else {
				hasContent = false;
			}
		}
		if(null != this.tag && "!" != this.tag) {
			var _result = null;
			if("?" == this.tag) {
				if(this.resolve) {
					var _g1 = 0;
					var _g = this.implicitTypes.length;
					while(_g1 < _g) {
						var typeIndex = _g1++;
						var type = this.implicitTypes[typeIndex];
						var resolvedType = false;
						try {
							_result = type.resolve(this.result,this.usingMaps,false);
							this.tag = type.tag;
							this.result = _result;
							resolvedType = true;
						} catch( e ) {
							if (e instanceof js__$Boot_HaxeError) e = e.val;
							if( js_Boot.__instanceof(e,yaml_ResolveTypeException) ) {
							} else throw(e);
						}
						if(resolvedType) {
							break;
						}
					}
				}
			} else {
				var _this1 = this.typeMap;
				var key1 = this.tag;
				if(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1)) {
					var _this2 = this.typeMap;
					var key2 = this.tag;
					var t = __map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2];
					if(null != this.result && t.loader.kind != this.kind) {
						this.throwError("unacceptable node kind for !<" + this.tag + "> tag; it should be \"" + t.loader.kind + "\", not \"" + this.kind + "\"",{ fileName : "Parser.hx", lineNumber : 996, className : "yaml.Parser", methodName : "composeNode"});
					}
					if(!t.loader.skip) {
						try {
							_result = t.resolve(this.result,this.usingMaps,true);
							this.result = _result;
						} catch( e1 ) {
							if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
							if( js_Boot.__instanceof(e1,yaml_ResolveTypeException) ) {
								this.throwError("cannot resolve a node with !<" + this.tag + "> explicit tag",{ fileName : "Parser.hx", lineNumber : 1014, className : "yaml.Parser", methodName : "composeNode"});
							} else throw(e1);
						}
					}
				} else {
					this.throwWarning("unknown tag !<" + this.tag + ">",{ fileName : "Parser.hx", lineNumber : 1020, className : "yaml.Parser", methodName : "composeNode"});
				}
			}
		}
		if(!(null != this.tag || null != this.anchor)) {
			return hasContent;
		} else {
			return true;
		}
	}
	,readFlowCollection: function(nodeIndent) {
		var readNext = true;
		var _tag = this.tag;
		var _result;
		var terminator;
		var isPair;
		var isExplicitPair;
		var isMapping;
		var keyNode;
		var keyTag;
		var valueNode;
		var _g = this.character;
		if(_g == null) {
			return false;
		} else {
			switch(_g) {
			case 91:
				terminator = 93;
				isMapping = false;
				_result = [];
				break;
			case 123:
				terminator = 125;
				isMapping = true;
				if(this.usingMaps) {
					_result = new yaml_util_TObjectMap();
				} else {
					_result = { };
				}
				break;
			default:
				return false;
			}
		}
		if(null != this.anchor) {
			var _this = this.anchorMap;
			var key = this.anchor;
			var value = _result;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		this.character = HxOverrides.cca(this.input,++this.position);
		while(this.position < this.length) {
			this.skipSeparationSpace(true,nodeIndent);
			if(this.character == terminator) {
				this.character = HxOverrides.cca(this.input,++this.position);
				this.tag = _tag;
				this.kind = isMapping ? "object" : "array";
				this.result = _result;
				return true;
			} else if(!readNext) {
				this.throwError("missed comma between flow collection entries",{ fileName : "Parser.hx", lineNumber : 1075, className : "yaml.Parser", methodName : "readFlowCollection"});
			}
			valueNode = null;
			keyNode = valueNode;
			keyTag = keyNode;
			isExplicitPair = false;
			isPair = isExplicitPair;
			if(63 == this.character) {
				var following = HxOverrides.cca(this.input,this.position + 1);
				if(32 == following || 9 == following || 10 == following || 13 == following) {
					isExplicitPair = true;
					isPair = isExplicitPair;
					this.position += 1;
					this.character = following;
					this.skipSeparationSpace(true,nodeIndent);
				}
			}
			var _line = this.line;
			this.composeNode(nodeIndent,1,false,true);
			keyTag = this.tag;
			keyNode = this.result;
			if((isExplicitPair || this.line == _line) && 58 == this.character) {
				isPair = true;
				this.character = HxOverrides.cca(this.input,++this.position);
				this.skipSeparationSpace(true,nodeIndent);
				this.composeNode(nodeIndent,1,false,true);
				valueNode = this.result;
			}
			if(isMapping) {
				if(this.usingMaps) {
					this.storeMappingPair(_result,keyTag,keyNode,valueNode);
				} else {
					this.storeObjectMappingPair(_result,keyTag,keyNode,valueNode);
				}
			} else if(isPair) {
				if(this.usingMaps) {
					_result.push(this.storeMappingPair(null,keyTag,keyNode,valueNode));
				} else {
					_result.push(this.storeObjectMappingPair(null,keyTag,keyNode,valueNode));
				}
			} else {
				_result.push(keyNode);
			}
			this.skipSeparationSpace(true,nodeIndent);
			if(44 == this.character) {
				readNext = true;
				this.character = HxOverrides.cca(this.input,++this.position);
			} else {
				readNext = false;
			}
		}
		this.throwError("unexpected end of the stream within a flow collection",{ fileName : "Parser.hx", lineNumber : 1143, className : "yaml.Parser", methodName : "readFlowCollection"});
		return false;
	}
	,readBlockScalar: function(nodeIndent) {
		var captureStart;
		var folding;
		var chomping = 1;
		var detectedIndent = false;
		var textIndent = nodeIndent;
		var emptyLines = -1;
		var _g = this.character;
		if(_g == null) {
			return false;
		} else {
			switch(_g) {
			case 62:
				folding = true;
				break;
			case 124:
				folding = false;
				break;
			default:
				return false;
			}
		}
		this.kind = "string";
		this.result = "";
		while(this.position < this.length) {
			this.character = HxOverrides.cca(this.input,++this.position);
			if(43 == this.character || 45 == this.character) {
				if(1 == chomping) {
					if(43 == this.character) {
						chomping = 3;
					} else {
						chomping = 2;
					}
				} else {
					this.throwError("repeat of a chomping mode identifier",{ fileName : "Parser.hx", lineNumber : 1183, className : "yaml.Parser", methodName : "readBlockScalar"});
				}
			} else if(48 <= this.character && this.character <= 57) {
				if(48 == this.character) {
					this.throwError("bad explicit indentation width of a block scalar; it cannot be less than one",{ fileName : "Parser.hx", lineNumber : 1191, className : "yaml.Parser", methodName : "readBlockScalar"});
				} else if(!detectedIndent) {
					textIndent = nodeIndent + (this.character - 49);
					detectedIndent = true;
				} else {
					this.throwError("repeat of an indentation width identifier",{ fileName : "Parser.hx", lineNumber : 1200, className : "yaml.Parser", methodName : "readBlockScalar"});
				}
			} else {
				break;
			}
		}
		if(32 == this.character || 9 == this.character) {
			while(true) {
				this.character = HxOverrides.cca(this.input,++this.position);
				if(!(32 == this.character || 9 == this.character)) {
					break;
				}
			}
			if(35 == this.character) {
				while(true) {
					this.character = HxOverrides.cca(this.input,++this.position);
					if(!(this.position < this.length && 10 != this.character && 13 != this.character)) {
						break;
					}
				}
			}
		}
		while(this.position < this.length) {
			this.readLineBreak();
			this.lineIndent = 0;
			while((!detectedIndent || this.lineIndent < textIndent) && 32 == this.character) {
				this.lineIndent += 1;
				this.character = HxOverrides.cca(this.input,++this.position);
			}
			if(!detectedIndent && this.lineIndent > textIndent) {
				textIndent = this.lineIndent;
			}
			if(10 == this.character || 13 == this.character) {
				++emptyLines;
				continue;
			}
			if(this.lineIndent < textIndent) {
				if(3 == chomping) {
					this.result += yaml_util_Strings.repeat("\n",emptyLines + 1);
				} else if(1 == chomping) {
					this.result += "\n";
				}
				break;
			}
			detectedIndent = true;
			if(folding) {
				if(32 == this.character || 9 == this.character) {
					this.result += yaml_util_Strings.repeat("\n",emptyLines + 1);
					emptyLines = 1;
				} else if(0 == emptyLines) {
					this.result += " ";
					emptyLines = 0;
				} else {
					this.result += yaml_util_Strings.repeat("\n",emptyLines);
					emptyLines = 0;
				}
			} else {
				this.result += yaml_util_Strings.repeat("\n",emptyLines + 1);
				emptyLines = 0;
			}
			captureStart = this.position;
			while(true) {
				this.character = HxOverrides.cca(this.input,++this.position);
				if(!(this.position < this.length && 10 != this.character && 13 != this.character)) {
					break;
				}
			}
			this.captureSegment(captureStart,this.position,false);
		}
		return true;
	}
	,readBlockSequence: function(nodeIndent) {
		var _line;
		var _tag = this.tag;
		var _result = [];
		var following;
		var detected = false;
		if(null != this.anchor) {
			var _this = this.anchorMap;
			var key = this.anchor;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,_result);
			} else {
				_this.h[key] = _result;
			}
		}
		while(this.position < this.length) {
			if(45 != this.character) {
				break;
			}
			following = HxOverrides.cca(this.input,this.position + 1);
			if(32 != following && 9 != following && 10 != following && 13 != following) {
				break;
			}
			detected = true;
			this.position += 1;
			this.character = following;
			if(this.skipSeparationSpace(true,-1) != 0) {
				if(this.lineIndent <= nodeIndent) {
					_result.push(null);
					continue;
				}
			}
			_line = this.line;
			this.composeNode(nodeIndent,3,false,true);
			_result.push(this.result);
			this.skipSeparationSpace(true,-1);
			if((this.line == _line || this.lineIndent > nodeIndent) && this.position < this.length) {
				this.throwError("bad indentation of a sequence entry",{ fileName : "Parser.hx", lineNumber : 1365, className : "yaml.Parser", methodName : "readBlockSequence"});
			} else if(this.lineIndent < nodeIndent) {
				break;
			}
		}
		if(detected) {
			this.tag = _tag;
			this.kind = "array";
			this.result = _result;
			return true;
		} else {
			return false;
		}
	}
	,readBlockMapping: function(nodeIndent) {
		var following;
		var allowCompact = false;
		var _line;
		var _tag = this.tag;
		var _result = this.usingMaps ? new yaml_util_TObjectMap() : { };
		var keyTag = null;
		var keyNode = null;
		var valueNode = null;
		var atExplicitKey = false;
		var detected = false;
		if(null != this.anchor) {
			var _this = this.anchorMap;
			var key = this.anchor;
			var value = _result;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		while(this.position < this.length) {
			following = HxOverrides.cca(this.input,this.position + 1);
			_line = this.line;
			if((63 == this.character || 58 == this.character) && (32 == following || 9 == following || 10 == following || 13 == following)) {
				if(63 == this.character) {
					if(atExplicitKey) {
						if(this.usingMaps) {
							this.storeMappingPair(_result,keyTag,keyNode,null);
						} else {
							this.storeObjectMappingPair(_result,keyTag,keyNode,null);
						}
						valueNode = null;
						keyNode = valueNode;
						keyTag = keyNode;
					}
					detected = true;
					atExplicitKey = true;
					allowCompact = true;
				} else if(atExplicitKey) {
					atExplicitKey = false;
					allowCompact = true;
				} else {
					this.throwError("incomplete explicit mapping pair; a key node is missed",{ fileName : "Parser.hx", lineNumber : 1440, className : "yaml.Parser", methodName : "readBlockMapping"});
				}
				this.position += 1;
				this.character = following;
			} else if(this.composeNode(nodeIndent,2,false,true)) {
				if(this.line == _line) {
					while(32 == this.character || 9 == this.character) this.character = HxOverrides.cca(this.input,++this.position);
					if(58 == this.character) {
						this.character = HxOverrides.cca(this.input,++this.position);
						if(32 != this.character && 9 != this.character && 10 != this.character && 13 != this.character) {
							this.throwError("a whitespace character is expected after the key-value separator within a block mapping",{ fileName : "Parser.hx", lineNumber : 1467, className : "yaml.Parser", methodName : "readBlockMapping"});
						}
						if(atExplicitKey) {
							if(this.usingMaps) {
								this.storeMappingPair(_result,keyTag,keyNode,null);
							} else {
								this.storeObjectMappingPair(_result,keyTag,keyNode,null);
							}
							valueNode = null;
							keyNode = valueNode;
							keyTag = keyNode;
						}
						detected = true;
						atExplicitKey = false;
						allowCompact = false;
						keyTag = this.tag;
						keyNode = this.result;
					} else if(detected) {
						this.throwError("can not read an implicit mapping pair; a colon is missed",{ fileName : "Parser.hx", lineNumber : 1489, className : "yaml.Parser", methodName : "readBlockMapping"});
					} else {
						this.tag = _tag;
						return true;
					}
				} else if(detected) {
					this.throwError("can not read a block mapping entry; a multiline key may not be an implicit key",{ fileName : "Parser.hx", lineNumber : 1501, className : "yaml.Parser", methodName : "readBlockMapping"});
				} else {
					this.tag = _tag;
					return true;
				}
			} else {
				break;
			}
			if(this.line == _line || this.lineIndent > nodeIndent) {
				if(this.composeNode(nodeIndent,4,true,allowCompact)) {
					if(atExplicitKey) {
						keyNode = this.result;
					} else {
						valueNode = this.result;
					}
				}
				if(!atExplicitKey) {
					if(this.usingMaps) {
						this.storeMappingPair(_result,keyTag,keyNode,valueNode);
					} else {
						this.storeObjectMappingPair(_result,keyTag,keyNode,valueNode);
					}
					valueNode = null;
					keyNode = valueNode;
					keyTag = keyNode;
				}
				this.skipSeparationSpace(true,-1);
			}
			if(this.lineIndent > nodeIndent && this.position < this.length) {
				this.throwError("bad indentation of a mapping entry",{ fileName : "Parser.hx", lineNumber : 1541, className : "yaml.Parser", methodName : "readBlockMapping"});
			} else if(this.lineIndent < nodeIndent) {
				break;
			}
		}
		if(atExplicitKey) {
			if(this.usingMaps) {
				this.storeMappingPair(_result,keyTag,keyNode,null);
			} else {
				this.storeObjectMappingPair(_result,keyTag,keyNode,null);
			}
		}
		if(detected) {
			this.tag = _tag;
			this.kind = "object";
			this.result = _result;
		}
		return detected;
	}
	,readTagProperty: function() {
		var _position;
		var isVerbatim = false;
		var isNamed = false;
		var tagHandle = null;
		var tagName = null;
		if(33 != this.character) {
			return false;
		}
		if(null != this.tag) {
			this.throwError("duplication of a tag property",{ fileName : "Parser.hx", lineNumber : 1579, className : "yaml.Parser", methodName : "readTagProperty"});
		}
		this.character = HxOverrides.cca(this.input,++this.position);
		if(60 == this.character) {
			isVerbatim = true;
			this.character = HxOverrides.cca(this.input,++this.position);
		} else if(33 == this.character) {
			isNamed = true;
			tagHandle = "!!";
			this.character = HxOverrides.cca(this.input,++this.position);
		} else {
			tagHandle = "!";
		}
		_position = this.position;
		if(isVerbatim) {
			while(true) {
				this.character = HxOverrides.cca(this.input,++this.position);
				if(!(this.position < this.length && 62 != this.character)) {
					break;
				}
			}
			if(this.position < this.length) {
				tagName = yaml_util_Utf8.substring(this.input,_position,this.position);
				this.character = HxOverrides.cca(this.input,++this.position);
			} else {
				this.throwError("unexpected end of the stream within a verbatim tag",{ fileName : "Parser.hx", lineNumber : 1614, className : "yaml.Parser", methodName : "readTagProperty"});
			}
		} else {
			while(this.position < this.length && 32 != this.character && 9 != this.character && 10 != this.character && 13 != this.character) {
				if(33 == this.character) {
					if(!isNamed) {
						tagHandle = yaml_util_Utf8.substring(this.input,_position - 1,this.position + 1);
						if(this.validate && !yaml_Parser.PATTERN_TAG_HANDLE.match(tagHandle)) {
							this.throwError("named tag handle cannot contain such characters",{ fileName : "Parser.hx", lineNumber : 1633, className : "yaml.Parser", methodName : "readTagProperty"});
						}
						isNamed = true;
						_position = this.position + 1;
					} else {
						this.throwError("tag suffix cannot contain exclamation marks",{ fileName : "Parser.hx", lineNumber : 1641, className : "yaml.Parser", methodName : "readTagProperty"});
					}
				}
				this.character = HxOverrides.cca(this.input,++this.position);
			}
			tagName = yaml_util_Utf8.substring(this.input,_position,this.position);
			if(this.validate && yaml_Parser.PATTERN_FLOW_INDICATORS.match(tagName)) {
				this.throwError("tag suffix cannot contain flow indicator characters",{ fileName : "Parser.hx", lineNumber : 1652, className : "yaml.Parser", methodName : "readTagProperty"});
			}
		}
		if(this.validate && tagName != null && tagName != "" && !yaml_Parser.PATTERN_TAG_URI.match(tagName)) {
			this.throwError("tag name cannot contain such characters: " + tagName,{ fileName : "Parser.hx", lineNumber : 1658, className : "yaml.Parser", methodName : "readTagProperty"});
		}
		if(isVerbatim) {
			this.tag = tagName;
		} else {
			var _this = this.tagMap;
			if(__map_reserved[tagHandle] != null ? _this.existsReserved(tagHandle) : _this.h.hasOwnProperty(tagHandle)) {
				var _this1 = this.tagMap;
				this.tag = (__map_reserved[tagHandle] != null ? _this1.getReserved(tagHandle) : _this1.h[tagHandle]) + tagName;
			} else if("!" == tagHandle) {
				this.tag = "!" + tagName;
			} else if("!!" == tagHandle) {
				this.tag = "tag:yaml.org,2002:" + tagName;
			} else {
				this.throwError("undeclared tag handle \"" + tagHandle + "\"",{ fileName : "Parser.hx", lineNumber : 1679, className : "yaml.Parser", methodName : "readTagProperty"});
			}
		}
		return true;
	}
	,readAnchorProperty: function() {
		var _position;
		if(38 != this.character) {
			return false;
		}
		if(null != this.anchor) {
			this.throwError("duplication of an anchor property",{ fileName : "Parser.hx", lineNumber : 1693, className : "yaml.Parser", methodName : "readAnchorProperty"});
		}
		this.character = HxOverrides.cca(this.input,++this.position);
		_position = this.position;
		while(this.position < this.length && 32 != this.character && 9 != this.character && 10 != this.character && 13 != this.character && 44 != this.character && 91 != this.character && 93 != this.character && 123 != this.character && 125 != this.character) this.character = HxOverrides.cca(this.input,++this.position);
		if(this.position == _position) {
			this.throwError("name of an anchor node must contain at least one character",{ fileName : "Parser.hx", lineNumber : 1713, className : "yaml.Parser", methodName : "readAnchorProperty"});
		}
		this.anchor = yaml_util_Utf8.substring(this.input,_position,this.position);
		return true;
	}
	,readAlias: function() {
		var _position;
		var alias;
		if(42 != this.character) {
			return false;
		}
		this.character = HxOverrides.cca(this.input,++this.position);
		_position = this.position;
		while(this.position < this.length && 32 != this.character && 9 != this.character && 10 != this.character && 13 != this.character && 44 != this.character && 91 != this.character && 93 != this.character && 123 != this.character && 125 != this.character) this.character = HxOverrides.cca(this.input,++this.position);
		if(this.position == _position) {
			this.throwError("name of an alias node must contain at least one character",{ fileName : "Parser.hx", lineNumber : 1745, className : "yaml.Parser", methodName : "readAlias"});
		}
		alias = yaml_util_Utf8.substring(this.input,_position,this.position);
		var _this = this.anchorMap;
		if(!(__map_reserved[alias] != null ? _this.existsReserved(alias) : _this.h.hasOwnProperty(alias))) {
			this.throwError("unidentified alias \"" + alias + "\"",{ fileName : "Parser.hx", lineNumber : 1750, className : "yaml.Parser", methodName : "readAlias"});
		}
		var _this1 = this.anchorMap;
		this.result = __map_reserved[alias] != null ? _this1.getReserved(alias) : _this1.h[alias];
		this.skipSeparationSpace(true,-1);
		return true;
	}
	,readDocument: function() {
		var documentStart = this.position;
		var _position;
		var directiveName;
		var directiveArgs;
		var hasDirectives = false;
		this.version = null;
		this.checkLineBreaks = false;
		this.tagMap = new haxe_ds_StringMap();
		this.anchorMap = new haxe_ds_StringMap();
		while(this.position < this.length) {
			this.skipSeparationSpace(true,-1);
			if(this.lineIndent > 0 || 37 != this.character) {
				break;
			}
			hasDirectives = true;
			this.character = HxOverrides.cca(this.input,++this.position);
			_position = this.position;
			while(this.position < this.length && 32 != this.character && 9 != this.character && 10 != this.character && 13 != this.character) this.character = HxOverrides.cca(this.input,++this.position);
			directiveName = yaml_util_Utf8.substring(this.input,_position,this.position);
			directiveArgs = [];
			if(directiveName.length < 1) {
				this.throwError("directive name must not be less than one character in length",{ fileName : "Parser.hx", lineNumber : 1795, className : "yaml.Parser", methodName : "readDocument"});
			}
			while(this.position < this.length) {
				while(32 == this.character || 9 == this.character) this.character = HxOverrides.cca(this.input,++this.position);
				if(35 == this.character) {
					while(true) {
						this.character = HxOverrides.cca(this.input,++this.position);
						if(!(this.position < this.length && 10 != this.character && 13 != this.character)) {
							break;
						}
					}
					break;
				}
				if(10 == this.character || 13 == this.character) {
					break;
				}
				_position = this.position;
				while(this.position < this.length && 32 != this.character && 9 != this.character && 10 != this.character && 13 != this.character) this.character = HxOverrides.cca(this.input,++this.position);
				directiveArgs.push(yaml_util_Utf8.substring(this.input,_position,this.position));
			}
			if(this.position < this.length) {
				this.readLineBreak();
			}
			var _this = this.directiveHandlers;
			if(__map_reserved[directiveName] != null ? _this.existsReserved(directiveName) : _this.h.hasOwnProperty(directiveName)) {
				var _this1 = this.directiveHandlers;
				(__map_reserved[directiveName] != null ? _this1.getReserved(directiveName) : _this1.h[directiveName])(directiveName,directiveArgs);
			} else {
				this.throwWarning("unknown document directive \"" + directiveName + "\"",{ fileName : "Parser.hx", lineNumber : 1839, className : "yaml.Parser", methodName : "readDocument"});
			}
		}
		this.skipSeparationSpace(true,-1);
		if(0 == this.lineIndent && 45 == this.character && 45 == HxOverrides.cca(this.input,this.position + 1) && 45 == HxOverrides.cca(this.input,this.position + 2)) {
			this.position += 3;
			this.character = HxOverrides.cca(this.input,this.position);
			this.skipSeparationSpace(true,-1);
		} else if(hasDirectives) {
			this.throwError("directives end mark is expected",{ fileName : "Parser.hx", lineNumber : 1857, className : "yaml.Parser", methodName : "readDocument"});
		}
		this.composeNode(this.lineIndent - 1,4,false,true);
		this.skipSeparationSpace(true,-1);
		if(this.validate && this.checkLineBreaks && yaml_Parser.PATTERN_NON_ASCII_LINE_BREAKS.match(yaml_util_Utf8.substring(this.input,documentStart,this.position))) {
			this.throwWarning("non-ASCII line breaks are interpreted as content",{ fileName : "Parser.hx", lineNumber : 1865, className : "yaml.Parser", methodName : "readDocument"});
		}
		this.output(this.result);
		if(this.position == this.lineStart && this.testDocumentSeparator()) {
			if(46 == this.character) {
				this.position += 3;
				this.character = HxOverrides.cca(this.input,this.position);
				this.skipSeparationSpace(true,-1);
			}
			return;
		}
		if(this.position < this.length) {
			this.throwError("end of the stream or a document separator is expected",{ fileName : "Parser.hx", lineNumber : 1883, className : "yaml.Parser", methodName : "readDocument"});
		} else {
			return;
		}
	}
	,__class__: yaml_Parser
};
var yaml_RenderOptions = function(schema,styles) {
	this.schema = schema != null ? schema : new yaml_schema_DefaultSchema();
	this.styles = styles != null ? styles : new haxe_ds_StringMap();
	this.indent = 2;
	this.flow = -1;
};
$hxClasses["yaml.RenderOptions"] = yaml_RenderOptions;
yaml_RenderOptions.__name__ = ["yaml","RenderOptions"];
yaml_RenderOptions.prototype = {
	schema: null
	,indent: null
	,flow: null
	,styles: null
	,setSchema: function(schema) {
		this.schema = schema;
		return this;
	}
	,setFlowLevel: function(level) {
		this.flow = level;
		return this;
	}
	,setIndent: function(indent) {
		this.indent = indent;
		return this;
	}
	,setStyle: function(name,value) {
		var _this = this.styles;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
		return this;
	}
	,__class__: yaml_RenderOptions
};
var yaml_Renderer = function() {
};
$hxClasses["yaml.Renderer"] = yaml_Renderer;
yaml_Renderer.__name__ = ["yaml","Renderer"];
yaml_Renderer.options = function() {
	return new yaml_RenderOptions();
};
yaml_Renderer.compileStyleMap = function(schema,map) {
	if(null == map) {
		return new haxe_ds_StringMap();
	}
	var result = new haxe_ds_StringMap();
	var tag = map.keys();
	while(tag.hasNext()) {
		var tag1 = tag.next();
		var style = Std.string(__map_reserved[tag1] != null ? map.getReserved(tag1) : map.h[tag1]);
		if(0 == tag1.indexOf("!!")) {
			tag1 = "tag:yaml.org,2002:" + tag1.substring(2);
		}
		var _this = schema.compiledTypeMap;
		var type = __map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1];
		if(type != null && type.dumper != null) {
			var _this1 = type.dumper.styleAliases;
			if(__map_reserved[style] != null ? _this1.existsReserved(style) : _this1.h.hasOwnProperty(style)) {
				var _this2 = type.dumper.styleAliases;
				if(__map_reserved[style] != null) {
					style = _this2.getReserved(style);
				} else {
					style = _this2.h[style];
				}
			}
		}
		if(__map_reserved[tag1] != null) {
			result.setReserved(tag1,style);
		} else {
			result.h[tag1] = style;
		}
	}
	return result;
};
yaml_Renderer.encodeHex = function(charCode) {
	var handle;
	var length;
	var str = yaml_util_Ints.toString(charCode,16).toUpperCase();
	if(charCode <= 255) {
		handle = "x";
		length = 2;
	} else if(charCode <= 65535) {
		handle = "u";
		length = 4;
	} else if(charCode <= -1) {
		handle = "U";
		length = 8;
	} else {
		throw new js__$Boot_HaxeError(new yaml_YamlException("code point within a string may not be greater than 0xFFFFFFFF",null,{ fileName : "Renderer.hx", lineNumber : 586, className : "yaml.Renderer", methodName : "encodeHex"}));
	}
	return "\\" + handle + yaml_util_Strings.repeat("0",length - str.length) + str;
};
yaml_Renderer.prototype = {
	schema: null
	,indent: null
	,flowLevel: null
	,styleMap: null
	,implicitTypes: null
	,explicitTypes: null
	,kind: null
	,tag: null
	,result: null
	,safeRender: function(input,options) {
		options.schema = new yaml_schema_SafeSchema();
		return this.render(input,options);
	}
	,render: function(input,options) {
		this.schema = options.schema;
		this.indent = Math.max(1,options.indent) | 0;
		this.flowLevel = options.flow;
		this.styleMap = yaml_Renderer.compileStyleMap(this.schema,options.styles);
		this.implicitTypes = this.schema.compiledImplicit;
		this.explicitTypes = this.schema.compiledExplicit;
		this.writeNode(0,input,true,true);
		return Std.string(this.result) + "\n";
	}
	,generateNextLine: function(level) {
		return "\n" + yaml_util_Strings.repeat(" ",this.indent * level);
	}
	,testImplicitResolving: function(object) {
		var _g = 0;
		var _g1 = this.implicitTypes;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			try {
				if(!type.loader.skip) {
					type.resolve(object,false);
					return true;
				}
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,yaml_ResolveTypeException) ) {
				} else throw(e);
			}
		}
		return false;
	}
	,writeScalar: function(object) {
		var isQuoted = false;
		var checkpoint = 0;
		var position = -1;
		this.result = "";
		if(0 == object.length || 32 == HxOverrides.cca(object,0) || 32 == HxOverrides.cca(object,object.length - 1)) {
			isQuoted = true;
		}
		var length = object.length;
		while(++position < length) {
			var character = HxOverrides.cca(object,position);
			if(!isQuoted) {
				if(9 == character || 10 == character || 13 == character || 44 == character || 91 == character || 93 == character || 123 == character || 125 == character || 35 == character || 38 == character || 42 == character || 33 == character || 124 == character || 62 == character || 39 == character || 34 == character || 37 == character || 64 == character || 96 == character || 63 == character || 58 == character || 45 == character) {
					isQuoted = true;
				}
			}
			if(yaml_Renderer.ESCAPE_SEQUENCES.h.hasOwnProperty(character) || !(32 <= character && character <= 126 || 133 == character || 160 <= character && character <= 55295 || 57344 <= character && character <= 65533 || 65536 <= character && character <= 1114111)) {
				this.result += yaml_util_Utf8.substring(object,checkpoint,position);
				if(yaml_Renderer.ESCAPE_SEQUENCES.h.hasOwnProperty(character)) {
					this.result += yaml_Renderer.ESCAPE_SEQUENCES.h[character];
				} else {
					this.result += yaml_Renderer.encodeHex(character);
				}
				checkpoint = position + 1;
				isQuoted = true;
			}
		}
		if(checkpoint < position) {
			this.result += yaml_util_Utf8.substring(object,checkpoint,position);
		}
		if(!isQuoted && this.testImplicitResolving(this.result)) {
			isQuoted = true;
		}
		if(isQuoted) {
			this.result = "\"" + Std.string(this.result) + "\"";
		}
	}
	,writeFlowSequence: function(level,object) {
		var _result = "";
		var _tag = this.tag;
		var _g1 = 0;
		var _g = object.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(0 != index) {
				_result += ", ";
			}
			this.writeNode(level,object[index],false,false);
			_result += Std.string(this.result);
		}
		this.tag = _tag;
		this.result = "[" + _result + "]";
	}
	,writeBlockSequence: function(level,object,compact) {
		var _result = "";
		var _tag = this.tag;
		var _g1 = 0;
		var _g = object.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(!compact || 0 != index) {
				_result += this.generateNextLine(level);
			}
			this.writeNode(level + 1,object[index],true,true);
			_result += "- " + Std.string(this.result);
		}
		this.tag = _tag;
		this.result = _result;
	}
	,writeFlowMapping: function(level,object) {
		if(Type["typeof"](object) == ValueType.TObject) {
			this.writeObjectFlowMapping(level,object);
		} else {
			this.writeMapFlowMapping(level,object);
		}
	}
	,writeObjectFlowMapping: function(level,object) {
		var _result = "";
		var _tag = this.tag;
		var index = 0;
		var objectKey;
		var _g = 0;
		var _g1 = Reflect.fields(object);
		while(_g < _g1.length) {
			var objectKey1 = _g1[_g];
			++_g;
			if(0 != index++) {
				_result += ", ";
			}
			var objectValue = Reflect.field(object,objectKey1);
			this.writeNode(level,objectKey1,false,false);
			if(this.result.length > 1024) {
				_result += "? ";
			}
			_result += Std.string(this.result) + ": ";
			this.writeNode(level,objectValue,false,false);
			_result += Std.string(this.result);
		}
		this.tag = _tag;
		this.result = "{" + _result + "}";
	}
	,writeMapFlowMapping: function(level,object) {
		var _result = "";
		var _tag = this.tag;
		var index = 0;
		var objectKey;
		var keys = object.keys();
		var objectKey1 = keys;
		while(objectKey1.hasNext()) {
			var objectKey2 = objectKey1.next();
			if(0 != index++) {
				_result += ", ";
			}
			var objectValue = object.get(objectKey2);
			this.writeNode(level,objectKey2,false,false);
			if(this.result.length > 1024) {
				_result += "? ";
			}
			_result += Std.string(this.result) + ": ";
			this.writeNode(level,objectValue,false,false);
			_result += Std.string(this.result);
		}
		this.tag = _tag;
		this.result = "{" + _result + "}";
	}
	,writeBlockMapping: function(level,object,compact) {
		if(Type["typeof"](object) == ValueType.TObject) {
			this.writeObjectBlockMapping(level,object,compact);
		} else {
			this.writeMapBlockMapping(level,object,compact);
		}
	}
	,writeObjectBlockMapping: function(level,object,compact) {
		var _result = "";
		var _tag = this.tag;
		var index = 0;
		var _g = 0;
		var _g1 = Reflect.fields(object);
		while(_g < _g1.length) {
			var objectKey = _g1[_g];
			++_g;
			if(!compact || 0 != index++) {
				_result += this.generateNextLine(level);
			}
			var objectValue = Reflect.field(object,objectKey);
			this.writeNode(level + 1,objectKey,true,true);
			var explicitPair = null != this.tag && "?" != this.tag && this.result.length <= 1024;
			if(explicitPair) {
				_result += "? ";
			}
			_result += Std.string(this.result);
			if(explicitPair) {
				_result += this.generateNextLine(level);
			}
			this.writeNode(level + 1,objectValue,true,explicitPair);
			_result += ": " + Std.string(this.result);
		}
		this.tag = _tag;
		this.result = _result;
	}
	,writeMapBlockMapping: function(level,object,compact) {
		var _result = "";
		var _tag = this.tag;
		var index = 0;
		var keys = object.keys();
		var objectKey = keys;
		while(objectKey.hasNext()) {
			var objectKey1 = objectKey.next();
			if(!compact || 0 != index++) {
				_result += this.generateNextLine(level);
			}
			var objectValue = object.get(objectKey1);
			this.writeNode(level + 1,objectKey1,true,true);
			var explicitPair = null != this.tag && "?" != this.tag && this.result.length <= 1024;
			if(explicitPair) {
				_result += "? ";
			}
			_result += Std.string(this.result);
			if(explicitPair) {
				_result += this.generateNextLine(level);
			}
			this.writeNode(level + 1,objectValue,true,explicitPair);
			_result += ": " + Std.string(this.result);
		}
		this.tag = _tag;
		this.result = _result;
	}
	,detectType: function(object,explicit) {
		var _result = null;
		var typeList = explicit ? this.explicitTypes : this.implicitTypes;
		var style;
		this.kind = this.kindOf(object);
		var _g = 0;
		while(_g < typeList.length) {
			var type = typeList[_g];
			++_g;
			if(null != type.dumper && type.dumper.skip != true && (null == type.dumper.kind || this.kind == type.dumper.kind) && (null == type.dumper.instanceOf || js_Boot.__instanceof(object,type.dumper.instanceOf) && (null == type.dumper.predicate || type.dumper.predicate(object)))) {
				this.tag = explicit ? type.tag : "?";
				var _this = this.styleMap;
				var key = type.tag;
				if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
					var _this1 = this.styleMap;
					var key1 = type.tag;
					if(__map_reserved[key1] != null) {
						style = _this1.getReserved(key1);
					} else {
						style = _this1.h[key1];
					}
				} else {
					style = type.dumper.defaultStyle;
				}
				var success = true;
				try {
					_result = type.represent(object,style);
				} catch( e ) {
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					if( js_Boot.__instanceof(e,yaml_RepresentTypeException) ) {
						success = false;
					} else throw(e);
				}
				if(success) {
					this.kind = this.kindOf(_result);
					this.result = _result;
				} else if(explicit) {
					throw new js__$Boot_HaxeError(new yaml_YamlException("cannot represent an object of !<" + type.tag + "> type",null,{ fileName : "Renderer.hx", lineNumber : 444, className : "yaml.Renderer", methodName : "detectType"}));
				} else {
					continue;
				}
				return true;
			}
		}
		return false;
	}
	,writeNode: function(level,object,block,compact) {
		this.tag = null;
		this.result = object;
		if(!this.detectType(object,false)) {
			this.detectType(object,true);
		}
		if(block) {
			if(0 <= this.flowLevel) {
				block = this.flowLevel > level;
			} else {
				block = true;
			}
		}
		if(null != this.tag && "?" != this.tag || 2 != this.indent && level > 0) {
			compact = false;
		}
		if("object" == this.kind) {
			var empty = Type["typeof"](object) == ValueType.TObject ? Reflect.fields(object).length == 0 : Lambda.empty(object);
			if(block && !empty) {
				this.writeBlockMapping(level,object,compact);
			} else {
				this.writeFlowMapping(level,object);
			}
		} else if("array" == this.kind) {
			if(block && 0 != this.result.length) {
				this.writeBlockSequence(level,this.result,compact);
			} else {
				this.writeFlowSequence(level,this.result);
			}
		} else if("string" == this.kind) {
			if("?" != this.tag) {
				this.writeScalar(this.result);
			}
		} else {
			throw new js__$Boot_HaxeError(new yaml_YamlException("unacceptabe kind of an object to dump (" + this.kind + ")",null,{ fileName : "Renderer.hx", lineNumber : 501, className : "yaml.Renderer", methodName : "writeNode"}));
		}
		if(null != this.tag && "?" != this.tag) {
			this.result = "!<" + this.tag + "> " + Std.string(this.result);
		}
	}
	,kindOf: function(object) {
		var kind = Type["typeof"](object);
		var _g = Type["typeof"](object);
		switch(_g[1]) {
		case 0:
			return "null";
		case 1:
			return "integer";
		case 2:
			return "float";
		case 3:
			return "boolean";
		case 4:
			if((object instanceof Array) && object.__enum__ == null) {
				return "array";
			} else {
				return "object";
			}
			break;
		case 5:
			return "function";
		case 6:
			var c = _g[2];
			if(c == String) {
				return "string";
			} else if(c == Array) {
				return "array";
			} else if(c == haxe_io_Bytes) {
				return "binary";
			} else {
				return "object";
			}
			break;
		case 7:
			return "enum";
		case 8:
			return "unknown";
		}
	}
	,__class__: yaml_Renderer
};
var yaml_Schema = function(include,explicit,implicit) {
	this.include = include == null ? [] : include;
	this.implicit = implicit == null ? [] : implicit;
	this.explicit = explicit == null ? [] : explicit;
	var _g = 0;
	var _g1 = this.implicit;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		if(null != type.loader && "string" != type.loader.kind) {
			throw new js__$Boot_HaxeError(new yaml_YamlException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.",null,{ fileName : "Schema.hx", lineNumber : 28, className : "yaml.Schema", methodName : "new"}));
		}
	}
	this.compiledImplicit = yaml_Schema.compileList(this,"implicit",[]);
	this.compiledExplicit = yaml_Schema.compileList(this,"explicit",[]);
	this.compiledTypeMap = yaml_Schema.compileMap([this.compiledImplicit,this.compiledExplicit]);
};
$hxClasses["yaml.Schema"] = yaml_Schema;
yaml_Schema.__name__ = ["yaml","Schema"];
yaml_Schema.create = function(types,schemas) {
	if(schemas == null) {
		schemas = [yaml_Schema.DEFAULT];
	} else if(schemas.length == 0) {
		schemas.push(yaml_Schema.DEFAULT);
	}
	return new yaml_Schema(schemas,types);
};
yaml_Schema.compileList = function(schema,name,result) {
	var exclude = [];
	var _g = 0;
	var _g1 = schema.include;
	while(_g < _g1.length) {
		var includedSchema = _g1[_g];
		++_g;
		result = yaml_Schema.compileList(includedSchema,name,result);
	}
	var types;
	switch(name) {
	case "explicit":
		types = schema.explicit;
		break;
	case "implicit":
		types = schema.implicit;
		break;
	default:
		throw new js__$Boot_HaxeError(new yaml_YamlException("unknown type list type: " + name,null,{ fileName : "Schema.hx", lineNumber : 61, className : "yaml.Schema", methodName : "compileList"}));
	}
	var _g2 = 0;
	while(_g2 < types.length) {
		var currenYamlType = types[_g2];
		++_g2;
		var _g21 = 0;
		var _g11 = result.length;
		while(_g21 < _g11) {
			var previousIndex = _g21++;
			var previousType = result[previousIndex];
			if(previousType.tag == currenYamlType.tag) {
				exclude.push(previousIndex);
			}
		}
		result.push(currenYamlType);
	}
	var filteredResult = [];
	var _g12 = 0;
	var _g3 = result.length;
	while(_g12 < _g3) {
		var i = _g12++;
		if(!Lambda.has(exclude,i)) {
			filteredResult.push(result[i]);
		}
	}
	return filteredResult;
};
yaml_Schema.compileMap = function(list) {
	var result = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < list.length) {
		var member = list[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < member.length) {
			var type = member[_g1];
			++_g1;
			var key = type.tag;
			if(__map_reserved[key] != null) {
				result.setReserved(key,type);
			} else {
				result.h[key] = type;
			}
		}
	}
	return result;
};
yaml_Schema.prototype = {
	compiledImplicit: null
	,compiledExplicit: null
	,compiledTypeMap: null
	,implicit: null
	,explicit: null
	,include: null
	,__class__: yaml_Schema
};
var yaml_Yaml = function() {
};
$hxClasses["yaml.Yaml"] = yaml_Yaml;
yaml_Yaml.__name__ = ["yaml","Yaml"];
yaml_Yaml.parse = function(document,options) {
	if(options == null) {
		options = new yaml_ParserOptions();
	}
	return new yaml_Parser().parse(document,options);
};
yaml_Yaml.render = function(data,options) {
	if(options == null) {
		options = new yaml_RenderOptions();
	}
	return new yaml_Renderer().render(data,options);
};
yaml_Yaml.prototype = {
	__class__: yaml_Yaml
};
var yaml_YamlException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	this.name = Type.getClassName(js_Boot.getClass(this));
	this.message = message;
	this.cause = cause;
	this.info = info;
};
$hxClasses["yaml.YamlException"] = yaml_YamlException;
yaml_YamlException.__name__ = ["yaml","YamlException"];
yaml_YamlException.prototype = {
	name: null
	,get_name: function() {
		return this.name;
	}
	,message: null
	,get_message: function() {
		return this.message;
	}
	,cause: null
	,info: null
	,toString: function() {
		var str = this.get_name() + ": " + this.get_message();
		if(this.info != null) {
			str += " at " + this.info.className + "#" + this.info.methodName + " (" + this.info.lineNumber + ")";
		}
		return str;
	}
	,__class__: yaml_YamlException
	,__properties__: {get_message:"get_message",get_name:"get_name"}
};
var yaml_YamlType = function(tag,loaderOptions,dumperOptions) {
	if(loaderOptions == null && dumperOptions == null) {
		throw new js__$Boot_HaxeError(new yaml_YamlException("Incomplete YAML type definition. \"loader\" or \"dumper\" setting must be specified.",null,{ fileName : "YamlType.hx", lineNumber : 34, className : "yaml.YamlType", methodName : "new"}));
	}
	this.tag = tag;
	this.loader = loaderOptions;
	this.dumper = dumperOptions;
	if(loaderOptions != null && !loaderOptions.skip) {
		this.validateLoaderOptions();
	}
	if(dumperOptions != null && !dumperOptions.skip) {
		this.validateDumperOptions();
	}
};
$hxClasses["yaml.YamlType"] = yaml_YamlType;
yaml_YamlType.__name__ = ["yaml","YamlType"];
yaml_YamlType.prototype = {
	tag: null
	,loader: null
	,dumper: null
	,resolve: function(object,usingMaps,explicit) {
		if(explicit == null) {
			explicit = false;
		}
		if(usingMaps == null) {
			usingMaps = true;
		}
		this.cantResolveType({ fileName : "YamlType.hx", lineNumber : 48, className : "yaml.YamlType", methodName : "resolve"});
		return null;
	}
	,represent: function(object,style) {
		this.cantRepresentType({ fileName : "YamlType.hx", lineNumber : 54, className : "yaml.YamlType", methodName : "represent"});
		return null;
	}
	,cantResolveType: function(info) {
		throw new js__$Boot_HaxeError(new yaml_ResolveTypeException("",null,info));
	}
	,cantRepresentType: function(info) {
		throw new js__$Boot_HaxeError(new yaml_RepresentTypeException("",null,info));
	}
	,validateLoaderOptions: function() {
		if(this.loader.skip != true && "string" != this.loader.kind && "array" != this.loader.kind && "object" != this.loader.kind) {
			throw new js__$Boot_HaxeError(new yaml_YamlException("Unacceptable \"kind\" setting of a type loader: " + this.loader.kind,null,{ fileName : "YamlType.hx", lineNumber : 74, className : "yaml.YamlType", methodName : "validateLoaderOptions"}));
		}
	}
	,validateDumperOptions: function() {
		if(this.dumper.skip != true && "undefined" != this.dumper.kind && "null" != this.dumper.kind && "boolean" != this.dumper.kind && "integer" != this.dumper.kind && "float" != this.dumper.kind && "string" != this.dumper.kind && "array" != this.dumper.kind && "object" != this.dumper.kind && "binary" != this.dumper.kind && "function" != this.dumper.kind) {
			throw new js__$Boot_HaxeError(new yaml_YamlException("Unacceptable \"kind\" setting of a type dumper: " + this.dumper.kind,null,{ fileName : "YamlType.hx", lineNumber : 92, className : "yaml.YamlType", methodName : "validateDumperOptions"}));
		}
	}
	,__class__: yaml_YamlType
};
var yaml_ResolveTypeException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	yaml_YamlException.call(this,message,cause,info);
};
$hxClasses["yaml.ResolveTypeException"] = yaml_ResolveTypeException;
yaml_ResolveTypeException.__name__ = ["yaml","ResolveTypeException"];
yaml_ResolveTypeException.__super__ = yaml_YamlException;
yaml_ResolveTypeException.prototype = $extend(yaml_YamlException.prototype,{
	__class__: yaml_ResolveTypeException
});
var yaml_RepresentTypeException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	yaml_YamlException.call(this,message,cause,info);
};
$hxClasses["yaml.RepresentTypeException"] = yaml_RepresentTypeException;
yaml_RepresentTypeException.__name__ = ["yaml","RepresentTypeException"];
yaml_RepresentTypeException.__super__ = yaml_YamlException;
yaml_RepresentTypeException.prototype = $extend(yaml_YamlException.prototype,{
	__class__: yaml_RepresentTypeException
});
var yaml_schema_DefaultSchema = function() {
	yaml_Schema.call(this,[new yaml_schema_SafeSchema()],null);
};
$hxClasses["yaml.schema.DefaultSchema"] = yaml_schema_DefaultSchema;
yaml_schema_DefaultSchema.__name__ = ["yaml","schema","DefaultSchema"];
yaml_schema_DefaultSchema.__super__ = yaml_Schema;
yaml_schema_DefaultSchema.prototype = $extend(yaml_Schema.prototype,{
	__class__: yaml_schema_DefaultSchema
});
var yaml_schema_MinimalSchema = function() {
	yaml_Schema.call(this,[],[new yaml_type_YString(),new yaml_type_YSeq(),new yaml_type_YMap()]);
};
$hxClasses["yaml.schema.MinimalSchema"] = yaml_schema_MinimalSchema;
yaml_schema_MinimalSchema.__name__ = ["yaml","schema","MinimalSchema"];
yaml_schema_MinimalSchema.__super__ = yaml_Schema;
yaml_schema_MinimalSchema.prototype = $extend(yaml_Schema.prototype,{
	__class__: yaml_schema_MinimalSchema
});
var yaml_schema_SafeSchema = function() {
	yaml_Schema.call(this,[new yaml_schema_MinimalSchema()],[new yaml_type_YBinary(),new yaml_type_YOmap(),new yaml_type_YPairs(),new yaml_type_YSet()],[new yaml_type_YNull(),new yaml_type_YBool(),new yaml_type_YInt(),new yaml_type_YFloat(),new yaml_type_YTimestamp(),new yaml_type_YMerge()]);
};
$hxClasses["yaml.schema.SafeSchema"] = yaml_schema_SafeSchema;
yaml_schema_SafeSchema.__name__ = ["yaml","schema","SafeSchema"];
yaml_schema_SafeSchema.__super__ = yaml_Schema;
yaml_schema_SafeSchema.prototype = $extend(yaml_Schema.prototype,{
	__class__: yaml_schema_SafeSchema
});
var yaml_type_YBinary = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:binary",{ kind : "string"},{ kind : "binary", instanceOf : haxe_io_Bytes});
};
$hxClasses["yaml.type.YBinary"] = yaml_type_YBinary;
yaml_type_YBinary.__name__ = ["yaml","type","YBinary"];
yaml_type_YBinary.__super__ = yaml_YamlType;
yaml_type_YBinary.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(usingMaps == null) {
			usingMaps = true;
		}
		var length = object.length;
		var idx = 0;
		var result = [];
		var leftbits = 0;
		var leftdata = 0;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var idx1 = _g1++;
			var code = HxOverrides.cca(object,idx1);
			var value = yaml_type_YBinary.BASE64_BINTABLE[code & 127];
			if(10 != code && 13 != code) {
				if(-1 == value) {
					return this.cantResolveType({ fileName : "YBinary.hx", lineNumber : 49, className : "yaml.type.YBinary", methodName : "resolve"});
				}
				leftdata = leftdata << 6 | value;
				leftbits += 6;
				if(leftbits >= 8) {
					leftbits -= 8;
					if(61 != code) {
						result.push(leftdata >> leftbits & 255);
					}
					leftdata &= (1 << leftbits) - 1;
				}
			}
		}
		if(leftbits != 0) {
			this.cantResolveType({ fileName : "YBinary.hx", lineNumber : 71, className : "yaml.type.YBinary", methodName : "resolve"});
		}
		var bytes = new haxe_io_Bytes(new ArrayBuffer(result.length));
		var _g11 = 0;
		var _g2 = result.length;
		while(_g11 < _g2) {
			var i = _g11++;
			bytes.b[i] = result[i] & 255;
		}
		return bytes;
	}
	,represent: function(object,style) {
		var result = "";
		var index = 0;
		var max = object.length - 2;
		while(index < max) {
			result += yaml_type_YBinary.BASE64_CHARTABLE[object.b[index] >> 2];
			result += yaml_type_YBinary.BASE64_CHARTABLE[((object.b[index] & 3) << 4) + (object.b[index + 1] >> 4)];
			result += yaml_type_YBinary.BASE64_CHARTABLE[((object.b[index + 1] & 15) << 2) + (object.b[index + 2] >> 6)];
			result += yaml_type_YBinary.BASE64_CHARTABLE[object.b[index + 2] & 63];
			index += 3;
		}
		var rest = object.length % 3;
		if(0 != rest) {
			index = object.length - rest;
			result += yaml_type_YBinary.BASE64_CHARTABLE[object.b[index] >> 2];
			if(2 == rest) {
				result += yaml_type_YBinary.BASE64_CHARTABLE[((object.b[index] & 3) << 4) + (object.b[index + 1] >> 4)];
				result += yaml_type_YBinary.BASE64_CHARTABLE[(object.b[index + 1] & 15) << 2];
				result += "=";
			} else {
				result += yaml_type_YBinary.BASE64_CHARTABLE[(object.b[index] & 3) << 4];
				result += 61 + "=";
			}
		}
		return result;
	}
	,__class__: yaml_type_YBinary
});
var yaml_type_YBool = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:bool",{ kind : "string"},{ kind : "boolean", defaultStyle : "lowercase"});
};
$hxClasses["yaml.type.YBool"] = yaml_type_YBool;
yaml_type_YBool.__name__ = ["yaml","type","YBool"];
yaml_type_YBool.__super__ = yaml_YamlType;
yaml_type_YBool.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(explicit) {
			var _this = yaml_type_YBool.YAML_EXPLICIT_BOOLEAN_MAP;
			if(__map_reserved[object] != null ? _this.existsReserved(object) : _this.h.hasOwnProperty(object)) {
				var _this1 = yaml_type_YBool.YAML_EXPLICIT_BOOLEAN_MAP;
				if(__map_reserved[object] != null) {
					return _this1.getReserved(object);
				} else {
					return _this1.h[object];
				}
			} else {
				return this.cantResolveType({ fileName : "YBool.hx", lineNumber : 64, className : "yaml.type.YBool", methodName : "resolve"});
			}
		} else {
			var _this2 = yaml_type_YBool.YAML_IMPLICIT_BOOLEAN_MAP;
			if(__map_reserved[object] != null ? _this2.existsReserved(object) : _this2.h.hasOwnProperty(object)) {
				var _this3 = yaml_type_YBool.YAML_IMPLICIT_BOOLEAN_MAP;
				if(__map_reserved[object] != null) {
					return _this3.getReserved(object);
				} else {
					return _this3.h[object];
				}
			} else {
				return this.cantResolveType({ fileName : "YBool.hx", lineNumber : 75, className : "yaml.type.YBool", methodName : "resolve"});
			}
		}
	}
	,represent: function(object,style) {
		if(style == null) {
			throw new js__$Boot_HaxeError(new yaml_YamlException("Style not supported: " + style,null,{ fileName : "YBool.hx", lineNumber : 88, className : "yaml.type.YBool", methodName : "represent"}));
		} else {
			switch(style) {
			case "camelcase":
				if(object) {
					return "True";
				} else {
					return "False";
				}
				break;
			case "lowercase":
				if(object) {
					return "true";
				} else {
					return "false";
				}
				break;
			case "uppercase":
				if(object) {
					return "TRUE";
				} else {
					return "FALSE";
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new yaml_YamlException("Style not supported: " + style,null,{ fileName : "YBool.hx", lineNumber : 88, className : "yaml.type.YBool", methodName : "represent"}));
			}
		}
	}
	,__class__: yaml_type_YBool
});
var yaml_type_YFloat = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:float",{ kind : "string"},{ kind : "float", defaultStyle : "lowercase"});
};
$hxClasses["yaml.type.YFloat"] = yaml_type_YFloat;
yaml_type_YFloat.__name__ = ["yaml","type","YFloat"];
yaml_type_YFloat.__super__ = yaml_YamlType;
yaml_type_YFloat.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(!yaml_type_YFloat.YAML_FLOAT_PATTERN.match(object)) {
			this.cantResolveType({ fileName : "YFloat.hx", lineNumber : 23, className : "yaml.type.YFloat", methodName : "resolve"});
		}
		var value = StringTools.replace(object,"_","").toLowerCase();
		var sign = "-" == value.charAt(0) ? -1 : 1;
		if(0 <= "+-".indexOf(value.charAt(0))) {
			value = HxOverrides.substr(value,1,null);
		}
		if(".inf" == value) {
			if(1 == sign) {
				return Infinity;
			} else {
				return -Infinity;
			}
		} else if(".nan" == value) {
			return NaN;
		} else if(0 <= value.indexOf(":")) {
			var digits = [];
			var _g = 0;
			var _g1 = value.split(":");
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				digits.unshift(parseFloat(v));
			}
			var v1 = 0.0;
			var base = 1;
			var _g2 = 0;
			while(_g2 < digits.length) {
				var d = digits[_g2];
				++_g2;
				v1 += d * base;
				base *= 60;
			}
			return sign * v1;
		} else {
			return sign * parseFloat(value);
		}
	}
	,represent: function(object,style) {
		if(isNaN(object)) {
			if(style == null) {
				return ".nan";
			} else {
				switch(style) {
				case "camelcase":
					return ".NaN";
				case "lowercase":
					return ".nan";
				case "uppercase":
					return ".NAN";
				default:
					return ".nan";
				}
			}
		} else if(Infinity == object) {
			if(style == null) {
				return ".inf";
			} else {
				switch(style) {
				case "camelcase":
					return ".Inf";
				case "lowercase":
					return ".inf";
				case "uppercase":
					return ".INF";
				default:
					return ".inf";
				}
			}
		} else if(-Infinity == object) {
			if(style == null) {
				return "-.inf";
			} else {
				switch(style) {
				case "camelcase":
					return "-.Inf";
				case "lowercase":
					return "-.inf";
				case "uppercase":
					return "-.INF";
				default:
					return "-.inf";
				}
			}
		} else {
			return yaml_util_Floats.toString(object);
		}
	}
	,__class__: yaml_type_YFloat
});
var yaml_type_YInt = function() {
	var tmp = this.createStyleAliases();
	yaml_YamlType.call(this,"tag:yaml.org,2002:int",{ kind : "string"},{ kind : "integer", defaultStyle : "decimal", styleAliases : tmp});
};
$hxClasses["yaml.type.YInt"] = yaml_type_YInt;
yaml_type_YInt.__name__ = ["yaml","type","YInt"];
yaml_type_YInt.__super__ = yaml_YamlType;
yaml_type_YInt.prototype = $extend(yaml_YamlType.prototype,{
	createStyleAliases: function() {
		var styleAliases = new haxe_ds_StringMap();
		if(__map_reserved["bin"] != null) {
			styleAliases.setReserved("bin","binary");
		} else {
			styleAliases.h["bin"] = "binary";
		}
		if(__map_reserved["2"] != null) {
			styleAliases.setReserved("2","binary");
		} else {
			styleAliases.h["2"] = "binary";
		}
		if(__map_reserved["oct"] != null) {
			styleAliases.setReserved("oct","octal");
		} else {
			styleAliases.h["oct"] = "octal";
		}
		if(__map_reserved["8"] != null) {
			styleAliases.setReserved("8","octal");
		} else {
			styleAliases.h["8"] = "octal";
		}
		if(__map_reserved["dec"] != null) {
			styleAliases.setReserved("dec","decimal");
		} else {
			styleAliases.h["dec"] = "decimal";
		}
		if(__map_reserved["hex"] != null) {
			styleAliases.setReserved("hex","hexadecimal");
		} else {
			styleAliases.h["hex"] = "hexadecimal";
		}
		if(__map_reserved["16"] != null) {
			styleAliases.setReserved("16","hexadecimal");
		} else {
			styleAliases.h["16"] = "hexadecimal";
		}
		return styleAliases;
	}
	,resolve: function(object,usingMaps,explicit) {
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(!yaml_type_YInt.YAML_INTEGER_PATTERN.match(object)) {
			this.cantResolveType({ fileName : "YInt.hx", lineNumber : 38, className : "yaml.type.YInt", methodName : "resolve"});
		}
		var value = StringTools.replace(object,"_","").toLowerCase();
		var sign = "-" == value.charAt(0) ? -1 : 1;
		var digits = [];
		if(0 <= "+-".indexOf(value.charAt(0))) {
			value = HxOverrides.substr(value,1,null);
		}
		if("0" == value) {
			return 0;
		} else if(value.indexOf("0b") == 0) {
			return sign * yaml_util_Ints.parseInt(HxOverrides.substr(value,2,null),2);
		} else if(value.indexOf("0x") == 0) {
			return sign * yaml_util_Ints.parseInt(value,16);
		} else if(value.indexOf("0") == 0) {
			return sign * yaml_util_Ints.parseInt(value,8);
		} else if(0 <= value.indexOf(":")) {
			var _g = 0;
			var _g1 = value.split(":");
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				digits.unshift(yaml_util_Ints.parseInt(v,10));
			}
			var result = 0;
			var base = 1;
			var _g2 = 0;
			while(_g2 < digits.length) {
				var d = digits[_g2];
				++_g2;
				result += d * base;
				base *= 60;
			}
			return sign * result;
		} else {
			return sign * yaml_util_Ints.parseInt(value,10);
		}
	}
	,represent: function(object,style) {
		if(style == null) {
			throw new js__$Boot_HaxeError(new yaml_YamlException("Style not supported: " + style,null,{ fileName : "YInt.hx", lineNumber : 99, className : "yaml.type.YInt", methodName : "represent"}));
		} else {
			switch(style) {
			case "binary":
				return "0b" + yaml_util_Ints.toString(object,2);
			case "decimal":
				return yaml_util_Ints.toString(object,10);
			case "hexadecimal":
				return "0x" + yaml_util_Ints.toString(object,16);
			case "octal":
				return "0" + yaml_util_Ints.toString(object,8);
			default:
				throw new js__$Boot_HaxeError(new yaml_YamlException("Style not supported: " + style,null,{ fileName : "YInt.hx", lineNumber : 99, className : "yaml.type.YInt", methodName : "represent"}));
			}
		}
	}
	,__class__: yaml_type_YInt
});
var yaml_type_YMap = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:map",{ kind : "object", skip : true},{ skip : true});
};
$hxClasses["yaml.type.YMap"] = yaml_type_YMap;
yaml_type_YMap.__name__ = ["yaml","type","YMap"];
yaml_type_YMap.__super__ = yaml_YamlType;
yaml_type_YMap.prototype = $extend(yaml_YamlType.prototype,{
	__class__: yaml_type_YMap
});
var yaml_type_YMerge = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:merge",{ kind : "string"},{ skip : true});
};
$hxClasses["yaml.type.YMerge"] = yaml_type_YMerge;
yaml_type_YMerge.__name__ = ["yaml","type","YMerge"];
yaml_type_YMerge.__super__ = yaml_YamlType;
yaml_type_YMerge.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(usingMaps == null) {
			usingMaps = true;
		}
		if("<<" == object) {
			return object;
		} else {
			return this.cantResolveType({ fileName : "YMerge.hx", lineNumber : 14, className : "yaml.type.YMerge", methodName : "resolve"});
		}
	}
	,represent: function(object,style) {
		return null;
	}
	,__class__: yaml_type_YMerge
});
var yaml_type_YNull = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:null",{ kind : "string"},{ kind : "null", defaultStyle : "lowercase"});
};
$hxClasses["yaml.type.YNull"] = yaml_type_YNull;
yaml_type_YNull.__name__ = ["yaml","type","YNull"];
yaml_type_YNull.__super__ = yaml_YamlType;
yaml_type_YNull.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(explicit == null) {
			explicit = false;
		}
		if(usingMaps == null) {
			usingMaps = true;
		}
		var _this = yaml_type_YNull.YAML_NULL_MAP;
		if(__map_reserved[object] != null ? _this.existsReserved(object) : _this.h.hasOwnProperty(object)) {
			return null;
		} else {
			return this.cantResolveType({ fileName : "YNull.hx", lineNumber : 24, className : "yaml.type.YNull", methodName : "resolve"});
		}
	}
	,represent: function(object,style) {
		if(style == null) {
			return "~";
		} else {
			switch(style) {
			case "camelcase":
				return "Null";
			case "canonical":
				return "~";
			case "lowercase":
				return "null";
			case "uppercase":
				return "NULL";
			default:
				return "~";
			}
		}
	}
	,__class__: yaml_type_YNull
});
var yaml_type_YOmap = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:omap",{ kind : "array"},{ skip : true});
};
$hxClasses["yaml.type.YOmap"] = yaml_type_YOmap;
yaml_type_YOmap.__name__ = ["yaml","type","YOmap"];
yaml_type_YOmap.__super__ = yaml_YamlType;
yaml_type_YOmap.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(explicit == null) {
			explicit = false;
		}
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(usingMaps) {
			this.validateOMap(object);
		} else {
			this.validateObjectOMap(object);
		}
		return object;
	}
	,validateOMap: function(object) {
		var objectKeys = new yaml_util_TObjectMap();
		var _g = 0;
		while(_g < object.length) {
			var pair = object[_g];
			++_g;
			var pairHasKey = false;
			var pairKey = null;
			if(!js_Boot.__instanceof(pair,yaml_util_TObjectMap)) {
				this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 31, className : "yaml.type.YOmap", methodName : "validateOMap"});
			}
			var key = pair.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(pairKey == null) {
					pairKey = key1;
				} else {
					this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 36, className : "yaml.type.YOmap", methodName : "validateOMap"});
				}
			}
			if(pairKey == null) {
				this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 40, className : "yaml.type.YOmap", methodName : "validateOMap"});
			}
			if(objectKeys.exists(pairKey)) {
				this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 43, className : "yaml.type.YOmap", methodName : "validateOMap"});
			} else {
				objectKeys.set(pairKey,null);
			}
		}
		return object;
	}
	,validateObjectOMap: function(object) {
		var objectKeys = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < object.length) {
			var pair = object[_g];
			++_g;
			var pairHasKey = false;
			var pairKey = null;
			if(Type["typeof"](pair) != ValueType.TObject) {
				this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 60, className : "yaml.type.YOmap", methodName : "validateObjectOMap"});
			}
			var _g1 = 0;
			var _g2 = Reflect.fields(pair);
			while(_g1 < _g2.length) {
				var key = _g2[_g1];
				++_g1;
				if(pairKey == null) {
					pairKey = key;
				} else {
					this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 65, className : "yaml.type.YOmap", methodName : "validateObjectOMap"});
				}
			}
			if(pairKey == null) {
				this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 69, className : "yaml.type.YOmap", methodName : "validateObjectOMap"});
			}
			if(__map_reserved[pairKey] != null ? objectKeys.existsReserved(pairKey) : objectKeys.h.hasOwnProperty(pairKey)) {
				this.cantResolveType({ fileName : "YOmap.hx", lineNumber : 72, className : "yaml.type.YOmap", methodName : "validateObjectOMap"});
			} else if(__map_reserved[pairKey] != null) {
				objectKeys.setReserved(pairKey,null);
			} else {
				objectKeys.h[pairKey] = null;
			}
		}
	}
	,__class__: yaml_type_YOmap
});
var yaml_type_YPairs = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:pairs",{ kind : "array"},{ skip : true});
};
$hxClasses["yaml.type.YPairs"] = yaml_type_YPairs;
yaml_type_YPairs.__name__ = ["yaml","type","YPairs"];
yaml_type_YPairs.__super__ = yaml_YamlType;
yaml_type_YPairs.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(explicit == null) {
			explicit = false;
		}
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(usingMaps) {
			return this.resolveMapPair(object);
		} else {
			return this.resolveObjectPair(object);
		}
	}
	,resolveMapPair: function(object) {
		var result = [];
		var _g = 0;
		while(_g < object.length) {
			var pair = object[_g];
			++_g;
			if(!js_Boot.__instanceof(pair,yaml_util_TObjectMap)) {
				this.cantResolveType({ fileName : "YPairs.hx", lineNumber : 28, className : "yaml.type.YPairs", methodName : "resolveMapPair"});
			}
			var fieldCount = 0;
			var keyPair = null;
			var key = pair.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				keyPair = key1;
				if(fieldCount++ > 1) {
					break;
				}
			}
			if(fieldCount != 1) {
				this.cantResolveType({ fileName : "YPairs.hx", lineNumber : 39, className : "yaml.type.YPairs", methodName : "resolveMapPair"});
			}
			result.push([keyPair,pair.get(keyPair)]);
		}
		return result;
	}
	,resolveObjectPair: function(object) {
		var result = [];
		var _g = 0;
		while(_g < object.length) {
			var pair = object[_g];
			++_g;
			if(Type["typeof"](pair) != ValueType.TObject) {
				this.cantResolveType({ fileName : "YPairs.hx", lineNumber : 52, className : "yaml.type.YPairs", methodName : "resolveObjectPair"});
			}
			var fieldCount = 0;
			var keyPair = null;
			var _g1 = 0;
			var _g2 = Reflect.fields(pair);
			while(_g1 < _g2.length) {
				var key = _g2[_g1];
				++_g1;
				keyPair = key;
				if(fieldCount++ > 1) {
					break;
				}
			}
			if(fieldCount != 1) {
				this.cantResolveType({ fileName : "YPairs.hx", lineNumber : 63, className : "yaml.type.YPairs", methodName : "resolveObjectPair"});
			}
			result.push([keyPair,Reflect.field(pair,keyPair)]);
		}
		return result;
	}
	,__class__: yaml_type_YPairs
});
var yaml_type_YSeq = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:seq",{ kind : "array", skip : true},{ skip : true});
};
$hxClasses["yaml.type.YSeq"] = yaml_type_YSeq;
yaml_type_YSeq.__name__ = ["yaml","type","YSeq"];
yaml_type_YSeq.__super__ = yaml_YamlType;
yaml_type_YSeq.prototype = $extend(yaml_YamlType.prototype,{
	__class__: yaml_type_YSeq
});
var yaml_type_YSet = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:set",{ kind : "object"},{ skip : true});
};
$hxClasses["yaml.type.YSet"] = yaml_type_YSet;
yaml_type_YSet.__name__ = ["yaml","type","YSet"];
yaml_type_YSet.__super__ = yaml_YamlType;
yaml_type_YSet.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(explicit == null) {
			explicit = false;
		}
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(usingMaps) {
			this.validateSet(object);
		} else {
			this.validateObjectSet(object);
		}
		return object;
	}
	,validateSet: function(object) {
		var key = object.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(object.get(key1) != null) {
				this.cantResolveType({ fileName : "YSet.hx", lineNumber : 24, className : "yaml.type.YSet", methodName : "validateSet"});
			}
		}
	}
	,validateObjectSet: function(object) {
		var _g = 0;
		var _g1 = Reflect.fields(object);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(Reflect.field(object,key) != null) {
				this.cantResolveType({ fileName : "YSet.hx", lineNumber : 31, className : "yaml.type.YSet", methodName : "validateObjectSet"});
			}
		}
	}
	,__class__: yaml_type_YSet
});
var yaml_type_YString = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:str",{ kind : "string", skip : true},{ skip : true});
};
$hxClasses["yaml.type.YString"] = yaml_type_YString;
yaml_type_YString.__name__ = ["yaml","type","YString"];
yaml_type_YString.__super__ = yaml_YamlType;
yaml_type_YString.prototype = $extend(yaml_YamlType.prototype,{
	__class__: yaml_type_YString
});
var yaml_type_YTimestamp = function() {
	yaml_YamlType.call(this,"tag:yaml.org,2002:timestamp",{ kind : "string"},{ kind : "object", instanceOf : Date});
};
$hxClasses["yaml.type.YTimestamp"] = yaml_type_YTimestamp;
yaml_type_YTimestamp.__name__ = ["yaml","type","YTimestamp"];
yaml_type_YTimestamp.nativeDate = function() {
	return Date;
};
yaml_type_YTimestamp.__super__ = yaml_YamlType;
yaml_type_YTimestamp.prototype = $extend(yaml_YamlType.prototype,{
	resolve: function(object,usingMaps,explicit) {
		if(explicit == null) {
			explicit = false;
		}
		if(usingMaps == null) {
			usingMaps = true;
		}
		if(!yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.match(object)) {
			this.cantResolveType({ fileName : "YTimestamp.hx", lineNumber : 28, className : "yaml.type.YTimestamp", methodName : "resolve"});
		}
		var year = 0;
		var month = 0;
		var day = 0;
		var hour = 0;
		var minute = 0;
		var second = 0;
		var fraction = 0;
		var delta = 0;
		try {
			year = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(1));
			month = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(2)) - 1;
			day = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(3));
			hour = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(4));
			minute = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(5));
			second = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(6));
			var matched = -1;
			if(year == null) {
				year = 0;
				matched = year;
			}
			if(month == null) {
				month = 0;
				matched = month;
			}
			if(day == null) {
				day = 0;
				matched = day;
			}
			if(hour == null) {
				hour = 0;
				matched = hour;
			}
			if(minute == null) {
				minute = 0;
				matched = minute;
			}
			if(second == null) {
				second = 0;
				matched = second;
			}
			if(matched == 0) {
				throw new js__$Boot_HaxeError("Nothing left to match");
			}
			var msecs = yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(7);
			if(msecs == null) {
				throw new js__$Boot_HaxeError("Nothing left to match");
			}
			var f = msecs.substring(0,3);
			while(f.length < 3) f += "0";
			fraction = Std.parseInt(f);
			if(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(9) != null) {
				var tz_hour = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(10));
				if(tz_hour == null) {
					throw new js__$Boot_HaxeError("Nothing left to match");
				}
				var tz_minute = 0;
				try {
					tz_minute = Std.parseInt(yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(11));
					if(tz_minute == null) {
						tz_minute = 0;
					}
				} catch( e ) {
				}
				delta = (tz_hour * 60 + tz_minute) * 60000;
				if("-" == yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP.matched(9)) {
					delta = -delta;
				}
			}
		} catch( e1 ) {
		}
		var stamp = yaml_type_YTimestamp.nativeDate().UTC(year,month,day,hour,minute,second,fraction);
		if(delta != 0) {
			stamp -= delta;
		}
		return new Date(stamp);
	}
	,represent: function(object,style) {
		return yaml_util_Dates.toISOString(object);
	}
	,__class__: yaml_type_YTimestamp
});
var yaml_util_Dates = function() { };
$hxClasses["yaml.util.Dates"] = yaml_util_Dates;
yaml_util_Dates.__name__ = ["yaml","util","Dates"];
yaml_util_Dates.getNativeDate = function() {
	return Date;
};
yaml_util_Dates.toISOString = function(date) {
	var NativeDate = yaml_util_Dates.getNativeDate();
	var d = new NativeDate(date.getTime());
	return d.getUTCFullYear() + "-" + StringTools.lpad("" + (d.getUTCMonth() + 1),"0",2) + "-" + StringTools.lpad("" + d.getUTCDate(),"0",2) + "T" + StringTools.lpad("" + d.getUTCHours(),"0",2) + ":" + StringTools.lpad("" + d.getUTCMinutes(),"0",2) + ":" + StringTools.lpad("" + d.getUTCSeconds(),"0",2) + "." + StringTools.rpad(HxOverrides.substr("" + yaml_util_Floats.round(d.getUTCMilliseconds() / 1000,3),2,5),"0",3) + "Z";
};
var yaml_util_Floats = function() { };
$hxClasses["yaml.util.Floats"] = yaml_util_Floats;
yaml_util_Floats.__name__ = ["yaml","util","Floats"];
yaml_util_Floats.toString = function(value) {
	if(value == null) {
		return "null";
	} else {
		return "" + value;
	}
};
yaml_util_Floats.round = function(value,precision) {
	value *= Math.pow(10,precision);
	return Math.round(value) / Math.pow(10,precision);
};
var yaml_util_Ints = function() { };
$hxClasses["yaml.util.Ints"] = yaml_util_Ints;
yaml_util_Ints.__name__ = ["yaml","util","Ints"];
yaml_util_Ints.toString = function(value,radix) {
	if(radix == null) {
		radix = 10;
	}
	if(radix < 2 || radix > yaml_util_Ints.BASE.length) {
		throw new js__$Boot_HaxeError("Unsupported radix " + radix);
	}
	return value.toString(radix);
};
yaml_util_Ints.parseInt = function(value,radix) {
	if(radix != null && (radix < 2 || radix > yaml_util_Ints.BASE.length)) {
		throw new js__$Boot_HaxeError("Unsupported radix " + radix);
	}
	var v = parseInt(value,radix);
	if(isNaN(v)) {
		return null;
	} else {
		return v;
	}
};
var yaml_util_TObjectMap = function(weakKeys) {
	if(weakKeys == null) {
		weakKeys = false;
	}
	this._keys = [];
	this.values = [];
};
$hxClasses["yaml.util.TObjectMap"] = yaml_util_TObjectMap;
yaml_util_TObjectMap.__name__ = ["yaml","util","TObjectMap"];
yaml_util_TObjectMap.prototype = {
	_keys: null
	,values: null
	,set: function(key,value) {
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._keys[i] == key) {
				this._keys[i] = key;
				this.values[i] = value;
				return;
			}
		}
		this._keys.push(key);
		this.values.push(value);
	}
	,get: function(key) {
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._keys[i] == key) {
				return this.values[i];
			}
		}
		return null;
	}
	,exists: function(key) {
		var _g = 0;
		var _g1 = this._keys;
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			if(k == key) {
				return true;
			}
		}
		return false;
	}
	,remove: function(key) {
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._keys[i] == key) {
				this._keys.splice(i,1);
				this.values.splice(i,1);
				return true;
			}
		}
		return false;
	}
	,keys: function() {
		return HxOverrides.iter(this._keys);
	}
	,iterator: function() {
		return HxOverrides.iter(this.values);
	}
	,toString: function() {
		var s = "{";
		var ks = this._keys;
		var vs = this.values;
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = (ks[i] instanceof Array) && ks[i].__enum__ == null ? "[" + ks[i] + "]" : ks[i];
			var v = (vs[i] instanceof Array) && vs[i].__enum__ == null ? "[" + vs[i] + "]" : vs[i];
			s += k + " => " + v + ", ";
		}
		if(this._keys.length > 0) {
			s = HxOverrides.substr(s,0,s.length - 2);
		}
		return s + "}";
	}
	,__class__: yaml_util_TObjectMap
};
var yaml_util_Strings = function() { };
$hxClasses["yaml.util.Strings"] = yaml_util_Strings;
yaml_util_Strings.__name__ = ["yaml","util","Strings"];
yaml_util_Strings.repeat = function(source,times) {
	var result = "";
	var _g1 = 0;
	var _g = times;
	while(_g1 < _g) {
		var i = _g1++;
		result += source;
	}
	return result;
};
var yaml_util_Utf8 = function() { };
$hxClasses["yaml.util.Utf8"] = yaml_util_Utf8;
yaml_util_Utf8.__name__ = ["yaml","util","Utf8"];
yaml_util_Utf8.substring = function(value,startIndex,endIndex) {
	var size = value.length;
	var pos = startIndex;
	var length = 0;
	if(endIndex == null) {
		length = size - pos;
	} else {
		if(startIndex > endIndex) {
			pos = endIndex;
			endIndex = startIndex;
		}
		length = endIndex - pos;
	}
	return HxOverrides.substr(value,pos,length);
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
$hxClasses["Math"] = Math;
var __map_reserved = {};
Console.formatMode = Console.determineConsoleFormatMode();
Console.logPrefix = "<b,gray>><//> ";
Console.warnPrefix = "<b,yellow>><//> ";
Console.errorPrefix = "<b,red>></b> ";
Console.successPrefix = "<b,light_green>><//> ";
Console.debugPrefix = "<b,magenta>><//> ";
Console.argSeparator = " ";
Console.unicodeCompatibilityMode = Sys.systemName() == "Windows" ? 1 : 0;
Console.unicodeCompatibilityEnabled = false;
Console.formatTagPattern = new EReg("<(/)?([^><{}\\s]*|{[^}<>]*})>","g");
_$Console_FormatFlag_$Impl_$.RESET = "reset";
_$Console_FormatFlag_$Impl_$.BOLD = "bold";
_$Console_FormatFlag_$Impl_$.ITALIC = "italic";
_$Console_FormatFlag_$Impl_$.DIM = "dim";
_$Console_FormatFlag_$Impl_$.UNDERLINE = "underline";
_$Console_FormatFlag_$Impl_$.BLINK = "blink";
_$Console_FormatFlag_$Impl_$.INVERT = "invert";
_$Console_FormatFlag_$Impl_$.HIDDEN = "hidden";
_$Console_FormatFlag_$Impl_$.BLACK = "black";
_$Console_FormatFlag_$Impl_$.RED = "red";
_$Console_FormatFlag_$Impl_$.GREEN = "green";
_$Console_FormatFlag_$Impl_$.YELLOW = "yellow";
_$Console_FormatFlag_$Impl_$.BLUE = "blue";
_$Console_FormatFlag_$Impl_$.MAGENTA = "magenta";
_$Console_FormatFlag_$Impl_$.CYAN = "cyan";
_$Console_FormatFlag_$Impl_$.WHITE = "white";
_$Console_FormatFlag_$Impl_$.LIGHT_BLACK = "light_black";
_$Console_FormatFlag_$Impl_$.LIGHT_RED = "light_red";
_$Console_FormatFlag_$Impl_$.LIGHT_GREEN = "light_green";
_$Console_FormatFlag_$Impl_$.LIGHT_YELLOW = "light_yellow";
_$Console_FormatFlag_$Impl_$.LIGHT_BLUE = "light_blue";
_$Console_FormatFlag_$Impl_$.LIGHT_MAGENTA = "light_magenta";
_$Console_FormatFlag_$Impl_$.LIGHT_CYAN = "light_cyan";
_$Console_FormatFlag_$Impl_$.LIGHT_WHITE = "light_white";
_$Console_FormatFlag_$Impl_$.BG_BLACK = "bg_black";
_$Console_FormatFlag_$Impl_$.BG_RED = "bg_red";
_$Console_FormatFlag_$Impl_$.BG_GREEN = "bg_green";
_$Console_FormatFlag_$Impl_$.BG_YELLOW = "bg_yellow";
_$Console_FormatFlag_$Impl_$.BG_BLUE = "bg_blue";
_$Console_FormatFlag_$Impl_$.BG_MAGENTA = "bg_magenta";
_$Console_FormatFlag_$Impl_$.BG_CYAN = "bg_cyan";
_$Console_FormatFlag_$Impl_$.BG_WHITE = "bg_white";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_BLACK = "bg_light_black";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_RED = "bg_light_red";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_GREEN = "bg_light_green";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_YELLOW = "bg_light_yellow";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_BLUE = "bg_light_blue";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_MAGENTA = "bg_light_magenta";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_CYAN = "bg_light_cyan";
_$Console_FormatFlag_$Impl_$.BG_LIGHT_WHITE = "bg_light_white";
mustache_Writer.entityMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["&"] != null) {
		_g.setReserved("&","&amp;");
	} else {
		_g.h["&"] = "&amp;";
	}
	if(__map_reserved["<"] != null) {
		_g.setReserved("<","&lt;");
	} else {
		_g.h["<"] = "&lt;";
	}
	if(__map_reserved[">"] != null) {
		_g.setReserved(">","&gt;");
	} else {
		_g.h[">"] = "&gt;";
	}
	if(__map_reserved["\""] != null) {
		_g.setReserved("\"","&quot;");
	} else {
		_g.h["\""] = "&quot;";
	}
	if(__map_reserved["'"] != null) {
		_g.setReserved("'","&#39;");
	} else {
		_g.h["'"] = "&#39;";
	}
	if(__map_reserved["/"] != null) {
		_g.setReserved("/","&#x2F;");
	} else {
		_g.h["/"] = "&#x2F;";
	}
	if(__map_reserved["`"] != null) {
		_g.setReserved("`","&#x60;");
	} else {
		_g.h["`"] = "&#x60;";
	}
	if(__map_reserved["="] != null) {
		_g.setReserved("=","&#x3D;");
	} else {
		_g.h["="] = "&#x3D;";
	}
	$r = _g;
	return $r;
}(this));
mustache_Writer.escapeRe = new EReg("[&<>\"'`=/]","g");
Mustache.tags = ["{{","}}"];
Mustache.defaultWriter = new mustache_Writer();
Xml.Element = 0;
Xml.PCData = 1;
Xml.Document = 6;
haxe_ds_ObjectMap.count = 0;
hscript_Parser.p1 = 0;
hscript_Parser.readPos = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
js_Boot.__toStr = ({ }).toString;
markdown_BlockSyntax.RE_EMPTY = new EReg("^([ \\t]*)$","");
markdown_BlockSyntax.RE_SETEXT = new EReg("^((=+)|(-+))$","");
markdown_BlockSyntax.RE_HEADER = new EReg("^(#{1,6})(.*?)#*$","");
markdown_BlockSyntax.RE_BLOCKQUOTE = new EReg("^[ ]{0,3}>[ ]?(.*)$","");
markdown_BlockSyntax.RE_INDENT = new EReg("^(?:    |\t)(.*)$","");
markdown_BlockSyntax.RE_CODE = new EReg("^```(\\w*)\\s*$","");
markdown_BlockSyntax.RE_HR = new EReg("^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\*+[ ]{0,2}){3,})$","");
markdown_BlockSyntax.RE_HTML = new EReg("^<[ ]*\\w+[ >]","");
markdown_BlockSyntax.RE_UL = new EReg("^[ ]{0,3}[*+-][ \\t]+(.*)$","");
markdown_BlockSyntax.RE_OL = new EReg("^[ ]{0,3}\\d+\\.[ \\t]+(.*)$","");
markdown_TableSyntax.TABLE_PATTERN = new EReg("^(.+? +:?\\|:? +)+(.+)$","");
markdown_TableSyntax.CELL_PATTERN = new EReg("(\\|)?([^\\|]+)(\\|)?","g");
markdown_HtmlRenderer.BLOCK_TAGS = new EReg("blockquote|h1|h2|h3|h4|h5|h6|hr|p|pre","");
markdown_HtmlRenderer.attributeOrder = ["src","alt"];
markdown_LinkSyntax.linkPattern = "\\](?:(" + "\\s?\\[([^\\]]*)\\]" + "|" + "\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\)" + ")|)";
markdown_ImgSyntax.linkPattern = "\\](?:(" + "\\s?\\[([^\\]]*)\\]" + "|" + "\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\)" + ")|)";
markdown_InlineParser.defaultSyntaxes = [new markdown_AutolinkSyntaxWithoutBrackets(),new markdown_TextSyntax(" {2,}\n","<br />\n"),new markdown_TextSyntax("\\s*[A-Za-z0-9]+"),new markdown_AutolinkSyntax(),new markdown_LinkSyntax(),new markdown_ImgSyntax(),new markdown_TextSyntax(" \\* "),new markdown_TextSyntax(" _ "),new markdown_TextSyntax("&[#a-zA-Z0-9]*;"),new markdown_TextSyntax("&","&amp;"),new markdown_TextSyntax("</?\\w+.*?>"),new markdown_TextSyntax("<","&lt;"),new markdown_TagSyntax("\\*\\*","strong"),new markdown_TagSyntax("__","strong"),new markdown_TagSyntax("\\*","em"),new markdown_TagSyntax("\\b_","em","_\\b"),new markdown_CodeSyntax("``\\s?((?:.|\\n)*?)\\s?``"),new markdown_CodeSyntax("`([^`]*)`")];
mustache_Parser.escapeRegExpRe = new EReg("[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]","g");
mustache_Parser.tagRe = new EReg("#|\\^|/|>|\\{|&|=|<|\\$|!","");
mustache_Parser.whiteRe = new EReg("\\s*","");
mustache_Parser.spaceRe = new EReg("\\s+","");
mustache_Parser.equalsRe = new EReg("\\s*=","");
mustache_Parser.curlyRe = new EReg("\\s*\\}","");
nice_Create.DEFAULT_POST_FRONTMATTER = "---\ntitle: New Post\n---\n";
nice_Create.DEFAULT_PAGE_FRONTMATTER = "---\ntitle: New Page\n---\n";
nice_Create.DEFAULT_CONTENT = "Add some content here.";
nice_Create.DEFAULT_LAYOUT = "<html>\n<body>\n<h1>My cool blog!</h1>\n<h3>{{title}}</h3>\n<p>{{{body}}}</p>\n<hr>\n<h2>Other posts</h2>\n<ul>\n{{#posts}}\n<li><a href=\"/_posts/{{name}}\">{{title}}</a></li>\n{{/posts}}\n</ul>\n</body>\n</html>";
nice_cli_Output.prefix = "<red>==></> ";
nice_cli_Output.errorPrefix = "**";
nice_cli_Output.warningPrefix = "!!";
nice_cli_commands_DefaultCommand.logo = "d8b   db d888888b  .o88b. d88888b\n888o  88   `88'   d8P  Y8 88'\n88V8o 88    88    8P      88ooooo\n88 V8o88    88    8b      88~~~~~\n88  V888   .88.   Y8b  d8 88.\nVP   V8P Y888888P  `Y88P' Y88888P";
nice_lib_util_Platform.DEFAULT = "DEFAULT";
nice_lib_util_Platform.GITHUB_PAGES = "GITHUB_PAGES";
sys_io_File.copyBuf = js_node_buffer_Buffer.alloc(65536);
yaml_Parser.KIND_STRING = "string";
yaml_Parser.KIND_ARRAY = "array";
yaml_Parser.KIND_OBJECT = "object";
yaml_Parser.CONTEXT_FLOW_IN = 1;
yaml_Parser.CONTEXT_FLOW_OUT = 2;
yaml_Parser.CONTEXT_BLOCK_IN = 3;
yaml_Parser.CONTEXT_BLOCK_OUT = 4;
yaml_Parser.CHOMPING_CLIP = 1;
yaml_Parser.CHOMPING_STRIP = 2;
yaml_Parser.CHOMPING_KEEP = 3;
yaml_Parser.CHAR_TAB = 9;
yaml_Parser.CHAR_LINE_FEED = 10;
yaml_Parser.CHAR_CARRIAGE_RETURN = 13;
yaml_Parser.CHAR_SPACE = 32;
yaml_Parser.CHAR_EXCLAMATION = 33;
yaml_Parser.CHAR_DOUBLE_QUOTE = 34;
yaml_Parser.CHAR_SHARP = 35;
yaml_Parser.CHAR_PERCENT = 37;
yaml_Parser.CHAR_AMPERSAND = 38;
yaml_Parser.CHAR_SINGLE_QUOTE = 39;
yaml_Parser.CHAR_ASTERISK = 42;
yaml_Parser.CHAR_PLUS = 43;
yaml_Parser.CHAR_COMMA = 44;
yaml_Parser.CHAR_MINUS = 45;
yaml_Parser.CHAR_DOT = 46;
yaml_Parser.CHAR_SLASH = 47;
yaml_Parser.CHAR_DIGIT_ZERO = 48;
yaml_Parser.CHAR_DIGIT_ONE = 49;
yaml_Parser.CHAR_DIGIT_NINE = 57;
yaml_Parser.CHAR_COLON = 58;
yaml_Parser.CHAR_LESS_THAN = 60;
yaml_Parser.CHAR_GREATER_THAN = 62;
yaml_Parser.CHAR_QUESTION = 63;
yaml_Parser.CHAR_COMMERCIAL_AT = 64;
yaml_Parser.CHAR_CAPITAL_A = 65;
yaml_Parser.CHAR_CAPITAL_F = 70;
yaml_Parser.CHAR_CAPITAL_L = 76;
yaml_Parser.CHAR_CAPITAL_N = 78;
yaml_Parser.CHAR_CAPITAL_P = 80;
yaml_Parser.CHAR_CAPITAL_U = 85;
yaml_Parser.CHAR_LEFT_SQUARE_BRACKET = 91;
yaml_Parser.CHAR_BACKSLASH = 92;
yaml_Parser.CHAR_RIGHT_SQUARE_BRACKET = 93;
yaml_Parser.CHAR_UNDERSCORE = 95;
yaml_Parser.CHAR_GRAVE_ACCENT = 96;
yaml_Parser.CHAR_SMALL_A = 97;
yaml_Parser.CHAR_SMALL_B = 98;
yaml_Parser.CHAR_SMALL_E = 101;
yaml_Parser.CHAR_SMALL_F = 102;
yaml_Parser.CHAR_SMALL_N = 110;
yaml_Parser.CHAR_SMALL_R = 114;
yaml_Parser.CHAR_SMALL_T = 116;
yaml_Parser.CHAR_SMALL_U = 117;
yaml_Parser.CHAR_SMALL_V = 118;
yaml_Parser.CHAR_SMALL_X = 120;
yaml_Parser.CHAR_LEFT_CURLY_BRACKET = 123;
yaml_Parser.CHAR_VERTICAL_LINE = 124;
yaml_Parser.CHAR_RIGHT_CURLY_BRACKET = 125;
yaml_Parser.SIMPLE_ESCAPE_SEQUENCES = (function($this) {
	var $r;
	var hash = new haxe_ds_IntMap();
	{
		var value = yaml_Parser.createUtf8Char(0);
		hash.h[48] = value;
	}
	{
		var value1 = yaml_Parser.createUtf8Char(7);
		hash.h[97] = value1;
	}
	{
		var value2 = yaml_Parser.createUtf8Char(8);
		hash.h[98] = value2;
	}
	{
		var value3 = yaml_Parser.createUtf8Char(9);
		hash.h[116] = value3;
	}
	{
		var value4 = yaml_Parser.createUtf8Char(9);
		hash.h[9] = value4;
	}
	{
		var value5 = yaml_Parser.createUtf8Char(10);
		hash.h[110] = value5;
	}
	{
		var value6 = yaml_Parser.createUtf8Char(11);
		hash.h[118] = value6;
	}
	{
		var value7 = yaml_Parser.createUtf8Char(12);
		hash.h[102] = value7;
	}
	{
		var value8 = yaml_Parser.createUtf8Char(13);
		hash.h[114] = value8;
	}
	{
		var value9 = yaml_Parser.createUtf8Char(27);
		hash.h[101] = value9;
	}
	{
		var value10 = yaml_Parser.createUtf8Char(32);
		hash.h[32] = value10;
	}
	{
		var value11 = yaml_Parser.createUtf8Char(34);
		hash.h[34] = value11;
	}
	{
		var value12 = yaml_Parser.createUtf8Char(47);
		hash.h[47] = value12;
	}
	{
		var value13 = yaml_Parser.createUtf8Char(92);
		hash.h[92] = value13;
	}
	{
		var value14 = yaml_Parser.createUtf8Char(133);
		hash.h[78] = value14;
	}
	{
		var value15 = yaml_Parser.createUtf8Char(160);
		hash.h[95] = value15;
	}
	{
		var value16 = yaml_Parser.createUtf8Char(8232);
		hash.h[76] = value16;
	}
	{
		var value17 = yaml_Parser.createUtf8Char(8233);
		hash.h[80] = value17;
	}
	$r = hash;
	return $r;
}(this));
yaml_Parser.HEXADECIMAL_ESCAPE_SEQUENCES = (function($this) {
	var $r;
	var hash = new haxe_ds_IntMap();
	hash.h[120] = 2;
	hash.h[117] = 4;
	hash.h[85] = 8;
	$r = hash;
	return $r;
}(this));
yaml_Parser.PATTERN_NON_PRINTABLE = new EReg("[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uD800-\\uDFFF\\uFFFE\\uFFFF]","u");
yaml_Parser.PATTERN_NON_ASCII_LINE_BREAKS = new EReg("[\\x85\\u2028\\u2029]","u");
yaml_Parser.PATTERN_FLOW_INDICATORS = new EReg("[,\\[\\]\\{\\}]","u");
yaml_Parser.PATTERN_TAG_HANDLE = new EReg("^(?:!|!!|![a-z\\-]+!)$","iu");
yaml_Parser.PATTERN_TAG_URI = new EReg("^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$","iu");
yaml_Renderer.CHAR_TAB = 9;
yaml_Renderer.CHAR_LINE_FEED = 10;
yaml_Renderer.CHAR_CARRIAGE_RETURN = 13;
yaml_Renderer.CHAR_SPACE = 32;
yaml_Renderer.CHAR_EXCLAMATION = 33;
yaml_Renderer.CHAR_DOUBLE_QUOTE = 34;
yaml_Renderer.CHAR_SHARP = 35;
yaml_Renderer.CHAR_PERCENT = 37;
yaml_Renderer.CHAR_AMPERSAND = 38;
yaml_Renderer.CHAR_SINGLE_QUOTE = 39;
yaml_Renderer.CHAR_ASTERISK = 42;
yaml_Renderer.CHAR_COMMA = 44;
yaml_Renderer.CHAR_MINUS = 45;
yaml_Renderer.CHAR_COLON = 58;
yaml_Renderer.CHAR_GREATER_THAN = 62;
yaml_Renderer.CHAR_QUESTION = 63;
yaml_Renderer.CHAR_COMMERCIAL_AT = 64;
yaml_Renderer.CHAR_LEFT_SQUARE_BRACKET = 91;
yaml_Renderer.CHAR_RIGHT_SQUARE_BRACKET = 93;
yaml_Renderer.CHAR_GRAVE_ACCENT = 96;
yaml_Renderer.CHAR_LEFT_CURLY_BRACKET = 123;
yaml_Renderer.CHAR_VERTICAL_LINE = 124;
yaml_Renderer.CHAR_RIGHT_CURLY_BRACKET = 125;
yaml_Renderer.HEX_VALUES = "0123456789ABCDEF";
yaml_Renderer.ESCAPE_SEQUENCES = (function($this) {
	var $r;
	var hash = new haxe_ds_IntMap();
	hash.h[0] = "\\0";
	hash.h[7] = "\\a";
	hash.h[8] = "\\b";
	hash.h[9] = "\\t";
	hash.h[10] = "\\n";
	hash.h[11] = "\\v";
	hash.h[12] = "\\f";
	hash.h[13] = "\\r";
	hash.h[27] = "\\e";
	hash.h[34] = "\\\"";
	hash.h[92] = "\\\\";
	hash.h[133] = "\\N";
	hash.h[160] = "\\_";
	hash.h[8232] = "\\L";
	hash.h[8233] = "\\P";
	$r = hash;
	return $r;
}(this));
yaml_type_YBinary.BASE64_PADDING_CODE = 61;
yaml_type_YBinary.BASE64_PADDING_CHAR = "=";
yaml_type_YBinary.BASE64_BINTABLE = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,0,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1];
yaml_type_YBinary.BASE64_CHARTABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
yaml_type_YBool.YAML_IMPLICIT_BOOLEAN_MAP = (function($this) {
	var $r;
	var hash = new haxe_ds_StringMap();
	if(__map_reserved["true"] != null) {
		hash.setReserved("true",true);
	} else {
		hash.h["true"] = true;
	}
	if(__map_reserved["True"] != null) {
		hash.setReserved("True",true);
	} else {
		hash.h["True"] = true;
	}
	if(__map_reserved["TRUE"] != null) {
		hash.setReserved("TRUE",true);
	} else {
		hash.h["TRUE"] = true;
	}
	if(__map_reserved["false"] != null) {
		hash.setReserved("false",false);
	} else {
		hash.h["false"] = false;
	}
	if(__map_reserved["False"] != null) {
		hash.setReserved("False",false);
	} else {
		hash.h["False"] = false;
	}
	if(__map_reserved["FALSE"] != null) {
		hash.setReserved("FALSE",false);
	} else {
		hash.h["FALSE"] = false;
	}
	$r = hash;
	return $r;
}(this));
yaml_type_YBool.YAML_EXPLICIT_BOOLEAN_MAP = (function($this) {
	var $r;
	var hash = new haxe_ds_StringMap();
	if(__map_reserved["true"] != null) {
		hash.setReserved("true",true);
	} else {
		hash.h["true"] = true;
	}
	if(__map_reserved["True"] != null) {
		hash.setReserved("True",true);
	} else {
		hash.h["True"] = true;
	}
	if(__map_reserved["TRUE"] != null) {
		hash.setReserved("TRUE",true);
	} else {
		hash.h["TRUE"] = true;
	}
	if(__map_reserved["false"] != null) {
		hash.setReserved("false",false);
	} else {
		hash.h["false"] = false;
	}
	if(__map_reserved["False"] != null) {
		hash.setReserved("False",false);
	} else {
		hash.h["False"] = false;
	}
	if(__map_reserved["FALSE"] != null) {
		hash.setReserved("FALSE",false);
	} else {
		hash.h["FALSE"] = false;
	}
	if(__map_reserved["y"] != null) {
		hash.setReserved("y",true);
	} else {
		hash.h["y"] = true;
	}
	if(__map_reserved["Y"] != null) {
		hash.setReserved("Y",true);
	} else {
		hash.h["Y"] = true;
	}
	if(__map_reserved["yes"] != null) {
		hash.setReserved("yes",true);
	} else {
		hash.h["yes"] = true;
	}
	if(__map_reserved["Yes"] != null) {
		hash.setReserved("Yes",true);
	} else {
		hash.h["Yes"] = true;
	}
	if(__map_reserved["YES"] != null) {
		hash.setReserved("YES",true);
	} else {
		hash.h["YES"] = true;
	}
	if(__map_reserved["n"] != null) {
		hash.setReserved("n",false);
	} else {
		hash.h["n"] = false;
	}
	if(__map_reserved["N"] != null) {
		hash.setReserved("N",false);
	} else {
		hash.h["N"] = false;
	}
	if(__map_reserved["no"] != null) {
		hash.setReserved("no",false);
	} else {
		hash.h["no"] = false;
	}
	if(__map_reserved["No"] != null) {
		hash.setReserved("No",false);
	} else {
		hash.h["No"] = false;
	}
	if(__map_reserved["NO"] != null) {
		hash.setReserved("NO",false);
	} else {
		hash.h["NO"] = false;
	}
	if(__map_reserved["on"] != null) {
		hash.setReserved("on",true);
	} else {
		hash.h["on"] = true;
	}
	if(__map_reserved["On"] != null) {
		hash.setReserved("On",true);
	} else {
		hash.h["On"] = true;
	}
	if(__map_reserved["ON"] != null) {
		hash.setReserved("ON",true);
	} else {
		hash.h["ON"] = true;
	}
	if(__map_reserved["off"] != null) {
		hash.setReserved("off",false);
	} else {
		hash.h["off"] = false;
	}
	if(__map_reserved["Off"] != null) {
		hash.setReserved("Off",false);
	} else {
		hash.h["Off"] = false;
	}
	if(__map_reserved["OFF"] != null) {
		hash.setReserved("OFF",false);
	} else {
		hash.h["OFF"] = false;
	}
	$r = hash;
	return $r;
}(this));
yaml_type_YFloat.YAML_FLOAT_PATTERN = new EReg("^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?" + "|\\.[0-9_]+(?:[eE][-+][0-9]+)?" + "|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*" + "|[-+]?\\.(?:inf|Inf|INF)" + "|\\.(?:nan|NaN|NAN))$","iu");
yaml_type_YInt.YAML_INTEGER_PATTERN = new EReg("^(?:[-+]?0b[0-1_]+" + "|[-+]?0[0-7_]+" + "|[-+]?(?:0|[1-9][0-9_]*)" + "|[-+]?0x[0-9a-fA-F_]+" + "|[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$","iu");
yaml_type_YNull.YAML_NULL_MAP = (function($this) {
	var $r;
	var hash = new haxe_ds_StringMap();
	if(__map_reserved["~"] != null) {
		hash.setReserved("~",true);
	} else {
		hash.h["~"] = true;
	}
	if(__map_reserved["null"] != null) {
		hash.setReserved("null",true);
	} else {
		hash.h["null"] = true;
	}
	if(__map_reserved["Null"] != null) {
		hash.setReserved("Null",true);
	} else {
		hash.h["Null"] = true;
	}
	if(__map_reserved["NULL"] != null) {
		hash.setReserved("NULL",true);
	} else {
		hash.h["NULL"] = true;
	}
	$r = hash;
	return $r;
}(this));
yaml_type_YTimestamp.YAML_TIMESTAMP_REGEXP = new EReg("^([0-9][0-9][0-9][0-9])" + "-([0-9][0-9]?)" + "-([0-9][0-9]?)" + "(?:(?:[Tt]|[ \\t]+)" + "([0-9][0-9]?)" + ":([0-9][0-9])" + ":([0-9][0-9])" + "(?:\\.([0-9]*))?" + "(?:[ \\t]*(Z|([-+])([0-9][0-9]?)" + "(?::([0-9][0-9]))?))?)?$","iu");
yaml_util_Ints.BASE = "0123456789abcdefghijklmnopqrstuvwxyz";
nice_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
